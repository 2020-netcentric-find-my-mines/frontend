{"version":3,"sources":["socket-event.ts","contexts/useSocket.tsx","pages/Home.tsx","contexts/useGame.tsx","pages/components/Board.tsx","pages/components/Info.tsx","pages/Play.tsx","pages/CreateGame.tsx","pages/JoinGame.tsx","styling.tsx","App.tsx","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","SocketContext","createContext","SocketProvider","children","useState","io","process","socket","Provider","value","emitEvent","event","data","emit","Home","name","setName","useContext","Flex","width","height","align","position","justifyContent","bg","Box","p","borderRadius","boxShadow","textAlign","Heading","my","justifyItems","FormControl","onSubmit","FormLabel","mb","Input","type","placeholder","variant","onChange","target","to","style","textDecoration","Button","mt","variantColor","onClick","console","log","SET_PLAYER_NAME","GameContext","initialState","id","started","noBombs","noBombsFound","currentPlayer","players","coordinates","tick","playerJoined","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","payload","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","useReducer","gameState","gameDispatch","Board","selectedCell","setSelectedCell","handleSelectCoordinate","dataset","Number","SELECT_COORDINATE","grid","cellId","cellBody","cellState","cellColor","Math","floor","as","border","borderColor","key","data-x","data-y","w","h","Grid","templateColumns","templateRows","gap","alignItems","Info","flexDirection","Text","Play","props","CreateGame","fontSize","color","fontWeight","CREATE_GAME","START_GAME","isDisabled","JoinGame","textfield","setTextField","JOIN_GAME","customTheme","theme","colors","accentColor","App","useEffect","on","CREATE_GAME_FEEDBACK","d","gameID","TICK","JOIN_GAME_FEEDBACK","isOK","GAME_STATE_CHANGED","START_GAME_FEEDBACK","NEXT_PLAYER","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","SET_PLAYER_NAME_FEEDBACK","onSocketEvent","basename","ThemeProvider","CSSReset","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef476ebc.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = 'connection',\n  DISCONNECT = 'disconnect',\n\n  // Server events: [Server] -> [Client]\n  TICK = 'TICK',\n  NEXT_PLAYER = 'NEXT_PLAYER',\n  COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n  WINNER = 'WINNER',\n  GAME_STATE_CHANGED = 'GAME_STATE_CHANGED',\n  CURRENT_PLAYER = 'CURRENT_PLAYER',\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n  CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n  JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n  QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n  START_GAME_FEEDBACK = 'START_GAME_FEEDBACK',\n  PLAY_AGAIN_FEEDBACK = 'PLAY_AGAIN_FEEDBACK',\n  RESET_BOARD_FEEDBACK = 'RESET_BOARD_FEEDBACK',\n  SET_BOARD_SIZE_FEEDBACK = 'SET_BOARD_SIZE_FEEDBACK',\n  PAUSE_FEEDBACK = 'PAUSE_FEEDBACK',\n  SET_NUMBER_OF_BOMB_FEEDBACK = 'SET_NUMBER_OF_BOMB_FEEDBACK',\n  SET_MAX_PLAYER_FEEDBACK = 'SET_MAX_PLAYER_FEEDBACK',\n  GET_CURRENT_PLAYER_FEEDBACK = 'GET_CURRENT_PLAYER_FEEDBACK',\n  SET_PLAYER_NAME_FEEDBACK = 'SET_PLAYER_NAME_FEEDBACK',\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = 'SELECT_COORDINATE',\n  CREATE_GAME = 'CREATE_GAME',\n  JOIN_GAME = 'JOIN_GAME',\n  QUICK_MATCH = 'QUICK_MATCH',\n  START_GAME = 'START_GAME',\n  PLAY_AGAIN = 'PLAY_AGAIN',\n  RESET_BOARD = 'RESET_BOARD',\n  SET_BOARD_SIZE = 'SET_BOARD_SIZE',\n  PAUSE = 'PAUSE',\n  SET_NUMBER_OF_BOMB = 'SET_NUMBER_OF_BOMB',\n  SET_MAX_PLAYER = 'SET_MAX_PLAYER',\n  GET_CURRENT_PLAYER = 'GET_CURRENT_PLAYER',\n  SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n}\n\nexport default SocketEvent","import React, { createContext, useState } from \"react\"\nimport io from \"socket.io-client\"\nimport ISocketContext from \"../types/socketContext.interface\"\n\nexport const SocketContext = createContext({} as ISocketContext)\n\nexport const SocketProvider = ({ children }: any) => {\n\n  const [ socket ] = useState(io(process.env.REACT_APP_SOCKET_URL ??\n    \"https://netcentric-architecture.herokuapp.com/\"))\n\n  const emitEvent = (event: any, data: any) => {\n    socket.emit(event, data)\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket, emitEvent }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import React, { useContext, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n} from \"@chakra-ui/core\";\r\nimport { SocketContext } from \"../contexts/useSocket\"\r\nimport SocketEvent from \"../socket-event\";\r\n\r\nexport default function Home() {\r\n\r\n  const [ name, setName ] = useState(\"\")\r\n  const { emitEvent } = useContext(SocketContext)\r\n\r\n  function handleNameChange(event: any) {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  function emitName() {\r\n    console.log(\"SET_PLAYER_NAME\", name)\r\n    emitEvent(SocketEvent.SET_PLAYER_NAME, name)\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg=\"gray.50\"\r\n    >\r\n      <Box\r\n        p={10}\r\n        bg=\"white\"\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n          <FormControl onSubmit={() => {}}>\r\n            <FormLabel mb=\"2\">Enter your name:</FormLabel>\r\n            <Input type=\"text\" placeholder=\"Ex: John\" variant=\"outline\" value={name} onChange={handleNameChange}/>\r\n          </FormControl>\r\n          <Link to=\"create\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt={4} variantColor=\"teal\" variant=\"solid\" onClick={emitName}>\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport IGameContext from \"../types/gameContext.interface\";\r\nimport ICoordinate from \"../types/coordinate.interface\";\r\n\r\nexport const GameContext = createContext({} as IGameContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  currentPlayer: \"\",\r\n  players: [],\r\n  coordinates: [],\r\n  tick: 10,\r\n  playerJoined: false,\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: any, action: any) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    case \"PLAYER_JOINED\":\r\n      return {\r\n        ...state,\r\n        playerJoined: payload,\r\n      };\r\n    case \"SET_CURRENT_PLAYER\":\r\n      return {\r\n        ...state,\r\n        currentPlayer: (payload === null || payload === \"\") ? \"Anonymous\" : payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport SocketEvent from \"../../socket-event\";\r\nimport { Grid, Box } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../../contexts/useGame\";\r\nimport { SocketContext } from \"../../contexts/useSocket\";\r\n\r\nexport default function Board() {\r\n    const { gameState } = useContext(GameContext);\r\n    const { emitEvent } = useContext(SocketContext);\r\n    let [ selectedCell, setSelectedCell ] = useState(-1)\r\n\r\n    const handleSelectCoordinate = (event: any) => {\r\n        console.log(\r\n            \"SELECT_COORDINATE\",\r\n            event.target.dataset.x,\r\n            event.target.dataset.y,\r\n        );\r\n        setSelectedCell(Number(event.target.dataset.x) + Number(event.target.dataset.y) * gameState.width);\r\n\r\n        emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n            x: Number(event.target.dataset.x),\r\n            y: Number(event.target.dataset.y),\r\n        });\r\n    };\r\n\r\n    let grid = [];\r\n    for (let cellId = 0; cellId < 36; cellId++) {\r\n        let cellBody;\r\n        const cellState = gameState.coordinates[cellId];\r\n\r\n        if (!cellState.isSelected) {\r\n            cellBody = \"🎯\";\r\n        } else if (!cellState.isBomb) {\r\n            cellBody = \"❌\";\r\n        } else {\r\n            cellBody = \"💣\";\r\n        }\r\n\r\n        //magic chessboard formula \r\n        const cellColor = ((cellId % gameState.width) % 2 === (Math.floor(cellId / gameState.width)) % 2) ? \"orange.400\" : \"green.400\" \r\n\r\n        grid.push(\r\n            <Box\r\n                as=\"button\"\r\n                border=\"4px\"\r\n                borderColor={selectedCell === cellId ? \"yellow.300\" : cellColor}\r\n                key={cellId}\r\n                data-x={cellId % gameState.width}\r\n                data-y={Math.floor(cellId / gameState.width)}\r\n                w=\"35px\"\r\n                h=\"35px\"\r\n                bg={cellColor}\r\n                onClick={handleSelectCoordinate}\r\n            >\r\n                {cellBody}\r\n            </Box>\r\n        ); \r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n            templateRows={`repeat(${gameState.height}, 1fr)`}\r\n            w={gameState.width * 35}\r\n            gap={0}\r\n            alignItems=\"center\"\r\n        >\r\n            {grid}\r\n        </Grid>\r\n    );\r\n}","import React, { useContext } from 'react'\nimport { GameContext } from '../../contexts/useGame' \nimport { SocketContext } from '../../contexts/useSocket'\nimport { Text, Flex, Heading } from '@chakra-ui/core'\n\nexport default function Info() {\n    const { gameState } = useContext(GameContext)\n    const { socket } = useContext(SocketContext)\n\n    return (\n        <Flex alignItems=\"center\" flexDirection=\"column\">\n            <Heading mb={4}>\n                Find My Mines\n            </Heading>\n            <Text>\n                It is {gameState.currentPlayer === socket.id ? \"your\" : \"other player's\"} turn.\n            </Text>\n            <Text mb={4}>\n                {gameState.currentPlayer === socket.id ? `${gameState.tick} seconds left!` : \"Please wait...\"}\n            </Text>\n        </Flex>\n    )\n}","import React, { useContext } from \"react\";\r\nimport { Button, Flex, Box } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Board from \"./components/Board\";\r\nimport Info from \"./components/Info\";\r\n\r\nexport default function Play(props: any) {\r\n  const { gameState } = useContext(GameContext);\r\n\r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n        <Link to=\"/\">\r\n          <Button>Click me to go back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg=\"gray.50\"\r\n    > \r\n      <Box\r\n        p={10}\r\n        bg=\"white\"\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Info />\r\n        <Board />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { Box, Button, Flex, Heading, Text } from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function CreateGame(props: any) {\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n\n  const createGame = () => {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  }\n\n  const startGame = () => {\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg=\"gray.50\"\n        >\n          <Box\n            p={10}\n            bg=\"white\"\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Create Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <Text\n                width=\"full\"\n                mt=\"2\"\n                fontSize=\"md\"\n                color=\"gray.600\"\n                fontWeight=\"\"\n              >\n                {gameState.id === \"\" ? \"\" : \"ID: \"}\n                <span style={{ color: \"red\" }}>{gameState.id}</span>\n              </Text>\n\n              <Button\n                width=\"full\"\n                mt={4}\n                variantColor={gameState.id === \"\" ? \"teal\" : \"orange\"}\n                variant=\"solid\"\n                onClick={gameState.id === \"\" ? createGame : startGame}\n                fontSize=\"sm\"\n                isDisabled={\n                  gameState.id === \"\"\n                    ? false\n                    : gameState.playerJoined === true\n                    ? false\n                    : true\n                }\n              >\n                {gameState.id === \"\" ? \"Generate Game ID\" : \"Start Game\"}\n              </Button>\n              <Link to=\"/join\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color=\"gray.600\">\n                  Join Game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function JoinGame(props: any) {\n  const [textfield, setTextField] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n\n  function joinGame() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n  function startGame() {\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg=\"gray.50\"\n        >\n          <Box\n            p={10}\n            bg=\"white\"\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Join Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <FormControl>\n                <FormLabel mb=\"2\">Enter Game ID:</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Ex: XRTMK35\"\n                  variant=\"outline\"\n                  value={textfield}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <Button\n                width=\"full\"\n                mt={4}\n                variantColor={\n                  gameState.playerJoined === true ? \"orange\" : \"teal\"\n                }\n                variant=\"solid\"\n                onClick={gameState.playerJoined === true ? startGame : joinGame}\n                fontSize=\"sm\"\n              >\n                {gameState.playerJoined === true ? \"Start Game\" : \"Join Game\"}\n              </Button>\n              <Link to=\"/create\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color=\"gray.600\">\n                  Create game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      accentColor: \"#1a365d\"\n    },\n  };\n\nexport default customTheme;","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Play from \"./pages/Play\";\n\nimport { GameContext } from \"./contexts/useGame\";\nimport { SocketContext } from \"./contexts/useSocket\";\nimport { onSocketEvent } from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./pages/CreateGame\";\nimport JoinGame from \"./pages/JoinGame\";\nimport customTheme from \"./styling\";\n\nfunction App() {\n  const { gameDispatch } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider theme={customTheme}>\n          <CSSReset />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/play\">\n              <Play />\n            </Route>\n            <Switch>\n              <Route path=\"/create\">\n                <CreateGame />\n              </Route>\n              <Route path=\"/join\">\n                <JoinGame />\n              </Route>\n              <Route path=\"/quick-game\">Quick Game</Route>\n            </Switch>\n          </Switch>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import SocketEvent from \"../socket-event\"\r\n\r\nexport function onSocketEvent(socket: any, gameDispatch: any) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", d);\r\n    console.log(\"Game ID: \", d.data.gameID);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: d.data.gameID });\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", d);\r\n    gameDispatch({ type: \"PLAYER_JOINED\", payload: d.isOK });\r\n  });\r\n\r\n  socket.on(SocketEvent.GAME_STATE_CHANGED, (d: any) => {\r\n    console.log(d);\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"START_GAME_FEEDBACK\", d);\r\n    if (d.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: d.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (d: any) => {\r\n    console.log(\"NEXT_PLAYER\", d);\r\n    gameDispatch({ type: \"SET_CURRENT_PLAYER\", payload: d.id})\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (d: any) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", d);\r\n    if (d.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: d.data.selectedCoordinates,\r\n      });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.SET_PLAYER_NAME_FEEDBACK, (d: any) => {\r\n    console.log(\"SET_PLAYER_NAME_FEEDBACK\", d);\r\n  });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\nimport { SocketProvider } from \"./contexts/useSocket\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <SocketProvider>\n        <App />\n      </SocketProvider>\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}