{"version":3,"sources":["socket-event.ts","components/Home.tsx","components/GameModeButton.tsx","components/StartGameButton.tsx","components/Lobby.tsx","contexts/useGame.tsx","components/Play.tsx","components/Game.tsx","components/CreateGame.tsx","components/JoinGame.tsx","App.tsx","hooks/useSocket.ts","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","Home","Flex","width","align","justifyContent","Box","p","textAlign","Heading","my","justifyItems","FormControl","FormLabel","mb","Input","type","placeholder","variant","to","style","textDecoration","Button","mt","variantColor","GameModeButton","props","link","text","loading","onClick","setLoading","console","log","margin","StartGameButton","emitEvent","START_GAME","Lobby","setSelectedTab","isLoading","selectedTab","GameContext","createContext","initialState","height","id","started","noBombs","noBombsFound","players","coordinates","tick","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","payload","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","Play","useContext","handleSelectCoordinate","event","target","dataset","SELECT_COORDINATE","grid","cellId","cellBody","cellState","data-x","data-y","Math","floor","Grid","templateColumns","templateRows","gap","Game","path","CreateGame","gameID","JoinGame","useState","textfield","setTextField","Stack","maxWidth","onChange","JOIN_GAME","App","socketURL","socket","setSocket","useEffect","s","io","e","data","emit","useSocket","process","on","CREATE_GAME_FEEDBACK","d","TICK","JOIN_GAME_FEEDBACK","GAME_STATE_CHANGED","START_GAME_FEEDBACK","isOK","NEXT_PLAYER","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","onSocketEvent","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df180b3b.chunk.js","sourcesContent":["enum SocketEvent {\n    CONNECTION = 'connection',\n    DISCONNECT = 'disconnect',\n\n    // Server events: [Server] -> [Client]\n    TICK = 'TICK',\n    NEXT_PLAYER = 'NEXT_PLAYER',\n    COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n    WINNER = 'WINNER',\n    GAME_STATE_CHANGED = 'GAME_STATE_CHANGED',\n    CURRENT_PLAYER = 'CURRENT_PLAYER',\n\n    // Client feedbacks: [Server] -> [Client]\n    SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n    CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n    JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n    QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n    START_GAME_FEEDBACK = 'START_GAME_FEEDBACK',\n    SET_BOARD_SIZE_FEEDBACK = 'SET_BOARD_SIZE_FEEDBACK',\n    PAUSE_FEEDBACK = 'PAUSE_FEEDBACK',\n    SET_NUMBER_OF_BOMB_FEEDBACK = 'SET_NUMBER_OF_BOMB_FEEDBACK',\n    SET_MAX_PLAYER_FEEDBACK = 'SET_MAX_PLAYER_FEEDBACK',\n    GET_CURRENT_PLAYER_FEEDBACK = 'GET_CURRENT_PLAYER_FEEDBACK',\n\n    // Client events: [Client] -> [Server]\n    SELECT_COORDINATE = 'SELECT_COORDINATE',\n    CREATE_GAME = 'CREATE_GAME',\n    JOIN_GAME = 'JOIN_GAME',\n    QUICK_MATCH = 'QUICK_MATCH',\n    START_GAME = 'START_GAME',\n    SET_BOARD_SIZE = 'SET_BOARD_SIZE',\n    PAUSE = 'PAUSE',\n    SET_NUMBER_OF_BOMB = 'SET_NUMBER_OF_BOMB',\n    SET_MAX_PLAYER = 'SET_MAX_PLAYER',\n    GET_CURRENT_PLAYER = 'GET_CURRENT_PLAYER',\n}\n\nexport default SocketEvent\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Box, Button, Flex, FormControl, FormLabel, Heading, Input } from '@chakra-ui/core'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n            <Box p={2}>\r\n                <Box textAlign=\"center\">\r\n                <Heading>Mine Sweeper</Heading>\r\n                </Box>\r\n                <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n                <FormControl>\r\n                    <FormLabel mb=\"2\">Enter your name:</FormLabel>\r\n                    <Input type=\"text\" placeholder=\"John\" variant=\"outline\" width=\"-32px\" />\r\n                </FormControl>\r\n                <Link to=\"/game\" style={{ textDecoration: 'none' }}>\r\n                    <Button width=\"full\" mt={4} variantColor=\"green\" variant=\"outline\">\r\n                    Continue\r\n                    </Button>\r\n                </Link>\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from '@chakra-ui/core'\r\n\r\nexport default function GameModeButton(props: any) {\r\n  const link: string = props.link;\r\n  const text: string = props.text;\r\n  // const isLoading: boolean = props.isLoading;\r\n  // const emitEvent = props.emitEvent;\r\n\r\n  return (\r\n    <Link to={link} style={{ textDecoration: 'none' }}>\r\n      <Button\r\n        variantColor=\"green\"\r\n        variant={props.loading[0] === link ? \"solid\" : \"outline\"}\r\n        // isLoading={props.loading[0] === link ? isLoading : undefined}\r\n        // isDisabled={props.loading[0] === link ? undefined : isLoading}\r\n        onClick={() => {\r\n          props.setLoading([link, true]);\r\n          switch (link) {\r\n            case \"/game/create\":\r\n              return console.log(\"Create\")\r\n            case \"/game/join\":\r\n              return console.log(\"joinnnnn\");\r\n            case \"/game/quick-game\":\r\n              return console.log(\"quickkkk\");\r\n          }\r\n          \r\n        }}\r\n        margin=\"2\"\r\n      >\r\n        {text}\r\n      </Button>\r\n    </Link>\r\n  )\r\n}","import React from 'react'\r\nimport { Button } from '@chakra-ui/core'\r\nimport SocketEvent from '../socket-event'\r\n\r\nexport default function StartGameButton(props: any) {\r\n    const emitEvent = props.emitEvent;\r\n\r\n    function startGame() {\r\n        console.log(\"Emit START_GAME\")\r\n        emitEvent(SocketEvent.START_GAME, null)\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            variantColor=\"green\"\r\n            variant=\"outline\"\r\n            onClick={startGame}\r\n            margin=\"2\"\r\n        >\r\n            Start Game\r\n        </Button>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport GameModeButton from './GameModeButton'\r\nimport StartGameButton from './StartGameButton'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from '@chakra-ui/core'\r\n\r\nexport default function Lobby(props: any) {\r\n\r\n    return (\r\n        <>\r\n            <Link to=\"/home\" style={{ textDecoration: 'none' }}>\r\n                <Button \r\n                    variantColor=\"orange\" \r\n                    variant=\"outline\" \r\n                    onClick={() => { props.setSelectedTab([\"\", false]) }}\r\n                    margin=\"2\"\r\n                >\r\n                    Back\r\n                </Button>\r\n            </Link>\r\n            <GameModeButton \r\n                link=\"/game/create\" \r\n                text=\"Create Room\" \r\n                isLoading={props.selectedTab[1]} \r\n                loading={props.selectedTab} \r\n                setLoading={props.setSelectedTab}\r\n                emitEvent={props.emitEvent}\r\n            />\r\n            <GameModeButton \r\n                link=\"/game/join\" \r\n                text=\"Join Room\" \r\n                isLoading={props.selectedTab[1]}\r\n                loading={props.selectedTab} \r\n                setLoading={props.setSelectedTab}\r\n                emitEvent={props.emitEvent}\r\n            />\r\n            <GameModeButton \r\n                link=\"/game/quick-game\" \r\n                text=\"Quick Game\" \r\n                isLoading={props.selectedTab[1]} \r\n                loading={props.selectedTab} \r\n                setLoading={props.setSelectedTab}\r\n                emitEvent={props.emitEvent}\r\n            />\r\n            <StartGameButton emitEvent={props.emitEvent}/>\r\n        </>\r\n    )\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport IContext from '../types/context.interface'\r\nimport ICoordinate from '../types/coordinate.interface'\r\n\r\nexport const GameContext = createContext({} as IContext)\r\n\r\nconst initialState = {\r\n    width: -1,\r\n    height: -1,\r\n    id: \"\",\r\n    started: false,\r\n    noBombs: -1,\r\n    noBombsFound: -1,\r\n    players: [],\r\n    coordinates: [],\r\n    tick: -1\r\n}\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n    let coordinates = []\r\n    for (let x = 0; x < boardWidth; x++) {\r\n        for (let y = 0; y < boardHeight; y++) {\r\n            coordinates.push({\r\n                x,\r\n                y,\r\n                isBomb: false,\r\n                isSelected: false,\r\n            })\r\n        }\r\n    }\r\n    return coordinates\r\n}\r\n\r\nconst updateCoordinate = (current: ICoordinate[], selected: ICoordinate[], width: number) => {\r\n    selected.forEach((cell) => {\r\n        current[cell.x + cell.y * width] = cell\r\n    })\r\n    \r\n    return current\r\n}\r\n\r\nconst gameReducer = (state: any, action: any) => {\r\n    const { type, payload } = action\r\n    switch (type) {\r\n        case 'SET_TICK':\r\n            return ({\r\n                ...state,\r\n                tick: payload\r\n            })\r\n        case 'SET_GAME_ID':\r\n            return ({\r\n                ...state,\r\n                id: payload\r\n            })\r\n        case 'INITIALIZE':\r\n            return ({\r\n                ...state,\r\n                started: true,\r\n                width: payload.boardWidth,\r\n                height: payload.boardHeight,\r\n                noBombs: payload.numberOfBombs,\r\n                noBombsFound: payload.numberOfBombsFound,\r\n                players: payload.players,\r\n                coordinates: initializeCoordinate(payload.boardWidth, payload.boardHeight)\r\n            })\r\n        case 'COORDINATE_FEEDBACK':\r\n            return ({\r\n                ...state,\r\n                coordinates: updateCoordinate(state.coordinates, payload, state.width)\r\n            })\r\n        default:\r\n            return (state)\r\n    }\r\n}\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n    const [gameState, gameDispatch] = useReducer(\r\n        gameReducer,\r\n        initialState\r\n    )\r\n\r\n    return (\r\n        <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    )\r\n}","import React, {useContext} from 'react'\r\nimport SocketEvent from '../socket-event'\r\nimport { Grid, Button } from '@chakra-ui/core'\r\nimport { GameContext } from '../contexts/useGame'\r\n\r\nexport default function Play(props: any) {\r\n    const {gameState} = useContext(GameContext)\r\n\r\n    if (!gameState.started) {\r\n        return (\r\n            <div>\r\n                <h2>Loading...</h2>\r\n                <p>Make sure you create/join game before starting.</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleSelectCoordinate = (event: any) => {\r\n        console.log(\"SELECT_COORDINATE\", event.target.dataset.x, event.target.dataset.y)\r\n        props.emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n            x: +event.target.dataset.x,\r\n            y: +event.target.dataset.y,\r\n        })\r\n    }\r\n\r\n    let grid = []\r\n    for (let cellId: number = 0; cellId < 36; cellId++) {\r\n        let cellBody\r\n        const cellState = gameState.coordinates[cellId]\r\n\r\n        if (!cellState.isSelected) {\r\n            cellBody = '🎯'\r\n        } else if (!cellState.isBomb) {\r\n            cellBody = '❌'\r\n        } else {\r\n            cellBody = '💣'\r\n        }\r\n\r\n        grid.push(\r\n            <Button \r\n                data-x={cellId % gameState.width} \r\n                data-y={Math.floor(cellId / gameState.height)} \r\n                variantColor=\"green\" \r\n                onClick={handleSelectCoordinate}\r\n            >\r\n                {cellBody}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid \r\n            templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n            templateRows={`repeat(${gameState.height}, 1fr)`}\r\n            gap={1}\r\n        >\r\n            {grid}\r\n        </Grid>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport Lobby from './Lobby'\r\nimport Play from './Play'\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport { Box } from '@chakra-ui/core'\r\nimport { GameContext } from '../contexts/useGame'\r\n\r\nexport default function Game(props: any) {\r\n\r\n    const {gameState} = useContext(GameContext)\r\n\r\n    return (\r\n        <nav>\r\n            <Box >\r\n                <Switch>\r\n                    <Route path=\"/game\">\r\n                        {gameState.started \r\n                            ? <Redirect to=\"/play\" />\r\n                            : <Lobby selectedTab={props.selectedTab} setSelectedTab={props.setSelectedTab} emitEvent={props.emitEvent} />\r\n                        }\r\n                    </Route> \r\n                    <Route path=\"/play\">\r\n                        <Play />\r\n                    </Route>\r\n                </Switch>\r\n            </Box>\r\n        </nav>\r\n    )\r\n}","import React from 'react'\nimport SocketEvent from '../socket-event'\n// import onSocketEvent from '../logics/handleEvent'\nimport { Box, Button, Heading, Stack } from '@chakra-ui/core'\n// import {\n//     Modal,\n//     ModalOverlay,\n//     ModalContent,\n//     ModalHeader,\n//     ModalFooter,\n//     ModalBody,\n//     ModalCloseButton,\n// } from \"@chakra-ui/core\";\n// import { create } from 'domain';\n\nexport default function CreateGame(props: any) {\n    // const setLoading = props.setSelectedTab\n    // const { isOpen, onClose } = useDisclosure(true);\n    const emitEvent = props.emitEvent;\n    const gameID = props.gameID;\n    // const exit = () => {\n    //     setLoading(\"\", false)\n    // }\n\n    function createGame() {\n        emitEvent(SocketEvent.CREATE_GAME, null);\n    }\n\n\n    return (\n        // <>\n        //     <Modal isOpen={isOpen} onClose={onClose}>\n        //         <ModalOverlay />\n        //         <ModalContent>\n        //             <ModalHeader>Game Created</ModalHeader>\n        //             <ModalBody>\n        //                 Ask you friends to join game <br/> <br/>\n        //                 <span style={{fontWeight: 'bolder'}}>ID: {gameID}</span>\n        //             </ModalBody>\n\n        //             <ModalFooter>\n        //                 <Button variantColor=\"blue\" mr={3} onClick={() => { onClose(); exit();}}>\n        //                     Close\n        //                 </Button>\n        //             </ModalFooter>\n        //         </ModalContent>\n        //     </Modal>\n        // </>\n        <Stack align=\"center\">\n        <Heading>\n            Create Room\n        </Heading>\n        <Box padding=\"1rem\">\n        {/* <Input placeholder=\"Enter the game's ID\" width=\"-32px\" value={textfield} onChange={handleChange}/> */}\n        <span style={{}}>ID: </span><span style={{color: \"red\"}}>{gameID}</span>\n        </Box>\n        <Button margin=\"1rem\" onClick={createGame} >\n            Create\n        </Button>\n\n    </Stack>\n    );\n}","import React, { useState } from 'react'\nimport SocketEvent from '../socket-event'\nimport { Box, Button, Heading, Input, Stack } from '@chakra-ui/core'\n\nexport default function JoinGame(props: any) {\n    \n    let [textfield, setTextField] = useState(\"\")\n\n    const emitEvent = props.emitEvent;\n    \n    function submit() {\n        emitEvent(SocketEvent.JOIN_GAME, textfield);\n    }\n\n    function handleChange(event: any) {\n        setTextField(event.target.value)\n    }\n\n  return (\n    <Stack align=\"center\">\n        <Heading>\n            Join Room\n        </Heading>\n        <Box margin=\"5\" maxWidth=\"300px\">\n        <Input placeholder=\"Enter the game's ID\" width=\"-32px\" value={textfield} onChange={handleChange}/>\n        </Box>\n        <Button margin=\"1rem\" onClick={submit}>\n            Join\n        </Button>\n        \n    </Stack>\n  )\n}","import React, { useEffect, useState, useContext } from 'react'\nimport './App.css'\n\nimport Home from './components/Home'\nimport Game from './components/Game'\nimport Play from './components/Play'\n\nimport { useSocket } from './hooks/useSocket'\nimport { GameContext }  from './contexts/useGame'\nimport onSocketEvent from './logics/handleEvent'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nimport { ThemeProvider } from '@chakra-ui/core'\nimport CreateGame from './components/CreateGame'\nimport JoinGame from './components/JoinGame'\n\nfunction App() {\n\n  const [selectedTab, setSelectedTab] = useState([\"\", false])\n  const { gameState, gameDispatch } = useContext(GameContext)\n\n  // Initialize Socket.IO\n  const { socket, emitEvent } = useSocket(process.env.REACT_APP_SOCKET_URL ?? \"https://netcentric-architecture.herokuapp.com/\")\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch)\n    }\n  }, [socket, gameDispatch])\n\n  return (\n    <div>\n      <Router>\n        <ThemeProvider >\n          <Switch>\n            <Route path=\"/home\">\n              <Home />\n            </Route>\n            <Route path=\"/game\">\n              <Game selectedTab={selectedTab} setSelectedTab={setSelectedTab} emitEvent={emitEvent} />\n              <Switch>\n                <Route path=\"/game/create\">\n                  <CreateGame gameID={gameState.id} setSelectedTab={setSelectedTab} emitEvent={emitEvent}/>\n                </Route>\n                <Route path=\"/game/join\">\n                  <JoinGame emitEvent={emitEvent}/>\n                </Route>\n                <Route path=\"/game/quick-game\">\n                  Quick Game\n                </Route>\n              </Switch>\n            </Route>\n            <Route path=\"/play\">\n              <Play emitEvent={emitEvent} />\n            </Route>\n          </Switch>\n        </ThemeProvider >\n      </Router>\n    </div>\n    \n  )\n\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\nimport io from 'socket.io-client'\nimport SocketEvent from '../socket-event'\n\nexport function useSocket(socketURL: string) {\n    let [socket, setSocket] = useState<null | SocketIOClient.Socket>()\n\n    // Connect to Socket.IO\n    useEffect(() => {\n        console.log(\"Connecting to WS...\")\n        let s = io(socketURL)\n        setSocket(s)\n    }, [socketURL])\n\n    function emitEvent(e: SocketEvent, data: any) {\n        if (socket) {\n            socket.emit(e, data)\n        }\n    }\n\n    return { socket, emitEvent }\n}","import SocketEvent from '../socket-event'\r\n\r\nexport default function onSocketEvent(\r\n    socket: any, \r\n    gameDispatch: any\r\n){\r\n    socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (d: any) => {\r\n        console.log('CREATE_GAME_FEEDBACK', d)\r\n        console.log('Game ID: ', d.data.gameID)\r\n        gameDispatch({type: 'SET_GAME_ID', payload: d.data.gameID})\r\n    })\r\n\r\n    socket.on(SocketEvent.TICK, (tick: number) => {\r\n        gameDispatch({type: 'SET_TICK', payload: tick})\r\n    })\r\n\r\n    socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (d: any) => {\r\n        console.log('JOIN_GAME_FEEDBACK', d)\r\n    })\r\n\r\n    socket.on(SocketEvent.GAME_STATE_CHANGED, (d: any) => {\r\n        console.log(d)\r\n    })\r\n\r\n    socket.on(SocketEvent.START_GAME_FEEDBACK, (d: any) => {\r\n        console.log('START_GAME_FEEDBACK', d)\r\n        if (d.isOK) {\r\n            gameDispatch({type: 'INITIALIZE', payload: d.data})\r\n        }\r\n    })\r\n\r\n    socket.on(SocketEvent.NEXT_PLAYER, (d: any) => {\r\n        console.log('NEXT_PLAYER', d)\r\n    })\r\n\r\n    socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (d: any) => {\r\n        console.log('SELECT_COORDINATE_FEEDBACK', d)\r\n        if (d.isOK) {\r\n            gameDispatch({type: 'COORDINATE_FEEDBACK', payload: d.data.selectedCoordinates})\r\n        }\r\n    })\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { GameProvider } from './contexts/useGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <App />\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}