{"version":3,"sources":["socket-event.ts","contexts/useGame.tsx","contexts/useSocket.tsx","Firebase.tsx","pages/Home.tsx","pages/components/Board.tsx","pages/components/Info.tsx","pages/components/Chat.tsx","pages/Play.tsx","pages/Register.tsx","pages/CreateGame.tsx","pages/JoinGame.tsx","pages/Leaderboard.tsx","styling.tsx","App.tsx","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","GameContext","createContext","initialState","width","height","id","started","noBombs","noBombsFound","currentPlayer","name","players","coordinates","tick","playerJoined","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","type","payload","map","player","score","gameID","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","SocketContext","SocketProvider","useState","io","process","socket","emitEvent","event","data","emit","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","setName","email","setEmail","password","setPassword","useContext","useColorMode","colorMode","toggleColorMode","toast","useToast","handleChange","target","useEffect","title","description","status","position","duration","isClosable","Flex","align","justifyContent","bg","Box","p","borderRadius","boxShadow","textAlign","Heading","my","justifyItems","FormControl","FormLabel","mb","Input","placeholder","variant","onChange","to","style","textDecoration","Button","mt","variantColor","onClick","console","log","auth","signInWithEmailAndPassword","then","catch","error","code","message","SET_PLAYER_NAME","fontSize","color","Board","handleSelectCoordinate","dataset","SELECT_COORDINATE","Number","grid","cellId","cellBody","cellState","cellColor","Math","floor","as","border","borderColor","key","data-x","data-y","Grid","templateColumns","templateRows","w","h","gap","Info","alignItems","flexDirection","Text","Chat","chat","setChat","chatData","setChatData","onChatEvent","useCallback","database","ref","on","retrievedChat","val","cleanedChat","Object","keys","username","chatView","chatDatum","truncatedChatView","slice","length","direction","backgroundColor","padding","fontWeight","pb","pt","Divider","orientation","IconButton","aria-label","icon","size","axios","post","qs","stringify","uid","params","gameId","headers","Play","RESET_BOARD","Register","setUsername","createUserWithEmailAndPassword","CreateGame","setStarted","boardSize","setBoardSize","setNumberOfBombs","maxPlayers","setMaxPlayers","SET_BOARD_SIZE_FEEDBACK","isOK","SET_NUMBER_OF_BOMB_FEEDBACK","SET_MAX_PLAYER_FEEDBACK","gameParameters","m","py","rounded","NumberInput","step","min","max","defaultValue","ceil","isLoading","loadingText","CREATE_GAME","START_GAME","isDisabled","JoinGame","textfield","setTextField","JOIN_GAME","Leaderboard","dummyPlayer","loading","setLoading","leaderboard","useRef","allTime","week","day","requestLeaderboard","timeRange","a","get","numOfPlayers","response","isOk","topPlayers","requestLeaderboards","leaderboardView","justify","totalGamesWon","gamesWonWeek","gamesWonDay","px","Spinner","customTheme","theme","colors","accentColor","borders","App","CREATE_GAME_FEEDBACK","SET_PLAYER_NAME_FEEDBACK","TICK","JOIN_GAME_FEEDBACK","START_GAME_FEEDBACK","NEXT_PLAYER","RESET_BOARD_FEEDBACK","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","onSocketEvent","basename","ThemeProvider","ColorModeProvider","CSSReset","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36da5b53.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = 'connection',\n  DISCONNECT = 'disconnect',\n\n  // Server events: [Server] -> [Client]\n  TICK = 'TICK',\n  NEXT_PLAYER = 'NEXT_PLAYER',\n  COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n  WINNER = 'WINNER',\n  GAME_STATE_CHANGED = 'GAME_STATE_CHANGED',\n  CURRENT_PLAYER = 'CURRENT_PLAYER',\n  NUMBER_PLAYERS_CHANGED = 'NUMBER_PLAYERS_CHANGED',\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n  CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n  JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n  QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n  START_GAME_FEEDBACK = 'START_GAME_FEEDBACK',\n  PLAY_AGAIN_FEEDBACK = 'PLAY_AGAIN_FEEDBACK',\n  RESET_BOARD_FEEDBACK = 'RESET_BOARD_FEEDBACK',\n  SET_BOARD_SIZE_FEEDBACK = 'SET_BOARD_SIZE_FEEDBACK',\n  PAUSE_FEEDBACK = 'PAUSE_FEEDBACK',\n  CHANGE_PLAYER_TYPE_FEEDBACK = 'CHANGE_PLAYER_TYPE_FEEDBACK',\n  SET_NUMBER_OF_BOMB_FEEDBACK = 'SET_NUMBER_OF_BOMB_FEEDBACK',\n  SET_MAX_PLAYER_FEEDBACK = 'SET_MAX_PLAYER_FEEDBACK',\n  GET_CURRENT_PLAYER_FEEDBACK = 'GET_CURRENT_PLAYER_FEEDBACK',\n  SET_PLAYER_NAME_FEEDBACK = 'SET_PLAYER_NAME_FEEDBACK',\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = 'SELECT_COORDINATE',\n  CREATE_GAME = 'CREATE_GAME',\n  JOIN_GAME = 'JOIN_GAME',\n  QUICK_MATCH = 'QUICK_MATCH',\n  START_GAME = 'START_GAME',\n  PLAY_AGAIN = 'PLAY_AGAIN',\n  RESET_BOARD = 'RESET_BOARD',\n  SET_BOARD_SIZE = 'SET_BOARD_SIZE',\n  PAUSE = 'PAUSE',\n  CHANGE_PLAYER_TYPE = 'CHANGE_PLAYER_TYPE',\n  SET_NUMBER_OF_BOMB = 'SET_NUMBER_OF_BOMB',\n  SET_MAX_PLAYER = 'SET_MAX_PLAYER',\n  GET_CURRENT_PLAYER = 'GET_CURRENT_PLAYER',\n  SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n}\n\nexport default SocketEvent","import React, { createContext, useReducer } from \"react\";\r\nimport { IGameContext, ICoordinate, IGame, IAction } from \"../types/interface\";\r\n\r\nexport const GameContext = createContext({} as IGameContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  currentPlayer: \"\",\r\n  name: \"\",\r\n  players: [],\r\n  coordinates: [],\r\n  tick: 10,\r\n  playerJoined: false,\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: IGame, action: IAction) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"RESET_BOARD\":\r\n      let coordinates = [];\r\n      for (let x = 0; x < state.width; x++) {\r\n        for (let y = 0; y < state.height; y++) {\r\n          coordinates.push({\r\n            x,\r\n            y,\r\n            isBomb: false,\r\n            isSelected: false,\r\n          });\r\n        }\r\n      }\r\n      let players = state.players\r\n      players.map( player => {\r\n        return player.score = 0\r\n      })\r\n      return {\r\n        ...state,\r\n        coordinates: coordinates,\r\n        players: players\r\n      };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        id: payload.gameID,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    case \"PLAYER_JOINED\":\r\n      return {\r\n        ...state,\r\n        playerJoined: payload,\r\n      };\r\n    case \"SET_CURRENT_PLAYER\":\r\n      return {\r\n        ...state,\r\n        currentPlayer: (payload === null || payload === \"\") ? \"Anonymous\" : payload,\r\n      };\r\n    case \"SET_PLAYER_NAME\":\r\n      return {\r\n        ...state,\r\n        name: (payload === null || payload === \"\") ? \"Anonymous\" : payload,\r\n      }\r\n    case \"SET_PLAYERS\":\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      }\r\n      case \"UPDATE_PLAYERS_SCORE\":\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useState } from \"react\"\nimport io from \"socket.io-client\"\nimport { ISocketContext } from \"../types/interface\"\nimport SocketEvent from \"../socket-event\"\n\nexport const SocketContext = createContext({} as ISocketContext)\n\nexport const SocketProvider = ({ children }: any) => {\n\n  const [ socket ] = useState(io(process.env.REACT_APP_SOCKET_URL ??\n    \"https://netcentric-architecture.herokuapp.com/\"))\n\n  const emitEvent = (event: SocketEvent, ...data: [any]) => {\n    socket.emit(event, ...data)\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket, emitEvent }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import * as firebase from 'firebase/app';\nimport 'firebase/database'\nimport 'firebase/auth'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBXZqXbdMLXf-lfNVaaRf7FTyS1khV_6yY\",\n    authDomain: \"findmymines.firebaseapp.com\",\n    databaseURL: \"https://findmymines.firebaseio.com\",\n    projectId: \"findmymines\",\n    storageBucket: \"findmymines.appspot.com\",\n    messagingSenderId: \"1082480748111\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  useColorMode,\r\n  useToast\r\n} from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\"\r\nimport { SocketContext } from \"../contexts/useSocket\"\r\nimport SocketEvent from \"../socket-event\";\r\nimport firebase from \"../Firebase\"\r\n\r\nexport default function Home() {\r\n\r\n  const [ name, setName ] = useState(\"\")\r\n  const [ email, setEmail ] = useState(\"\")\r\n  const [ password, setPassword ] = useState(\"\")\r\n  const { gameDispatch } = useContext(GameContext)\r\n  const { emitEvent } = useContext(SocketContext)\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    toast({\r\n      title: \"Welcome to Find My Mines\",\r\n      description: \"Have a great day!\",\r\n      status: \"success\",\r\n      position: \"top\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    })\r\n  }, [toast]);\r\n\r\n  function handleChange(event: any) {\r\n    if (event.target.name === \"name\") {\r\n      setName(event.target.value)\r\n    } else if (event.target.name === \"email\") {\r\n      setEmail(event.target.value)\r\n    } else if (event.target.name === \"password\") {\r\n      setPassword(event.target.value)\r\n    }\r\n  }\r\n\r\n  function handleSubmit() {\r\n    console.log(\"SET_PLAYER_NAME\", name)\r\n    gameDispatch({ type: \"SET_PLAYER_NAME\", payload: name })\r\n    if (!(email === \"\" || email === null) && !(password === \"\" || password === null)) {\r\n      firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\r\n        toast({\r\n          title: \"Sign in completed\",\r\n          description: \"Thank you for being a part of Find My Mines!\",\r\n          status: \"success\",\r\n          position: \"top\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n        })\r\n      }).catch((error) => {\r\n        console.log(\"Register error.\", error.code, error.message)\r\n        toast({\r\n          title: \"Sign in unsuccessful\",\r\n          description: \"Please try again later.\",\r\n          status: \"error\",\r\n          position: \"top\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n        })\r\n      });\r\n    }\r\n    emitEvent(SocketEvent.SET_PLAYER_NAME, name)\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    >\r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n\r\n          <FormControl>\r\n            <FormLabel mb=\"1\">Name:</FormLabel>\r\n            <Input mb=\"3\" name=\"name\" type=\"text\" placeholder=\"Ex: John\" variant=\"outline\" value={name} onChange={handleChange}/>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel mb=\"1\">Email:</FormLabel>\r\n            <Input type=\"text\" name=\"email\" placeholder=\"Leave blank for guest\" variant=\"outline\" value={email} onChange={handleChange}/>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel mb=\"1\">Password:</FormLabel>\r\n            <Input type=\"text\" name=\"password\" placeholder=\"Leave blank for guest\" variant=\"outline\" value={password} onChange={handleChange}/>\r\n          </FormControl>\r\n\r\n          <Link to=\"create\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt={4} variantColor=\"teal\" variant=\"solid\" onClick={handleSubmit}>\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"register\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\r\n              Register\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"leaderboard\">\r\n            <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\r\n              Leaderboard\r\n            </Button>\r\n          </Link>\r\n          <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"} onClick={toggleColorMode}>\r\n            Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport SocketEvent from \"../../socket-event\";\r\nimport { Grid, Box, Flex, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../../contexts/useGame\";\r\nimport { SocketContext } from \"../../contexts/useSocket\";\r\n\r\nexport default function Board() {\r\n    const { gameState } = useContext(GameContext);\r\n    const { emitEvent } = useContext(SocketContext);\r\n    const { colorMode } = useColorMode();\r\n\r\n\r\n    const handleSelectCoordinate = (event: any) => {\r\n\r\n        console.log(\r\n            \"SELECT_COORDINATE\",\r\n            event.target.dataset.x,\r\n            event.target.dataset.y,\r\n        );\r\n\r\n        emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n            x: Number(event.target.dataset.x),\r\n            y: Number(event.target.dataset.y),\r\n        });\r\n    };\r\n\r\n    let grid = [];\r\n    for (let cellId = 0; cellId < gameState.width * gameState.height; cellId++) {\r\n        let cellBody;\r\n        const cellState = gameState.coordinates[cellId];\r\n\r\n        if (!cellState.isSelected) {\r\n            cellBody = \"🎯\";\r\n        } else if (!cellState.isBomb) {\r\n            cellBody = \"❌\";\r\n        } else {\r\n            cellBody = \"💣\";\r\n        }\r\n\r\n        //magic chessboard formula \r\n        const cellColor = ((cellId % gameState.width) % 2 === (Math.floor(cellId / gameState.width)) % 2) ? \"orange.200\" : \"green.200\" \r\n\r\n        grid.push(\r\n            <Box\r\n                as=\"button\"\r\n                border=\"4px\"\r\n                borderColor={cellColor}\r\n                key={cellId}\r\n                data-x={cellId % gameState.width}\r\n                data-y={Math.floor(cellId / gameState.width)}\r\n                width=\"50px\"\r\n                height=\"50px\"\r\n                bg={cellColor}\r\n                onClick={handleSelectCoordinate}\r\n            >  \r\n                {cellBody}\r\n            </Box>\r\n        ); \r\n    }\r\n\r\n    return (\r\n        <Flex \r\n            width=\"full\"\r\n            height=\"100%\"\r\n            align=\"center\"\r\n            justifyContent=\"center\"\r\n        >\r\n            <Grid\r\n                templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n                templateRows={`repeat(${gameState.height}, 1fr)`}\r\n                border=\"4px\"\r\n                borderColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}\r\n                w={gameState.width * 50 + 8}\r\n                h={gameState.width * 50 + 8}\r\n                gap={0}\r\n            >\r\n                {grid}\r\n            </Grid>\r\n        </Flex>\r\n    );\r\n}","import React, { useContext } from 'react'\nimport { GameContext } from '../../contexts/useGame'\nimport { SocketContext } from '../../contexts/useSocket'\nimport { Text, Flex, Heading } from '@chakra-ui/core'\n\nexport default function Info() {\n    const { gameState } = useContext(GameContext)\n    const { socket } = useContext(SocketContext)\n\n    return (\n        <Flex alignItems=\"center\" flexDirection=\"column\">\n            <Heading mb={4}>\n                Find My Mines\n            </Heading>\n            <Text>\n                It is {gameState.currentPlayer === socket.id ? \"your\" : \"other player's\"} turn.\n            </Text>\n            <Text>\n                {gameState.currentPlayer === socket.id ? `${gameState.tick} seconds left!` : \"Please wait...\"}\n            </Text>\n            <Text mb={4}>\n                Player: {gameState.name}\n            </Text>\n        </Flex>\n    )\n}\n","import React, { useState, useContext, useEffect, useCallback, } from \"react\"\nimport axios from \"axios\"\nimport { FormControl, Input, IconButton, Flex, Box, Text, Divider } from \"@chakra-ui/core\"\nimport { GameContext } from \"../../contexts/useGame\"\nimport { SocketContext } from \"../../contexts/useSocket\"\nimport firebase from \"../../Firebase\"\nimport { IChatData } from \"../../types/interface\"\nimport qs from 'querystring'\n\nexport default function Chat() {\n    const CHAT_MAX_LENGTH = 20\n    const CHAT_MAX_NUMBER = 8\n\n    const [chat, setChat] = useState(\"\")\n    const { gameState } = useContext(GameContext)\n    const [chatData, setChatData] = useState([] as IChatData[])\n    const { socket } = useContext(SocketContext)\n\n    const handleChange = (event: any) => {\n        if (event.target.value.length < CHAT_MAX_LENGTH) {\n            setChat(event.target.value)\n        }\n    }\n\n    const onChatEvent = useCallback(() => {\n        console.log(gameState.id)\n        firebase.database().ref('games/' + gameState.id).on('value', (data) => {\n            const retrievedChat = data.val()\n            if (retrievedChat === null) {\n                return\n            }\n            const cleanedChat: IChatData[] = []\n            Object.keys(retrievedChat).forEach((key) => {\n                cleanedChat.push({\n                    username: retrievedChat[key].username, \n                    message: retrievedChat[key].message,\n                })\n            })\n            setChatData(cleanedChat)\n    \n        }, () => {\n            console.log('Error')\n        })\n    }, [gameState.id])\n\n    useEffect(() => {\n        onChatEvent()\n    }, [onChatEvent])\n\n    const handleSubmit = () => {\n        console.log(gameState.id, gameState.name)\n        if (chat === \"\" || chat === null) {\n            return\n        }\n        setChat(\"\")\n        axios.post('https://asia-southeast2-findmymines.cloudfunctions.net/addChatMessage/',\n            qs.stringify({\n                message: chat,\n                uid: socket.id,\n                username: gameState.name,\n            }),\n            {\n                params: {\n                    gameId: gameState.id\n                },\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }\n        )\n    }\n\n    const chatView: JSX.Element[] = []\n    let key = 0\n    chatData.forEach((chatDatum) => chatView.push(\n        <Text key={key++}>{chatDatum.username} : {chatDatum.message}</Text>\n    ))\n    const truncatedChatView = chatView.slice(chatView.length - CHAT_MAX_NUMBER)\n\n    return (\n        <Flex direction=\"column\">\n            <Box backgroundColor=\"gray\" padding=\"2\">\n                <Flex fontWeight=\"bold\" fontSize=\"xl\" justifyContent=\"center\" pb=\"2\">\n                    Scores\n                </Flex>\n                <Text>\n                <span style={{ fontWeight: \"bold\" }}>{gameState.players[0].name?.length === 0 ? \"Player 1\" : gameState.players[0].name}: </span><span style={{ color: \"orange\" }}>{gameState.players[0].score}</span>\n                </Text>\n                <Text>\n                <span style={{ fontWeight: \"bold\" }}>{gameState.players[1].name?.length === 0 ? \"Player 2\" : gameState.players[1].name}: </span><span style={{ color: \"orange\" }}>{gameState.players[1].score}</span>\n                </Text>\n                <Text fontWeight=\"light\" pt={2}>\n                    There are {gameState.players.length} players online\n                </Text>\n            </Box>\n            <Divider orientation=\"horizontal\"/>\n            <Box backgroundColor=\"gray\" padding=\"2\">\n                <Flex fontWeight=\"bold\" fontSize=\"xl\" justifyContent=\"center\" pb=\"2\">\n                    Chat\n                </Flex>\n                {truncatedChatView}\n                <FormControl flexDirection=\"row\">\n                    <Input placeholder=\"Chat...\" value={chat} onChange={handleChange} />\n                    <IconButton aria-label=\"Send chat\" icon=\"check\" size=\"sm\" onClick={handleSubmit}></IconButton>\n                </FormControl>\n            </Box>\n        </Flex>\n    );\n}","import React, { useContext } from \"react\";\r\nimport { Button, Flex, Box, Divider, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Board from \"./components/Board\";\r\nimport Info from \"./components/Info\";\r\nimport Chat from \"./components/Chat\";\r\nimport { SocketContext } from \"../contexts/useSocket\";\r\nimport SocketEvent from \"../socket-event\";\r\n\r\nexport default function Play() {\r\n  const { gameState } = useContext(GameContext);\r\n  const { colorMode } = useColorMode();\r\n  const { emitEvent } = useContext(SocketContext)\r\n\r\n  function emitResetBoard() {\r\n    console.log(SocketEvent.RESET_BOARD)\r\n    emitEvent(SocketEvent.RESET_BOARD, null)\r\n  }\r\n  \r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n        <Link to=\"/\">\r\n          <Button>Click me to go back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    > \r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Flex>\r\n          <Flex direction=\"column\">\r\n            <Info />\r\n            <Board />\r\n            <Button onClick={emitResetBoard}>\r\n              Reset Game\r\n            </Button>\r\n          </Flex>\r\n          <Divider orientation=\"vertical\" />\r\n          <Chat />\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, {useState} from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Flex, Box, Button, Heading, useColorMode, FormControl, FormLabel, Input, useToast } from \"@chakra-ui/core\"\nimport firebase from \"../Firebase\"\n\nexport default function Register() {\n    const { colorMode } = useColorMode()\n    const [username, setUsername] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    const toast = useToast()\n\n    function handleChange(event: any) {\n        if (event.target.name === \"username\") {\n            setUsername(event.target.value)\n        } else if (event.target.name === \"email\") {\n            setEmail(event.target.value)\n        } else if (event.target.name === \"password\") {\n          setPassword(event.target.value)\n        }\n    }\n\n    function handleSubmit() {\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {\n        toast({\n          title: \"Register completed\",\n          description: \"Thank you for being a part of Find My Mines!\",\n          status: \"success\",\n          position: \"top\",\n          duration: 5000,\n          isClosable: true,\n        })\n      }).catch((error) => {\n        console.log(\"Register error.\", error.code, error.message)\n        toast({\n          title: \"Register unsuccessful\",\n          description: \"Please try again later.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 5000,\n          isClosable: true,\n        })\n      });\n    }\n\n    return (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Register</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <FormControl>\n                <FormLabel mb=\"2\">Username:</FormLabel>\n                <Input\n                  type=\"text\"\n                  name=\"username\"\n                  variant=\"outline\"\n                  value={username}\n                  onChange={handleChange}\n                />\n                <FormLabel mb=\"2\">Email:</FormLabel>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  variant=\"outline\"\n                  value={email}\n                  onChange={handleChange}\n                />\n                <FormLabel mb=\"2\">Password:</FormLabel>\n                <Input\n                  type=\"text\"\n                  name=\"password\"\n                  variant=\"outline\"\n                  value={password}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <Button\n                width=\"full\"\n                mt={4}\n                variantColor=\"teal\"\n                variant=\"solid\"\n                onClick={handleSubmit}\n                fontSize=\"sm\"\n              >\n                Register\n              </Button>\n              <Link to=\"/\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\">\n                    Back\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n    )\n}","import React, { useContext, useState, useEffect } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { \n  Box, \n  Button, \n  Flex, \n  Heading, \n  Text, \n  useColorMode, \n  useToast,\n  NumberInput, \n  NumberInputField, \n  NumberInputStepper, \n  NumberIncrementStepper, \n  NumberDecrementStepper \n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\nimport { IPayload } from \"../types/interface\"\n\nexport default function CreateGame() {\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false)\n  const { colorMode } = useColorMode();\n  const [boardSize, setBoardSize] = useState(6)\n  const [numberOfBombs, setNumberOfBombs] = useState(3)\n  const [maxPlayers, setMaxPlayers] = useState(2)\n  const { socket } = useContext(SocketContext);\n\n  const toast = useToast()\n\n  useEffect(() => {\n    socket.on(SocketEvent.SET_BOARD_SIZE_FEEDBACK, (payload: IPayload) => {\n      console.log(\"SELECT_BOARD_SIZE_FEEDBACK\", payload);\n      if (!payload.isOK) {\n        toast({\n          title: \"Unable to set board size\",\n          description: \"This board size is not available.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 2000,\n          isClosable: true,\n        })\n      }\n    })\n  \n    socket.on(SocketEvent.SET_NUMBER_OF_BOMB_FEEDBACK, (payload: IPayload) => {\n      console.log(\"SELECT_NUMBER_OF_BOMB_FEEDBACK\", payload);\n      if (!payload.isOK) {\n        toast({\n          title: \"Unable to set bomb number\",\n          description: \"This bomb number is not available.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 2000,\n          isClosable: true,\n        })\n      }\n    })\n\n    socket.on(SocketEvent.SET_MAX_PLAYER_FEEDBACK, (payload: IPayload) => {\n      console.log(\"SELECT_MAX_PLAYER_FEEDBACK\", payload);\n      if (!payload.isOK) {\n        toast({\n          title: \"Unable to set max players\",\n          description: \"This number of maximum players is not available.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 2000,\n          isClosable: true,\n        })\n      }\n    })\n  }, [socket, toast])\n\n  const createGame = () => {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  }\n\n  const startGame = () => {\n    setStarted(true)\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleBoardSizeChange(value: React.ReactText) {\n    setBoardSize(+value)\n  } \n\n  function handleBombChange(value: React.ReactText) {\n    setNumberOfBombs(+value)\n  }\n\n  function handleMaxPlayerChange(value: React.ReactText) {\n    setMaxPlayers(+value)\n  }\n\n  function submitGameParameters() {\n    emitEvent('SET_MAX_PLAYER', maxPlayers)\n    emitEvent('SET_NUMBER_OF_BOMB', numberOfBombs)\n    emitEvent('SET_BOARD_SIZE', boardSize, boardSize)\n  }\n\n  const gameParameters = gameState.id !== \"\" ? (\n    <Box\n      p={5}\n      m={5}\n      bg={colorMode === \"light\" ? \"gray.100\" : \"gray.500\"}\n      borderRadius={10}\n    >\n      <Text fontSize=\"xs\" fontWeight=\"medium\">\n        Game ID:\n      </Text>\n        <Text py=\"1\" rounded=\"md\" fontWeight=\"bold\"\n>\n        <span style={{ color: \"orange\" }}>{gameState.id}</span>\n        </Text>\n\n      <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n        Board size:\n      </Text>\n\n      <NumberInput \n        step={1} \n        min={2} \n        max={10} \n        value={boardSize} \n        onChange={handleBoardSizeChange}\n        rounded=\"md\"\n        bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n\n      <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n        Bombs:\n      </Text>\n\n      <NumberInput \n        step={1} \n        defaultValue={3} \n        min={1} \n        max={Math.ceil(1/4 * boardSize * boardSize)}\n        bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n        rounded=\"md\"\n        value={numberOfBombs} \n        onChange={handleBombChange}\n        \n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n\n      <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n        Max players:\n      </Text>\n\n      <NumberInput \n        step={1} \n        min={2} \n        max={10} \n        value={maxPlayers} \n        onChange={handleMaxPlayerChange}\n        rounded=\"md\"\n        bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n\n      <Button\n        mt=\"2\"\n        color={colorMode === \"light\" ? \"black.200\" : \"black.400\"}\n        width=\"full\"\n        bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n        onClick={submitGameParameters}\n      >\n        Apply\n      </Button>\n    </Box>\n  ) : <></>\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Create Game</Heading>\n            </Box>\n\n            {gameParameters}\n\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={gameState.id === \"\" ? \"teal\" : \"orange\"}\n                variant=\"solid\"\n                onClick={gameState.id === \"\" ? createGame : startGame}\n                fontSize=\"sm\"\n                isDisabled={\n                  gameState.id === \"\"\n                    ? false\n                    : gameState.players.length > 1\n                    ? false\n                    : true\n                }\n              >\n                {gameState.id === \"\" ? \"Generate Game ID\" : \"Start Game\"}\n              </Button>\n\n              <Link to=\"/join\">\n                <Button isLoading={started} width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\n                  Join Game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  useColorMode,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function JoinGame() {\n  const [textfield, setTextField] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false);\n  const { colorMode } = useColorMode();\n\n\n  function joinGame() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n  function startGame() {\n    setStarted(true)\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Join Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <FormControl>\n                <FormLabel mb=\"2\">Enter Game ID:</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Ex: XRTMK35\"\n                  variant=\"outline\"\n                  value={textfield}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={\n                  gameState.playerJoined === true ? \"orange\" : \"teal\"\n                }\n                variant=\"solid\"\n                onClick={gameState.playerJoined === true ? startGame : joinGame}\n                fontSize=\"sm\"\n              >\n                {gameState.playerJoined === true ? \"Start Game\" : \"Join Game\"}\n              </Button>\n              <Link to=\"/create\">\n                <Button isLoading={started} width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\n                  Create game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport axios from \"axios\"\nimport { Link } from \"react-router-dom\"\nimport { Flex, Box, Text, Heading, Divider, Spinner, Button, useColorMode } from \"@chakra-ui/core\"\nimport { ILeaderboard } from \"../types/interface\"\n\nexport default function Leaderboard() {\n    const dummyPlayer = {\n        \"email\": \"-\",\n        \"gamesWonWeek\": 0, \n        \"firstname\": \"-\",\n        \"lastname\": \"-\",\n        \"username\": \"-\",\n        \"createdAt\": {\n            \"_seconds\": 0,\n            \"_nanoseconds\": 0\n        },\n        \"gamesWonDay\": 0,\n        \"totalGamesWon\": 0\n    }\n    const { colorMode } = useColorMode();\n    const [loading, setLoading] = useState(true)\n    const leaderboard = useRef({\n        allTime: [dummyPlayer],\n        week: [dummyPlayer],\n        day: [dummyPlayer],\n    } as ILeaderboard)\n\n    async function requestLeaderboard(timeRange: string) {\n        if (timeRange !== \"allTime\" && timeRange !== \"week\" && timeRange !== \"day\") {\n            return\n        }\n        await axios.get(\"https://asia-southeast2-findmymines.cloudfunctions.net/getTopScorers\", {\n            params: {\n                numOfPlayers: 1,\n                timeRange,\n            }\n        }).then((response) => {\n            console.log(response)\n            const {data} = response\n            if (data.isOk) {\n                leaderboard.current[timeRange] = data.topPlayers\n            }\n        })\n    }\n\n    const requestLeaderboards = useCallback(async () => {\n        await requestLeaderboard(\"allTime\")\n        await requestLeaderboard(\"week\")\n        await requestLeaderboard(\"day\")\n        setLoading(false)\n    }, [])\n\n    useEffect(() => {\n        requestLeaderboards()\n    }, [requestLeaderboards])\n\n    const leaderboardView = (\n        <Flex direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Heading as=\"h4\">\n                All Time\n            </Heading>\n            <Text>\n                {leaderboard.current.allTime[0].username} : {leaderboard.current.allTime[0].totalGamesWon} Wins \n            </Text>\n            <Text>\n                {leaderboard.current.allTime[0].email}\n            </Text>\n            <Divider />\n            <Heading as=\"h4\">\n                Week\n            </Heading>\n            <Text>\n                {leaderboard.current.week[0].username} : {leaderboard.current.week[0].gamesWonWeek} Wins \n            </Text>\n            <Text>\n                {leaderboard.current.week[0].email}\n            </Text>\n            <Divider />\n            <Heading as=\"h4\">\n                Day\n            </Heading>\n            <Text>\n                {leaderboard.current.day[0].username} : {leaderboard.current.day[0].gamesWonDay} Wins \n            </Text>\n            <Text>\n                {leaderboard.current.day[0].email}\n            </Text>\n            <Divider />\n            <Link to=\"/\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\">\n                    Back\n                </Button>\n            </Link>\n        </Flex>\n    )\n\n    return (\n        <Flex\n            width=\"full\"\n            height=\"100%\"\n            align=\"center\"\n            position=\"absolute\"\n            justifyContent=\"center\"\n            bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}        >\n            <Box\n                p={10}\n                px={20}\n                bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n                borderRadius={10}\n                boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n                \n            >\n                { loading ? <Spinner /> : leaderboardView }\n            </Box>\n        </Flex>\n    )\n}","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      accentColor: \"#1a365d\"\n    },\n    borders: {\n      ...theme.borders,\n      \"8px\": 8,\n    }\n  };\n\nexport default customTheme;","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Play from \"./pages/Play\";\nimport Register from \"./pages/Register\";\n\nimport { GameContext } from \"./contexts/useGame\";\nimport { SocketContext } from \"./contexts/useSocket\";\nimport { onSocketEvent } from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { CSSReset, ThemeProvider, ColorModeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./pages/CreateGame\";\nimport JoinGame from \"./pages/JoinGame\";\nimport Leaderboard from \"./pages/Leaderboard\";\nimport customTheme from \"./styling\";\n\nfunction App() {\n  const { gameDispatch } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider theme={customTheme}>\n          <ColorModeProvider>\n          <CSSReset />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/play\">\n              <Play />\n            </Route>\n            <Switch>\n              <Route path=\"/create\">\n                <CreateGame />\n              </Route>\n              <Route path=\"/join\">\n                <JoinGame />\n              </Route>\n              <Route path=\"/quick-game\">Quick Game</Route>\n              <Route path=\"/register\">\n                <Register />\n              </Route>\n              <Route path=\"/leaderboard\">\n                <Leaderboard />\n              </Route>\n            </Switch>\n          </Switch>\n          </ColorModeProvider>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import SocketEvent from \"../socket-event\"\r\nimport { Dispatch, ReducerAction, Reducer } from 'react'\r\nimport { IGame, IAction, IPayload, IPlayer } from \"../types/interface\"\r\n\r\nexport function onSocketEvent(socket: SocketIOClient.Socket, gameDispatch: Dispatch<ReducerAction<Reducer<IGame, IAction>>>) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: payload.data.gameID });\r\n    gameDispatch({ type: \"SET_PLAYERS\", payload: payload.data === null ? [] : payload.data.players });\r\n  });\r\n\r\n  socket.on(SocketEvent.SET_PLAYER_NAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SET_PLAYER_NAME_FEEDBACK\", payload);\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"PLAYER_JOINED\", payload: payload.isOK });\r\n    gameDispatch({ type: \"SET_PLAYERS\", payload: payload.data === null ? [] : payload.data.players });\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"START_GAME_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: payload.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (player: IPlayer) => {\r\n    console.log(\"NEXT_PLAYER\", player);\r\n    gameDispatch({ type: \"SET_CURRENT_PLAYER\", payload: player.id})\r\n  });\r\n  socket.on(SocketEvent.RESET_BOARD_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"RESET_BOARD\", payload);\r\n    gameDispatch({ type: \"RESET_BOARD\", payload: null})\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: payload.data.selectedCoordinates,\r\n      });\r\n      gameDispatch({\r\n        type: \"UPDATE_PLAYERS_SCORE\",\r\n        payload: payload.data.players\r\n      })\r\n    }\r\n  });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\nimport { SocketProvider } from \"./contexts/useSocket\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <SocketProvider>\n        <App />\n      </SocketProvider>\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}