{"version":3,"sources":["socket-event.ts","pages/Home.tsx","contexts/useGame.tsx","pages/Play.tsx","pages/CreateGame.tsx","pages/JoinGame.tsx","styling.tsx","App.tsx","hooks/useSocket.ts","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","Home","Flex","width","height","align","position","justifyContent","bg","Box","p","borderRadius","boxShadow","textAlign","Heading","my","justifyItems","FormControl","FormLabel","mb","Input","type","placeholder","variant","to","style","textDecoration","Button","mt","variantColor","GameContext","createContext","initialState","id","started","noBombs","noBombsFound","players","coordinates","tick","playerJoined","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","payload","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","Play","props","useContext","handleSelectCoordinate","event","console","log","target","dataset","emitEvent","SELECT_COORDINATE","grid","cellId","cellBody","cellState","data-x","data-y","Math","floor","onClick","Grid","templateColumns","templateRows","gap","CreateGame","Text","fontSize","color","fontWeight","CREATE_GAME","START_GAME","isDisabled","JoinGame","useState","textfield","setTextField","onChange","JOIN_GAME","customTheme","theme","colors","accentColor","App","socketURL","socket","setSocket","useEffect","s","io","e","data","emit","useSocket","process","on","CREATE_GAME_FEEDBACK","d","gameID","TICK","JOIN_GAME_FEEDBACK","isOK","GAME_STATE_CHANGED","START_GAME_FEEDBACK","NEXT_PLAYER","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","onSocketEvent","basename","ThemeProvider","CSSReset","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bef51122.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = \"connection\",\n  DISCONNECT = \"disconnect\",\n\n  // Server events: [Server] -> [Client]\n  TICK = \"TICK\",\n  NEXT_PLAYER = \"NEXT_PLAYER\",\n  COORDINATED_SELECTED = \"COORDINATED_SELECTED\",\n  WINNER = \"WINNER\",\n  GAME_STATE_CHANGED = \"GAME_STATE_CHANGED\",\n  CURRENT_PLAYER = \"CURRENT_PLAYER\",\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = \"SELECT_COORDINATE_FEEDBACK\",\n  CREATE_GAME_FEEDBACK = \"CREATE_GAME_FEEDBACK\",\n  JOIN_GAME_FEEDBACK = \"JOIN_GAME_FEEDBACK\",\n  QUICK_MATCH_FEEDBACK = \"QUICK_MATCH_FEEDBACK\",\n  START_GAME_FEEDBACK = \"START_GAME_FEEDBACK\",\n  SET_BOARD_SIZE_FEEDBACK = \"SET_BOARD_SIZE_FEEDBACK\",\n  PAUSE_FEEDBACK = \"PAUSE_FEEDBACK\",\n  SET_NUMBER_OF_BOMB_FEEDBACK = \"SET_NUMBER_OF_BOMB_FEEDBACK\",\n  SET_MAX_PLAYER_FEEDBACK = \"SET_MAX_PLAYER_FEEDBACK\",\n  GET_CURRENT_PLAYER_FEEDBACK = \"GET_CURRENT_PLAYER_FEEDBACK\",\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = \"SELECT_COORDINATE\",\n  CREATE_GAME = \"CREATE_GAME\",\n  JOIN_GAME = \"JOIN_GAME\",\n  QUICK_MATCH = \"QUICK_MATCH\",\n  START_GAME = \"START_GAME\",\n  SET_BOARD_SIZE = \"SET_BOARD_SIZE\",\n  PAUSE = \"PAUSE\",\n  SET_NUMBER_OF_BOMB = \"SET_NUMBER_OF_BOMB\",\n  SET_MAX_PLAYER = \"SET_MAX_PLAYER\",\n  GET_CURRENT_PLAYER = \"GET_CURRENT_PLAYER\",\n}\n\nexport default SocketEvent;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n} from \"@chakra-ui/core\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg=\"gray.50\"\r\n    >\r\n      <Box\r\n        p={10}\r\n        bg=\"white\"\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n          <FormControl>\r\n            <FormLabel mb=\"2\">Enter your name:</FormLabel>\r\n            <Input type=\"text\" placeholder=\"Ex: John\" variant=\"outline\" />\r\n          </FormControl>\r\n          <Link to=\"create\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt={4} variantColor=\"teal\" variant=\"solid\">\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport IContext from \"../types/context.interface\";\r\nimport ICoordinate from \"../types/coordinate.interface\";\r\n\r\nexport const GameContext = createContext({} as IContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  players: [],\r\n  coordinates: [],\r\n  tick: -1,\r\n  playerJoined: false,\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: any, action: any) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    case \"PLAYER_JOINED\":\r\n      return {\r\n        ...state,\r\n        playerJoined: payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport SocketEvent from \"../socket-event\";\r\nimport { Grid, Button } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Play(props: any) {\r\n  const { gameState } = useContext(GameContext);\r\n\r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n        <Link to=\"/create\">\r\n          <Button>Click me to go back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleSelectCoordinate = (event: any) => {\r\n    console.log(\r\n      \"SELECT_COORDINATE\",\r\n      event.target.dataset.x,\r\n      event.target.dataset.y\r\n    );\r\n    props.emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n      x: +event.target.dataset.x,\r\n      y: +event.target.dataset.y,\r\n    });\r\n  };\r\n\r\n  let grid = [];\r\n  for (let cellId: number = 0; cellId < 36; cellId++) {\r\n    let cellBody;\r\n    const cellState = gameState.coordinates[cellId];\r\n\r\n    if (!cellState.isSelected) {\r\n      cellBody = \"🎯\";\r\n    } else if (!cellState.isBomb) {\r\n      cellBody = \"❌\";\r\n    } else {\r\n      cellBody = \"💣\";\r\n    }\r\n\r\n    grid.push(\r\n      <Button\r\n        data-x={cellId % gameState.width}\r\n        data-y={Math.floor(cellId / gameState.height)}\r\n        variantColor=\"green\"\r\n        onClick={handleSelectCoordinate}\r\n      >\r\n        {cellBody}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n      templateRows={`repeat(${gameState.height}, 1fr)`}\r\n      gap={1}\r\n    >\r\n      {grid}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { Box, Button, Flex, Heading, Text } from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\n\nexport default function CreateGame(props: any) {\n  const { gameState } = useContext(GameContext);\n  const emitEvent = props.emitEvent;\n  function createGame() {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  }\n\n  function startGame() {\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg=\"gray.50\"\n        >\n          <Box\n            p={10}\n            bg=\"white\"\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Create Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <Text\n                width=\"full\"\n                mt=\"2\"\n                fontSize=\"md\"\n                color=\"gray.600\"\n                fontWeight=\"\"\n              >\n                {gameState.id === \"\" ? \"\" : \"ID: \"}\n                <span style={{ color: \"red\" }}>{gameState.id}</span>\n              </Text>\n\n              <Button\n                width=\"full\"\n                mt={4}\n                variantColor={gameState.id === \"\" ? \"teal\" : \"orange\"}\n                variant=\"solid\"\n                onClick={gameState.id === \"\" ? createGame : startGame}\n                fontSize=\"sm\"\n                isDisabled={\n                  gameState.id === \"\"\n                    ? false\n                    : gameState.playerJoined === true\n                    ? false\n                    : true\n                }\n              >\n                {gameState.id === \"\" ? \"Generate\" : \"Start Game\"}\n              </Button>\n              <Link to=\"/join\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color=\"gray.600\">\n                  Join Game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\n\nexport default function JoinGame(props: any) {\n  let [textfield, setTextField] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const emitEvent = props.emitEvent;\n\n  function joinGame() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n  function startGame() {\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg=\"gray.50\"\n        >\n          <Box\n            p={10}\n            bg=\"white\"\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Join Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <FormControl>\n                <FormLabel mb=\"2\">Enter Game ID:</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Ex: XRTMK35\"\n                  variant=\"outline\"\n                  value={textfield}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <Button\n                width=\"full\"\n                mt={4}\n                variantColor={\n                  gameState.playerJoined === true ? \"orange\" : \"teal\"\n                }\n                variant=\"solid\"\n                onClick={gameState.playerJoined === true ? startGame : joinGame}\n                fontSize=\"sm\"\n              >\n                {gameState.playerJoined === true ? \"Start Game\" : \"Join Game\"}\n              </Button>\n              <Link to=\"/create\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color=\"gray.600\">\n                  Create game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      accentColor: \"#1a365d\"\n    },\n  };\n\n  export default customTheme;","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Play from \"./pages/Play\";\n\nimport { useSocket } from \"./hooks/useSocket\";\nimport { GameContext } from \"./contexts/useGame\";\nimport onSocketEvent from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./pages/CreateGame\";\nimport JoinGame from \"./pages/JoinGame\";\nimport customTheme from \"./styling\";\n\nfunction App() {\n  const { gameDispatch } = useContext(GameContext);\n\n  // Initialize Socket.IO\n  const { socket, emitEvent } = useSocket(\n    process.env.REACT_APP_SOCKET_URL ??\n      \"https://netcentric-architecture.herokuapp.com/\"\n  );\n\n  console.log(socket);\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider theme={customTheme}>\n          <CSSReset />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/play\">\n              <Play emitEvent={emitEvent} />\n            </Route>\n            <Switch>\n              <Route path=\"/create\">\n                <CreateGame emitEvent={emitEvent} />\n              </Route>\n              <Route path=\"/join\">\n                <JoinGame emitEvent={emitEvent} />\n              </Route>\n              <Route path=\"/quick-game\">Quick Game</Route>\n            </Switch>\n          </Switch>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport SocketEvent from \"../socket-event\";\n\nexport function useSocket(socketURL: string) {\n  let [socket, setSocket] = useState<null | SocketIOClient.Socket>();\n\n  // Connect to Socket.IO\n  useEffect(() => {\n    console.log(\"Connecting to WS...\");\n    let s = io(socketURL);\n    setSocket(s);\n  }, [socketURL]);\n\n  function emitEvent(e: SocketEvent, data: any) {\n    if (socket) {\n      socket.emit(e, data);\n    }\n  }\n\n  return { socket, emitEvent };\n}\n","import SocketEvent from \"../socket-event\";\r\n\r\nexport default function onSocketEvent(socket: any, gameDispatch: any) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", d);\r\n    console.log(\"Game ID: \", d.data.gameID);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: d.data.gameID });\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", d);\r\n    gameDispatch({ type: \"PLAYER_JOINED\", payload: d.isOK });\r\n  });\r\n\r\n  socket.on(SocketEvent.GAME_STATE_CHANGED, (d: any) => {\r\n    console.log(d);\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"START_GAME_FEEDBACK\", d);\r\n    if (d.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: d.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (d: any) => {\r\n    console.log(\"NEXT_PLAYER\", d);\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (d: any) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", d);\r\n    if (d.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: d.data.selectedCoordinates,\r\n      });\r\n    }\r\n  });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <App />\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}