{"version":3,"sources":["socket-event.ts","contexts/useGame.tsx","contexts/useSocket.tsx","pages/Home.tsx","pages/components/Board.tsx","pages/components/Info.tsx","pages/components/Chat.tsx","pages/Play.tsx","pages/CreateGame.tsx","pages/JoinGame.tsx","pages/Leaderboard.tsx","styling.tsx","App.tsx","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","GameContext","createContext","initialState","width","height","id","started","noBombs","noBombsFound","currentPlayer","thisPlayer","thisPlayerName","players","coordinates","tick","playerJoined","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","type","payload","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","SocketContext","SocketProvider","useState","io","process","socket","emitEvent","event","data","emit","Home","name","setName","useContext","colorMode","useColorMode","Flex","align","position","justifyContent","bg","Box","p","borderRadius","boxShadow","textAlign","Heading","my","justifyItems","FormControl","onSubmit","FormLabel","mb","Input","placeholder","variant","onChange","target","to","style","textDecoration","Button","mt","variantColor","onClick","console","log","SET_PLAYER_NAME","fontSize","color","Board","handleSelectCoordinate","dataset","SELECT_COORDINATE","Number","grid","cellId","cellBody","cellState","cellColor","Math","floor","as","border","borderColor","key","data-x","data-y","Grid","templateColumns","templateRows","w","h","gap","Info","alignItems","flexDirection","Text","Chat","chat","setChat","axios","post","params","gameId","body","message","uid","username","Play","direction","Divider","orientation","CreateGame","setStarted","fontWeight","isLoading","loadingText","CREATE_GAME","START_GAME","isDisabled","JoinGame","textfield","setTextField","JOIN_GAME","Leaderboard","dummyPlayer","loading","setLoading","allTime","week","day","leaderboard","setLeaderboard","requestLeaderboard","timeRange","a","get","numOfPlayers","then","response","isOk","topPlayers","useEffect","leaderboardView","justify","totalGamesWon","email","gamesWonWeek","gamesWonDay","Spinner","customTheme","theme","colors","accentColor","borders","App","on","CREATE_GAME_FEEDBACK","gameID","TICK","JOIN_GAME_FEEDBACK","isOK","START_GAME_FEEDBACK","NEXT_PLAYER","player","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","onSocketEvent","basename","ThemeProvider","ColorModeProvider","CSSReset","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.913831e5.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = 'connection',\n  DISCONNECT = 'disconnect',\n\n  // Server events: [Server] -> [Client]\n  TICK = 'TICK',\n  NEXT_PLAYER = 'NEXT_PLAYER',\n  COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n  WINNER = 'WINNER',\n  GAME_STATE_CHANGED = 'GAME_STATE_CHANGED',\n  CURRENT_PLAYER = 'CURRENT_PLAYER',\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n  CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n  JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n  QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n  START_GAME_FEEDBACK = 'START_GAME_FEEDBACK',\n  PLAY_AGAIN_FEEDBACK = 'PLAY_AGAIN_FEEDBACK',\n  RESET_BOARD_FEEDBACK = 'RESET_BOARD_FEEDBACK',\n  SET_BOARD_SIZE_FEEDBACK = 'SET_BOARD_SIZE_FEEDBACK',\n  PAUSE_FEEDBACK = 'PAUSE_FEEDBACK',\n  SET_NUMBER_OF_BOMB_FEEDBACK = 'SET_NUMBER_OF_BOMB_FEEDBACK',\n  SET_MAX_PLAYER_FEEDBACK = 'SET_MAX_PLAYER_FEEDBACK',\n  GET_CURRENT_PLAYER_FEEDBACK = 'GET_CURRENT_PLAYER_FEEDBACK',\n  SET_PLAYER_NAME_FEEDBACK = 'SET_PLAYER_NAME_FEEDBACK',\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = 'SELECT_COORDINATE',\n  CREATE_GAME = 'CREATE_GAME',\n  JOIN_GAME = 'JOIN_GAME',\n  QUICK_MATCH = 'QUICK_MATCH',\n  START_GAME = 'START_GAME',\n  PLAY_AGAIN = 'PLAY_AGAIN',\n  RESET_BOARD = 'RESET_BOARD',\n  SET_BOARD_SIZE = 'SET_BOARD_SIZE',\n  PAUSE = 'PAUSE',\n  SET_NUMBER_OF_BOMB = 'SET_NUMBER_OF_BOMB',\n  SET_MAX_PLAYER = 'SET_MAX_PLAYER',\n  GET_CURRENT_PLAYER = 'GET_CURRENT_PLAYER',\n  SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n}\n\nexport default SocketEvent","import React, { createContext, useReducer } from \"react\";\r\nimport { IGameContext, ICoordinate, IGame, IAction } from \"../types/interface\";\r\n\r\nexport const GameContext = createContext({} as IGameContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  currentPlayer: \"\",\r\n  thisPlayer: \"\",\r\n  thisPlayerName: \"\",\r\n  players: [],\r\n  coordinates: [],\r\n  tick: 10,\r\n  playerJoined: false,\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: IGame, action: IAction) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    case \"PLAYER_JOINED\":\r\n      return {\r\n        ...state,\r\n        playerJoined: payload,\r\n      };\r\n    case \"SET_CURRENT_PLAYER\":\r\n      return {\r\n        ...state,\r\n        currentPlayer: (payload === null || payload === \"\") ? \"Anonymous\" : payload,\r\n      };\r\n    case \"SET_PLAYER_NAME\":\r\n      return {\r\n        ...state,\r\n        thisPlayerName: payload,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useState } from \"react\"\nimport io from \"socket.io-client\"\nimport { ISocketContext } from \"../types/interface\"\nimport SocketEvent from \"../socket-event\"\n\nexport const SocketContext = createContext({} as ISocketContext)\n\nexport const SocketProvider = ({ children }: any) => {\n\n  const [ socket ] = useState(io(process.env.REACT_APP_SOCKET_URL ??\n    \"https://netcentric-architecture.herokuapp.com/\"))\n\n  const emitEvent = (event: SocketEvent, data: any) => {\n    socket.emit(event, data)\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket, emitEvent }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import React, { useContext, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  useColorMode,\r\n} from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\"\r\nimport { SocketContext } from \"../contexts/useSocket\"\r\nimport SocketEvent from \"../socket-event\";\r\n\r\nexport default function Home() {\r\n\r\n  const [ name, setName ] = useState(\"\")\r\n  const { gameDispatch } = useContext(GameContext)\r\n  const { emitEvent } = useContext(SocketContext)\r\n  const { colorMode } = useColorMode();\r\n\r\n  function handleNameChange(event: any) {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  function emitName() {\r\n    console.log(\"SET_PLAYER_NAME\", name)\r\n    gameDispatch({ type: \"SET_PLAYER_NAME\", payload: name })\r\n    emitEvent(SocketEvent.SET_PLAYER_NAME, name)\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    >\r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n\r\n          <FormControl onSubmit={() => {}}>\r\n            <FormLabel mb=\"2\">Enter your name:</FormLabel>\r\n            <Input type=\"text\" placeholder=\"Ex: John\" variant=\"outline\" value={name} onChange={handleNameChange}/>\r\n          </FormControl>\r\n\r\n          <Link to=\"create\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt={4} variantColor=\"teal\" variant=\"solid\" onClick={emitName}>\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"/leaderboard\">\r\n            <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color=\"gray.600\">\r\n              Leaderboard\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport SocketEvent from \"../../socket-event\";\r\nimport { Grid, Box, Flex, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../../contexts/useGame\";\r\nimport { SocketContext } from \"../../contexts/useSocket\";\r\n\r\nexport default function Board() {\r\n    const { gameState } = useContext(GameContext);\r\n    const { emitEvent } = useContext(SocketContext);\r\n    const { colorMode } = useColorMode();\r\n\r\n\r\n    const handleSelectCoordinate = (event: any) => {\r\n\r\n        console.log(\r\n            \"SELECT_COORDINATE\",\r\n            event.target.dataset.x,\r\n            event.target.dataset.y,\r\n        );\r\n\r\n        emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n            x: Number(event.target.dataset.x),\r\n            y: Number(event.target.dataset.y),\r\n        });\r\n    };\r\n\r\n    let grid = [];\r\n    for (let cellId = 0; cellId < gameState.width * gameState.height; cellId++) {\r\n        let cellBody;\r\n        const cellState = gameState.coordinates[cellId];\r\n\r\n        if (!cellState.isSelected) {\r\n            cellBody = \"🎯\";\r\n        } else if (!cellState.isBomb) {\r\n            cellBody = \"❌\";\r\n        } else {\r\n            cellBody = \"💣\";\r\n        }\r\n\r\n        //magic chessboard formula \r\n        const cellColor = ((cellId % gameState.width) % 2 === (Math.floor(cellId / gameState.width)) % 2) ? \"orange.200\" : \"green.200\" \r\n\r\n        grid.push(\r\n            <Box\r\n                as=\"button\"\r\n                border=\"4px\"\r\n                borderColor={cellColor}\r\n                key={cellId}\r\n                data-x={cellId % gameState.width}\r\n                data-y={Math.floor(cellId / gameState.width)}\r\n                width=\"50px\"\r\n                height=\"50px\"\r\n                bg={cellColor}\r\n                onClick={handleSelectCoordinate}\r\n            >  \r\n                {cellBody}\r\n            </Box>\r\n        ); \r\n    }\r\n\r\n    return (\r\n        <Flex \r\n            width=\"full\"\r\n            height=\"100%\"\r\n            align=\"center\"\r\n            justifyContent=\"center\"\r\n        >\r\n            <Grid\r\n                templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n                templateRows={`repeat(${gameState.height}, 1fr)`}\r\n                border=\"4px\"\r\n                borderColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}\r\n                w={gameState.width * 50 + 8}\r\n                h={gameState.width * 50 + 8}\r\n                gap={0}\r\n            >\r\n                {grid}\r\n            </Grid>\r\n        </Flex>\r\n    );\r\n}","import React, { useContext } from 'react'\nimport { GameContext } from '../../contexts/useGame'\nimport { SocketContext } from '../../contexts/useSocket'\nimport { Text, Flex, Heading } from '@chakra-ui/core'\n\nexport default function Info() {\n    const { gameState } = useContext(GameContext)\n    const { socket } = useContext(SocketContext)\n\n    return (\n        <Flex alignItems=\"center\" flexDirection=\"column\">\n            <Heading mb={4}>\n                Find My Mines\n            </Heading>\n            <Text>\n                It is {gameState.currentPlayer === socket.id ? \"your\" : \"other player's\"} turn.\n            </Text>\n            <Text>\n                {gameState.currentPlayer === socket.id ? `${gameState.tick} seconds left!` : \"Please wait...\"}\n            </Text>\n            <Text mb={4}>\n                Player: {gameState.thisPlayerName}\n            </Text>\n        </Flex>\n    )\n}\n","import React, { useState, useContext } from \"react\"\nimport axios from \"axios\"\nimport { Input } from \"@chakra-ui/core\"\nimport { GameContext } from \"../../contexts/useGame\";\n\nexport default function Chat() {\n    const [chat, setChat] = useState(\"\")\n    const { gameState } = useContext(GameContext)\n\n    const handleChange = (event: any) => {\n        setChat(event.target.value)\n    }\n\n    const handleSubmit = () => {\n        axios.post(\"https://asia-southeast2-findmymines.cloudfunctions.net/getTopScorers\", {\n            params: {\n                gameId: gameState.id\n            },\n            body: {\n                message: chat,\n                uid: gameState.thisPlayer,\n                username: gameState.thisPlayerName,\n            }\n        })\n        setChat(\"\")\n    }\n\n    return (\n        <Input placeholder=\"Chat...\" value={chat} onSubmit={handleSubmit} onChange={handleChange}/>\n    );\n}","import React, { useContext } from \"react\";\r\nimport { Button, Flex, Box, Divider, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Board from \"./components/Board\";\r\nimport Info from \"./components/Info\";\r\nimport Chat from \"./components/Chat\";\r\n\r\nexport default function Play() {\r\n  const { gameState } = useContext(GameContext);\r\n  const { colorMode } = useColorMode();\r\n\r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n        <Link to=\"/\">\r\n          <Button>Click me to go back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    > \r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Flex>\r\n          <Flex direction=\"column\">\r\n            <Info />\r\n            <Board />\r\n          </Flex>\r\n          <Divider orientation=\"vertical\" />\r\n          <Chat />\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { Box, Button, Flex, Heading, Text, useColorMode } from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function CreateGame() {\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false)\n  const { colorMode } = useColorMode();\n\n  const createGame = () => {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  }\n\n  const startGame = () => {\n    setStarted(true)\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Create Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <Text\n                width=\"full\"\n                mt=\"2\"\n                fontSize=\"md\"\n                color={colorMode === \"light\" ? \"gray.600\" : \"gray.100\"}\n                fontWeight=\"\"\n              >\n                {gameState.id === \"\" ? \"\" : \"ID: \"}\n                <span style={{ color: \"red\" }}>{gameState.id}</span>\n              </Text>\n\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={gameState.id === \"\" ? \"teal\" : \"orange\"}\n                variant=\"solid\"\n                onClick={gameState.id === \"\" ? createGame : startGame}\n                fontSize=\"sm\"\n                isDisabled={\n                  gameState.id === \"\"\n                    ? false\n                    : gameState.playerJoined === true\n                    ? false\n                    : true\n                }\n              >\n                {gameState.id === \"\" ? \"Generate Game ID\" : \"Start Game\"}\n              </Button>\n\n              <Link to=\"/join\">\n                <Button isLoading={started} width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\n                  Join Game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  useColorMode,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function JoinGame() {\n  const [textfield, setTextField] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false);\n  const { colorMode } = useColorMode();\n\n\n  function joinGame() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n  function startGame() {\n    setStarted(true)\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Join Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <FormControl>\n                <FormLabel mb=\"2\">Enter Game ID:</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Ex: XRTMK35\"\n                  variant=\"outline\"\n                  value={textfield}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={\n                  gameState.playerJoined === true ? \"orange\" : \"teal\"\n                }\n                variant=\"solid\"\n                onClick={gameState.playerJoined === true ? startGame : joinGame}\n                fontSize=\"sm\"\n              >\n                {gameState.playerJoined === true ? \"Start Game\" : \"Join Game\"}\n              </Button>\n              <Link to=\"/create\">\n                <Button isLoading={started} width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\n                  Create game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport { Link } from \"react-router-dom\"\nimport { Flex, Box, Text, Heading, Divider, Spinner, Button } from \"@chakra-ui/core\"\nimport { ITopPlayer } from \"../types/interface\"\n\nexport default function Leaderboard() {\n    const dummyPlayer = {\n        \"email\": \"-\",\n        \"gamesWonWeek\": 0, \n        \"firstname\": \"-\",\n        \"lastname\": \"-\",\n        \"username\": \"-\",\n        \"createdAt\": {\n            \"_seconds\": 0,\n            \"_nanoseconds\": 0\n        },\n        \"gamesWonDay\": 0,\n        \"totalGamesWon\": 0\n    }\n\n    const [loading, setLoading] = useState(true)\n    const [leaderboard, setLeaderboard] = useState({\n        allTime: [dummyPlayer] as ITopPlayer[],\n        week: [dummyPlayer] as ITopPlayer[],\n        day: [dummyPlayer] as ITopPlayer[],\n    })\n\n    useEffect(() => {\n        requestLeaderboard(\"allTime\").then(\n            () => requestLeaderboard(\"week\")\n        ).then(\n            () => requestLeaderboard(\"day\")\n        ).then(\n            () => setLoading(false)\n        )\n    //eslint-disable-next-line\n    }, [])\n\n    async function requestLeaderboard(timeRange: string) {\n        if (timeRange !== \"allTime\" && timeRange !== \"week\" && timeRange !== \"day\") {\n            return\n        }\n        axios.get(\"https://asia-southeast2-findmymines.cloudfunctions.net/getTopScorers\", {\n            params: {\n                numOfPlayers: 1,\n                timeRange,\n            }\n        }).then((response) => {\n            console.log(response)\n            const {data} = response\n            if (data.isOk) {\n                setLeaderboard({\n                    ...leaderboard,\n                    [timeRange]: data.topPlayers,\n                })\n            }\n        })\n    }\n\n    const leaderboardView = (\n        <Flex direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Heading as=\"h4\">\n                All Time\n            </Heading>\n            <Text>\n                {leaderboard.allTime[0].username} : {leaderboard.allTime[0].totalGamesWon} Wins \n            </Text>\n            <Text>\n                {leaderboard.allTime[0].email}\n            </Text>\n            <Divider />\n            <Heading as=\"h4\">\n                Week\n            </Heading>\n            <Text>\n                {leaderboard.week[0].username} : {leaderboard.week[0].gamesWonWeek} Wins \n            </Text>\n            <Text>\n                {leaderboard.week[0].email}\n            </Text>\n            <Divider />\n            <Heading as=\"h4\">\n                Day\n            </Heading>\n            <Text>\n                {leaderboard.day[0].username} : {leaderboard.day[0].gamesWonDay} Wins \n            </Text>\n            <Text>\n                {leaderboard.day[0].email}\n            </Text>\n            <Divider />\n            <Link to=\"/\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color=\"gray.600\">\n                    Back\n                </Button>\n            </Link>\n        </Flex>\n    )\n\n    return (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg=\"gray.50\"\n        >\n            <Box\n                p={10}\n                bg=\"white\"\n                borderRadius={10}\n                boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n            >\n                { loading ? <Spinner /> : leaderboardView }\n            </Box>\n        </Flex>\n    )\n}","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      accentColor: \"#1a365d\"\n    },\n    borders: {\n      ...theme.borders,\n      \"8px\": 8,\n    }\n  };\n\nexport default customTheme;","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Play from \"./pages/Play\";\n\nimport { GameContext } from \"./contexts/useGame\";\nimport { SocketContext } from \"./contexts/useSocket\";\nimport { onSocketEvent } from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { CSSReset, ThemeProvider, ColorModeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./pages/CreateGame\";\nimport JoinGame from \"./pages/JoinGame\";\nimport Leaderboard from \"./pages/Leaderboard\";\nimport customTheme from \"./styling\";\n\nfunction App() {\n  const { gameDispatch } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider theme={customTheme}>\n          <ColorModeProvider>\n          <CSSReset />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/play\">\n              <Play />\n            </Route>\n            <Switch>\n              <Route path=\"/create\">\n                <CreateGame />\n              </Route>\n              <Route path=\"/join\">\n                <JoinGame />\n              </Route>\n              <Route path=\"/quick-game\">Quick Game</Route>\n              <Route path=\"/leaderboard\">\n                <Leaderboard />\n              </Route>\n            </Switch>\n          </Switch>\n          </ColorModeProvider>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import SocketEvent from \"../socket-event\"\r\nimport { Dispatch, ReducerAction, Reducer } from 'react'\r\nimport { IGame, IAction, IPayload, IPlayer } from \"../types/interface\"\r\n\r\nexport function onSocketEvent(socket: SocketIOClient.Socket, gameDispatch: Dispatch<ReducerAction<Reducer<IGame, IAction>>>) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: payload.data.gameID });\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"PLAYER_JOINED\", payload: payload.isOK });\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"START_GAME_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: payload.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (player: IPlayer) => {\r\n    console.log(\"NEXT_PLAYER\", player);\r\n    gameDispatch({ type: \"SET_CURRENT_PLAYER\", payload: player.id})\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: payload.data.selectedCoordinates,\r\n      });\r\n    }\r\n  });\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\nimport { SocketProvider } from \"./contexts/useSocket\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <SocketProvider>\n        <App />\n      </SocketProvider>\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}