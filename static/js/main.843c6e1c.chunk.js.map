{"version":3,"sources":["socket-event.ts","contexts/useGame.tsx","contexts/useSocket.tsx","Firebase.tsx","pages/Home.tsx","pages/components/Board.tsx","pages/components/Info.tsx","pages/components/Chat.tsx","pages/components/WinnerModal.tsx","pages/Play.tsx","pages/Register.tsx","pages/CreateGame.tsx","pages/JoinGame.tsx","pages/Leaderboard.tsx","styling.tsx","App.tsx","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","GameContext","createContext","initialState","width","height","id","started","noBombs","noBombsFound","currentPlayer","currentPlayerName","name","players","coordinates","tick","playerJoined","showWinnerModal","winner","firstToast","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","type","payload","map","player","score","gameID","numberOfBombs","numberOfBombsFound","forEach","cell","playersAfterJoined","playersAfterLeft","splice","indexOf","newType","member","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","SocketContext","SocketProvider","useState","io","process","socket","emitEvent","event","data","emit","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","setName","email","setEmail","password","setPassword","useContext","useColorMode","colorMode","toggleColorMode","toast","useToast","handleChange","target","useEffect","title","description","status","position","duration","isClosable","Flex","align","justifyContent","bg","Box","p","borderRadius","boxShadow","textAlign","Heading","my","justifyItems","FormControl","FormLabel","Input","mb","placeholder","variant","onChange","to","style","textDecoration","Button","mt","variantColor","isDisabled","onClick","console","log","auth","signInWithEmailAndPassword","then","catch","error","code","message","SET_PLAYER_NAME","fontSize","color","Board","handleSelectCoordinate","dataset","SELECT_COORDINATE","Number","grid","cellId","cellBody","cellState","cellColor","Math","floor","as","border","borderColor","key","data-x","data-y","Grid","templateColumns","templateRows","w","h","gap","Info","alignItems","flexDirection","Text","Chat","chat","setChat","chatData","setChatData","onChatEvent","useCallback","database","ref","on","retrievedChat","val","cleanedChat","Object","keys","username","chatView","chatKey","chatDatum","truncatedChatView","slice","max","length","scoreView","playerKey","fontWeight","direction","backgroundColor","padding","pb","Divider","orientation","pt","IconButton","px","marginLeft","aria-label","icon","size","axios","post","qs","stringify","uid","params","gameId","headers","WinnerModal","Modal","isOpen","tiePlayers","i","findWinner","mr","Play","alignContent","marginTop","RESET_BOARD","marginRight","LEAVE_GAME","Register","setUsername","createUserWithEmailAndPassword","CreateGame","setStarted","boardSize","setBoardSize","setNumberOfBombs","maxPlayers","setMaxPlayers","SET_BOARD_SIZE_FEEDBACK","isOK","SET_NUMBER_OF_BOMB_FEEDBACK","SET_MAX_PLAYER_FEEDBACK","gameParameters","m","py","rounded","NumberInput","step","min","defaultValue","ceil","playerList","playerListBox","hidden","isLoading","loadingText","CREATE_GAME","START_GAME","JoinGame","textfield","setTextField","JOIN_GAME","Leaderboard","dummyPlayer","gamesWonWeek","firstname","lastname","createdAt","_seconds","_nanoseconds","gamesWonDay","totalGamesWon","loading","setLoading","leaderboard","useRef","allTime","week","day","requestLeaderboard","timeRange","a","get","numOfPlayers","response","isOk","topPlayers","requestLeaderboards","leaderboardView","justify","Spinner","customTheme","theme","colors","accentColor","borders","App","CREATE_GAME_FEEDBACK","SET_PLAYER_NAME_FEEDBACK","WINNER","winners","TICK","JOIN_GAME_FEEDBACK","START_GAME_FEEDBACK","NEXT_PLAYER","RESET_BOARD_FEEDBACK","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","MEMBER_JOINED_GAME","MEMBER_LEFT_GAME","MEMBER_CHANGED_TYPE","onSocketEvent","basename","ThemeProvider","ColorModeProvider","CSSReset","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAAKA,E,kJCGQC,EAAcC,wBAAc,IAEnCC,EAAe,CACnBC,OAAQ,EACRC,QAAS,EACTC,GAAI,GACJC,SAAS,EACTC,SAAU,EACVC,cAAe,EACfC,cAAe,GACfC,kBAAmB,GACnBC,KAAM,GACNC,QAAS,GACTC,YAAa,GACbC,KAAM,GACNC,cAAc,EACdC,iBAAiB,EACjBC,OAAQ,GACRC,YAAY,GAGRC,EAAuB,SAACC,EAAoBC,GAEhD,IADA,IAAIR,EAAc,GACTS,EAAI,EAAGA,EAAIF,EAAYE,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAaE,IAC/BV,EAAYW,KAAK,CACfF,IACAC,IACAE,QAAQ,EACRC,YAAY,IAIlB,OAAOb,GAeHc,EAAc,SAACC,EAAcC,GAAqB,IAXtDC,EACAC,EACA5B,EAUQ6B,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,QACd,OAAQD,GACN,IAAK,WACH,OAAO,2BACFJ,GADL,IAEEd,KAAMmB,IAER,IAAK,SACL,OAAO,2BACFL,GADL,IAEEX,OAAQgB,IAEV,IAAK,UACL,OAAO,2BACFL,GADL,IAEEV,YAAY,IAEhB,IAAK,cACH,OAAO,2BACFU,GADL,IAEEvB,GAAI4B,IAER,IAAK,cACH,OAAO,2BACFL,GADL,IAEEZ,gBAAiBiB,IAErB,IAAK,cAEH,IADA,IAAIpB,EAAc,GACTS,EAAI,EAAGA,EAAIM,EAAMzB,MAAOmB,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIK,EAAMxB,OAAQmB,IAChCV,EAAYW,KAAK,CACfF,IACAC,IACAE,QAAQ,EACRC,YAAY,IAQlB,OAJcE,EAAMhB,QACZsB,KAAI,SAACC,GACX,OAAQA,EAAOC,MAAQ,KAElB,2BACFR,GADL,IAEEf,YAAaA,EACbD,QAASqB,EAAQrB,UAErB,IAAK,aACH,OAAO,2BACFgB,GADL,IAEEvB,GAAI4B,EAAQI,OACZ/B,SAAS,EACTH,MAAO8B,EAAQb,WACfhB,OAAQ6B,EAAQZ,YAChBd,QAAS0B,EAAQK,cACjB9B,aAAcyB,EAAQM,mBACtB3B,QAASqB,EAAQrB,QACjBC,YAAaM,EACXc,EAAQb,WACRa,EAAQZ,eAGd,IAAK,sBACH,OAAO,2BACFO,GADL,IAEEf,aA9ENiB,EA8EoCF,EAAMf,YA7E1CkB,EA6EuDE,EA5EvD9B,EA4EgEyB,EAAMzB,MA1EtE4B,EAASS,SAAQ,SAACC,GAChBX,EAAQW,EAAKnB,EAAImB,EAAKlB,EAAIpB,GAASsC,KAG9BX,KAwEL,IAAK,gBACH,OAAO,2BACFF,GADL,IAEEb,aAAckB,IAElB,IAAK,qBACH,OAAO,2BACFL,GADL,IAEEnB,cAAewB,EAAQ5B,GACvBK,kBACmB,OAAjBuB,EAAQtB,MAAkC,KAAjBsB,EAAQtB,KAC7B,YACAsB,EAAQtB,OAElB,IAAK,kBACH,OAAO,2BACFiB,GADL,IAEEjB,KAAkB,OAAZsB,GAAgC,KAAZA,EAAiB,YAAcA,IAE7D,IAAK,cAKL,IAAK,uBACH,OAAO,2BACFL,GADL,IAEEhB,QAASqB,IAEb,IAAK,gBACH,IAAMS,EAAqBd,EAAMhB,QAIjC,MAHqB,WAAjBqB,EAAQD,MACVU,EAAmBlB,KAAKS,GAEnB,2BACFL,GADL,IAEEhB,QAAS8B,IAEb,IAAK,cACH,IAAMC,EAAmBf,EAAMhB,QAI/B,MAHqB,WAAjBqB,EAAQD,MACVW,EAAiBC,OAAOD,EAAiBE,QAAQZ,GAAU,GAEtD,2BACFL,GADL,IAEEhB,QAAS+B,IAEb,IAAK,iBACH,GAAwB,WAApBV,EAAQa,QAAsB,CAChC,IAAMJ,EAAqBd,EAAMhB,QAGjC,OAFA8B,EAAmBlB,KAAKS,EAAQc,QAEzB,2BACFnB,GADL,IAEEhB,QAAS8B,IAEN,GAAwB,cAApBT,EAAQa,QAAyB,CAC1C,IAAMH,EAAmBf,EAAMhB,QAE/B,OADA+B,EAAiBC,OAAOD,EAAiBE,QAAQZ,EAAQc,QAAS,GAC3D,2BACFnB,GADL,IAEEhB,QAAS+B,IAGb,OAAOf,EACT,QACE,OAAOA,IAIAoB,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EACfC,qBAAWvB,EAAazB,GADT,mBAC1CiD,EAD0C,KAC/BC,EAD+B,KAGjD,OACE,kBAACpD,EAAYqD,SAAb,CAAsBC,MAAO,CAAEH,YAAWC,iBACvCH,I,kBC9LMM,EAAgBtD,wBAAc,IAE9BuD,EAAiB,SAAC,GAAuB,IAArBP,EAAoB,EAApBA,SAAoB,EAClCQ,mBACfC,KACEC,qGAFGC,EAD4C,oBAYnD,OACE,kBAACL,EAAcF,SAAf,CAAwBC,MAAO,CAAEM,SAAQC,UALzB,SAACC,GAAwC,IAAD,uBAAhBC,EAAgB,iCAAhBA,EAAgB,kBACxDH,EAAOI,KAAP,MAAAJ,EAAM,CAAME,GAAN,OAAgBC,OAKnBd,K,SFrBFlD,K,wBAAAA,E,wBAAAA,E,YAAAA,E,0BAAAA,E,4CAAAA,E,gBAAAA,E,wCAAAA,E,gCAAAA,E,wCAAAA,E,oCAAAA,E,0CAAAA,E,wDAAAA,E,4CAAAA,E,wCAAAA,E,4CAAAA,E,0CAAAA,E,0CAAAA,E,4CAAAA,E,kDAAAA,E,gCAAAA,E,0DAAAA,E,0DAAAA,E,kDAAAA,E,0DAAAA,E,oDAAAA,E,sCAAAA,E,0BAAAA,E,sBAAAA,E,wBAAAA,E,0BAAAA,E,wBAAAA,E,wBAAAA,E,0BAAAA,E,gCAAAA,E,cAAAA,E,wCAAAA,E,wCAAAA,E,gCAAAA,E,wCAAAA,E,mCAAAA,M,KAiDUA,Q,sBGnCfkE,gBATuB,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,kBAKNN,QCEA,SAASO,IAAQ,IAAD,EACLf,mBAAS,IADJ,mBACtB9C,EADsB,KAChB8D,EADgB,OAEHhB,mBAAS,IAFN,mBAEtBiB,EAFsB,KAEfC,EAFe,OAGGlB,mBAAS,IAHZ,mBAGtBmB,EAHsB,KAGZC,EAHY,OAIOC,qBAAW9E,GAAvCmD,EAJqB,EAIrBA,UAAWC,EAJU,EAIVA,aACXS,EAAciB,qBAAWvB,GAAzBM,UALqB,EAMUkB,cAA/BC,EANqB,EAMrBA,UAAWC,EANU,EAMVA,gBAEbC,EAAQC,cAgBd,SAASC,EAAatB,GACM,SAAtBA,EAAMuB,OAAO1E,KACf8D,EAAQX,EAAMuB,OAAO/B,OACU,UAAtBQ,EAAMuB,OAAO1E,KACtBgE,EAASb,EAAMuB,OAAO/B,OACS,aAAtBQ,EAAMuB,OAAO1E,MACtBkE,EAAYf,EAAMuB,OAAO/B,OAuC7B,OA3DAgC,qBAAU,WACJnC,EAAUjC,aACZgE,EAAM,CACJK,MAAO,2BACPC,YAAa,oBACbC,OAAQ,UACRC,SAAU,MACVC,SAAU,IACVC,YAAY,IAEdxC,EAAa,CAAEpB,KAAM,UAAWC,QAAS,UAE1C,CAACiD,EAAO/B,EAAWC,IAgDpB,kBAACyC,EAAA,EAAD,CACE1F,MAAM,OACNC,OAAO,OACP0F,MAAM,SACNJ,SAAS,WACTK,eAAe,SACfC,GAAkB,UAAdhB,EAAwB,UAAY,YAExC,kBAACiB,EAAA,EAAD,CACEC,EAAG,GACHF,GAAkB,UAAdhB,EAAwB,QAAU,WACtCmB,aAAc,GACdC,UAAU,2EAEV,kBAACH,EAAA,EAAD,CAAKI,UAAU,UACb,kBAACC,EAAA,EAAD,sBAGF,kBAACL,EAAA,EAAD,CAAKM,GAAI,EAAGF,UAAU,OAAOG,aAAa,UACxC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACEC,GAAG,IACHjG,KAAK,OACLqB,KAAK,OACL6E,YAAY,WACZC,QAAQ,UACRxD,MAAO3C,EACPoG,SAAU3B,KAGd,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACA,kBAACC,EAAA,EAAD,CACEC,GAAG,IACH5E,KAAK,OACLrB,KAAK,QACLkG,YAAY,wBACZC,QAAQ,UACRxD,MAAOoB,EACPqC,SAAU3B,KAGd,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CACE3E,KAAK,OACLrB,KAAK,WACLkG,YAAY,wBACZC,QAAQ,UACRxD,MAAOsB,EACPmC,SAAU3B,KAId,kBAAC,IAAD,CAAM4B,GAAG,SAASC,MAAO,CAAEC,eAAgB,SACzC,kBAACC,EAAA,EAAD,CACEhH,MAAM,OACNiH,GAAI,EACJC,aAAa,OACbP,QAAQ,QACRQ,WAAqB,KAAT3G,EACZ4G,QAlGZ,WACEC,QAAQC,IAAI,kBAAmB9G,GAC/ByC,EAAa,CAAEpB,KAAM,kBAAmBC,QAAStB,IAEnC,KAAV+D,GAA0B,OAAVA,GACH,KAAbE,GAAgC,OAAbA,GAErBX,EACGyD,OACAC,2BAA2BjD,EAAOE,GAClCgD,MAAK,WACJ1C,EAAM,CACJK,MAAO,oBACPC,YAAa,+CACbC,OAAQ,UACRC,SAAU,MACVC,SAAU,IACVC,YAAY,OAGfiC,OAAM,SAACC,GACNN,QAAQC,IAAI,kBAAmBK,EAAMC,KAAMD,EAAME,SACjD9C,EAAM,CACJK,MAAO,uBACPC,YAAa,0BACbC,OAAQ,QACRC,SAAU,MACVC,SAAU,IACVC,YAAY,OAIpB/B,EAAU9D,EAAYkI,gBAAiBtH,KA4D/B,aAYF,kBAAC,IAAD,CAAMqG,GAAG,WAAWC,MAAO,CAAEC,eAAgB,SAC3C,kBAACC,EAAA,EAAD,CACEhH,MAAM,OACNiH,GAAG,IACHc,SAAS,KACTC,MAAqB,UAAdnD,EAAwB,WAAa,YAJ9C,aAUF,kBAAC,IAAD,CAAMgC,GAAG,eACP,kBAACG,EAAA,EAAD,CACEhH,MAAM,OACNiH,GAAG,IACHc,SAAS,KACTC,MAAqB,UAAdnD,EAAwB,WAAa,YAJ9C,gBASF,kBAACmC,EAAA,EAAD,CACEhH,MAAM,OACNiH,GAAG,IACHc,SAAS,KACTC,MAAqB,UAAdnD,EAAwB,WAAa,WAC5CuC,QAAStC,GALX,UAOwB,UAAdD,EAAwB,OAAS,Y,sBClLtC,SAASoD,IAmBtB,IAnB+B,IACvBjF,EAAc2B,qBAAW9E,GAAzBmD,UACAU,EAAciB,qBAAWvB,GAAzBM,UACAmB,EAAcD,cAAdC,UAEFqD,EAAyB,SAACvE,GAC9B0D,QAAQC,IACN,oBACA3D,EAAMuB,OAAOiD,QAAQhH,EACrBwC,EAAMuB,OAAOiD,QAAQ/G,GAGvBsC,EAAU9D,EAAYwI,kBAAmB,CACvCjH,EAAGkH,OAAO1E,EAAMuB,OAAOiD,QAAQhH,GAC/BC,EAAGiH,OAAO1E,EAAMuB,OAAOiD,QAAQ/G,MAI/BkH,EAAO,GACFC,EAAS,EAAGA,EAASvF,EAAUhD,MAAQgD,EAAU/C,OAAQsI,IAAU,CAC1E,IAAIC,OAAQ,EACNC,EAAYzF,EAAUtC,YAAY6H,GAOtCC,EALGC,EAAUlH,WAEHkH,EAAUnH,OAGT,eAFA,SAFA,eAQb,IAAMoH,EACHH,EAASvF,EAAUhD,MAAS,IAC7B2I,KAAKC,MAAML,EAASvF,EAAUhD,OAAS,EACnC,aACA,YAENsI,EAAKjH,KACH,kBAACyE,EAAA,EAAD,CACE+C,GAAG,SACHC,OAAO,MACPC,YAAaL,EACbM,IAAKT,EACLU,SAAQV,EAASvF,EAAUhD,MAC3BkJ,SAAQP,KAAKC,MAAML,EAASvF,EAAUhD,OACtCA,MAAM,OACNC,OAAO,OACP4F,GAAI6C,EACJtB,QAASc,GAERM,IAKP,OACI,kBAACW,EAAA,EAAD,CACEC,gBAAe,iBAAYpG,EAAUhD,MAAtB,UACfqJ,aAAY,iBAAYrG,EAAU/C,OAAtB,UACZ6I,OAAO,MACPC,YAA2B,UAAdlE,EAAwB,WAAa,WAClDyE,EAAqB,GAAlBtG,EAAUhD,MAAa,EAC1BuJ,EAAqB,GAAlBvG,EAAUhD,MAAa,EAC1BwJ,IAAK,GAEJlB,G,aCnEM,SAASmB,IAAQ,IACtBzG,EAAc2B,qBAAW9E,GAAzBmD,UACAS,EAAWkB,qBAAWvB,GAAtBK,OAER,OACE,kBAACiC,EAAA,EAAD,CAAMgE,WAAW,SAASC,cAAc,UACtC,kBAACxD,EAAA,EAAD,CAASM,GAAI,GAAb,iBACA,kBAACmD,EAAA,EAAD,aACQ,IACN,0BACE9C,MAAO,CACLkB,MAAOhF,EAAU1C,gBAAkBmD,EAAOvD,GAAK,SAAW,KAG3D8C,EAAU1C,gBAAkBmD,EAAOvD,GAChC,OACA8C,EAAUzC,kBAAoB,MAC5B,IAVV,SAaA,kBAACqJ,EAAA,EAAD,CAAMnD,GAAI,GACPzD,EAAU1C,gBAAkBmD,EAAOvD,GAAnC,UACM8C,EAAUrC,KADhB,kBAEG,mB,gDCXG,SAASkJ,IACtB,IAD6B,EAILvG,mBAAS,IAJJ,mBAItBwG,EAJsB,KAIhBC,EAJgB,KAKrB/G,EAAc2B,qBAAW9E,GAAzBmD,UALqB,EAMGM,mBAAS,IANZ,mBAMtB0G,EANsB,KAMZC,EANY,KAOrBxG,EAAWkB,qBAAWvB,GAAtBK,OAQFyG,EAAcC,uBAAY,WAC9B9C,QAAQC,IAAItE,EAAU9C,IACtB4D,EACGsG,WACAC,IAAI,SAAWrH,EAAU9C,IACzBoK,GACC,SACA,SAAC1G,GACC,IAAM2G,EAAgB3G,EAAK4G,MAC3B,GAAsB,OAAlBD,EAAJ,CAGA,IAAME,EAA2B,GACjCC,OAAOC,KAAKJ,GAAelI,SAAQ,SAAC2G,GAClCyB,EAAYpJ,KAAK,CACfuJ,SAAUL,EAAcvB,GAAK4B,SAC7B/C,QAAS0C,EAAcvB,GAAKnB,aAGhCoC,EAAYQ,OAEd,WACEpD,QAAQC,IAAI,cAGjB,CAACtE,EAAU9C,KAEdiF,qBAAU,WACR+E,MACC,CAACA,IAEJ,IAwBMW,EAA0B,GAC5BC,EAAU,EACdd,EAAS3H,SAAQ,SAAC0I,GAAD,OACfF,EAASxJ,KACP,kBAACuI,EAAA,EAAD,CAAMZ,IAAK8B,KACRC,EAAUH,SADb,MAC0BG,EAAUlD,aAIxC,IAAMmD,EAAoBH,EAASI,MACjCtC,KAAKuC,IAAI,EAAGL,EAASM,OA9EC,IAiFlBC,EAA2B,GAC7BC,EAAY,EAYhB,OAXArI,EAAUvC,QAAQ4B,SAAQ,SAACL,GAAD,aACxBoJ,EAAU/J,KACR,kBAACuI,EAAA,EAAD,KACE,0BAAM9C,MAAO,CAAEwE,WAAY,SACA,KAAxB,UAAAtJ,EAAOxB,YAAP,eAAa2K,QAAe,aAAcE,EAAYrJ,EAAOxB,KADhE,IACuE,KAEvE,0BAAMsG,MAAO,CAAEkB,MAAO,WAAahG,EAAOC,YAM9C,kBAACyD,EAAA,EAAD,CAAM6F,UAAU,UACd,kBAACzF,EAAA,EAAD,CAAK0F,gBAAgB,OAAOC,QAAQ,KAClC,kBAAC/F,EAAA,EAAD,CAAM4F,WAAW,OAAOvD,SAAS,KAAKnC,eAAe,SAAS8F,GAAG,KAAjE,gBAGA,kBAAC9B,EAAA,EAAD,iBAAe,0BAAM9C,MAAO,CAAEkB,MAAO,WAAahF,EAAU9C,KAC5D,kBAAC0J,EAAA,EAAD,CAAMnD,GAAI,GAAV,WAAqB,0BAAMK,MAAO,CAAEkB,MAAO,WAAahF,EAAUxC,OAClE,kBAACmL,EAAA,EAAD,CAASC,YAAY,eACrB,kBAAClG,EAAA,EAAD,CAAM4F,WAAW,OAAOvD,SAAS,KAAKnC,eAAe,SAAS8F,GAAG,KAAjE,UAGCN,EACD,kBAACxB,EAAA,EAAD,CAAM0B,WAAW,QAAQO,GAAI,GAA7B,aACa7I,EAAUvC,QAAQ0K,OAD/B,oBAIF,kBAACQ,EAAA,EAAD,CAASC,YAAY,eACrB,kBAAC9F,EAAA,EAAD,CAAK0F,gBAAgB,OAAOC,QAAQ,KAClC,kBAAC/F,EAAA,EAAD,CAAM4F,WAAW,OAAOvD,SAAS,KAAKnC,eAAe,SAAS8F,GAAG,KAAjE,QAGCV,EACD,kBAAC1E,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,CAAM6F,UAAU,MAAM3F,eAAe,SAASqB,GAAG,KAC/C,kBAACT,EAAA,EAAD,CAAOE,YAAY,UAAUvD,MAAO2G,EAAMlD,SAhH/B,SAACjD,GAChBA,EAAMuB,OAAO/B,MAAMgI,OATD,IAUpBpB,EAAQpG,EAAMuB,OAAO/B,UA+Gf,kBAAC2I,EAAA,EAAD,CACE7L,OAAO,UACPD,MAAM,UACN+L,GAAG,IACHC,WAAW,IACXC,aAAW,YACXC,KAAK,QACLC,KAAK,KACL/E,QApFS,WACnBC,QAAQC,IAAItE,EAAU9C,GAAI8C,EAAUxC,MACvB,KAATsJ,GAAwB,OAATA,IAGnBC,EAAQ,IACRqC,IAAMC,KACJ,yEACAC,IAAGC,UAAU,CACX1E,QAASiC,EACT0C,IAAK/I,EAAOvD,GACZ0K,SAAU5H,EAAUxC,OAEtB,CACEiM,OAAQ,CACNC,OAAQ1J,EAAU9C,IAEpByM,QAAS,CACP,eAAgB,+C,aCrEX,SAASC,IAAe,IAAD,EACAjI,qBAAW9E,GAAvCmD,EAD4B,EAC5BA,UAAWC,EADiB,EACjBA,aAwDnB,OACE,oCACE,kBAAC4J,EAAA,EAAD,CAAOC,OAAQ9J,EAAUnC,iBACvB,kBAACgM,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,yBACA,kBAACA,EAAA,EAAD,KApCR,WACE,IAAM/L,EAASkC,EAAUlC,OAGzB,GAFAuG,QAAQC,IAAIxG,GACZuG,QAAQC,IAAIxG,EAAOqK,OAAS,QACN,IAAlBrK,EAAOqK,OACT,MACE,iBACArK,EAAO,GAAGN,KACV,oBACAM,EAAO,GAAGmB,MAEP,GAAInB,EAAOqK,OAAS,EAAG,CAE5B,IADA,IAAI4B,EAAa,GACRC,EAAI,EAAGA,EAAIlM,EAAOqK,OAAQ6B,IACd,KAAfD,IACFA,GAA0B,KAE5BA,GAA0BjM,EAAOkM,GAAGxM,KAEtC,MACE,0BACAuM,EACA,oBACAjM,EAAO,GAAGmB,MAGZ,MAAO,GAUSgL,IACZ,kBAACJ,EAAA,EAAD,KACE,kBAAC7F,EAAA,EAAD,CACEE,aAAa,OACbgG,GAAI,EACJ9F,QAAS,WACPnE,EAAa,CAAEpB,KAAM,cAAeC,SAAS,MAJjD,aClEG,SAASqL,IAAQ,IACtBnK,EAAc2B,qBAAW9E,GAAzBmD,UACA6B,EAAcD,cAAdC,UACAnB,EAAciB,qBAAWvB,GAAzBM,UAWR,OAAKV,EAAU7C,QAab,kBAACuF,EAAA,EAAD,CACE1F,MAAM,OACNC,OAAO,OACP0F,MAAM,SACNJ,SAAS,WACTK,eAAe,SACfC,GAAkB,UAAdhB,EAAwB,UAAY,YAExC,kBAAC+H,EAAD,MACA,kBAAC9G,EAAA,EAAD,CACEC,EAAG,GACHF,GAAkB,UAAdhB,EAAwB,QAAU,WACtCmB,aAAc,GACdC,UAAU,0EACVyD,WAAW,SACX9D,eAAe,UAEf,kBAACF,EAAA,EAAD,CAAM6F,UAAU,OACd,kBAAC7F,EAAA,EAAD,CAAM6F,UAAU,UACd,kBAAC9B,EAAD,MACA,kBAAC/D,EAAA,EAAD,CAAME,eAAe,SAASwH,aAAa,UACzC,kBAACnF,EAAD,OAGF,kBAACvC,EAAA,EAAD,CAAM6F,UAAU,MAAM3F,eAAe,SAASyH,UAAU,KACtD,kBAACrG,EAAA,EAAD,CAAQI,QA/CpB,WACEC,QAAQC,IAAI1H,EAAY0N,aACxB5J,EAAU9D,EAAY0N,YAAa,OA6CQ7B,QAAQ,IAAI8B,YAAY,KAAzD,cAGA,kBAACvG,EAAA,EAAD,CAAQI,QA7CpB,WACE1D,EAAU9D,EAAY4N,aA4CqB/B,QAAQ,KACvC,kBAAC,IAAD,CAAM5E,GAAG,KAAT,iBAIN,kBAAC8E,EAAA,EAAD,CAASC,YAAY,aACrB,kBAAC/B,EAAD,SA7CJ,6BACE,0CACA,8EACA,kBAAC,IAAD,CAAMhD,GAAG,KACP,kBAACG,EAAA,EAAD,8BChBK,SAASyG,IAAY,IAC1B5I,EAAcD,cAAdC,UADyB,EAEDvB,mBAAS,IAFR,mBAE1BsH,EAF0B,KAEhB8C,EAFgB,OAGPpK,mBAAS,IAHF,mBAG1BiB,EAH0B,KAGnBC,EAHmB,OAIDlB,mBAAS,IAJR,mBAI1BmB,EAJ0B,KAIhBC,EAJgB,KAM3BK,EAAQC,cAEd,SAASC,EAAatB,GACM,aAAtBA,EAAMuB,OAAO1E,KACfkN,EAAY/J,EAAMuB,OAAO/B,OACM,UAAtBQ,EAAMuB,OAAO1E,KACtBgE,EAASb,EAAMuB,OAAO/B,OACS,aAAtBQ,EAAMuB,OAAO1E,MACtBkE,EAAYf,EAAMuB,OAAO/B,OA+B7B,OACE,kBAACuC,EAAA,EAAD,CACE1F,MAAM,OACNC,OAAO,OACP0F,MAAM,SACNJ,SAAS,WACTK,eAAe,SACfC,GAAkB,UAAdhB,EAAwB,UAAY,YAExC,kBAACiB,EAAA,EAAD,CACEC,EAAG,GACHF,GAAkB,UAAdhB,EAAwB,QAAU,WACtCmB,aAAc,GACdC,UAAU,2EAEV,kBAACH,EAAA,EAAD,CAAKI,UAAU,UACb,kBAACC,EAAA,EAAD,kBAEF,kBAACL,EAAA,EAAD,CAAKmB,GAAI,EAAGf,UAAU,OAAOG,aAAa,UACxC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CACE3E,KAAK,OACLrB,KAAK,WACLmG,QAAQ,UACRxD,MAAOyH,EACPhE,SAAU3B,EACVwB,GAAG,MAEL,kBAACF,EAAA,EAAD,eACA,kBAACC,EAAA,EAAD,CACE3E,KAAK,OACLrB,KAAK,QACLmG,QAAQ,UACRxD,MAAOoB,EACPqC,SAAU3B,EACVwB,GAAG,MAEL,kBAACF,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CACE3E,KAAK,OACLrB,KAAK,WACLmG,QAAQ,UACRxD,MAAOsB,EACPmC,SAAU3B,EACVwB,GAAG,OAGP,kBAACO,EAAA,EAAD,CACEhH,MAAM,OACNiH,GAAI,EACJC,aAAa,OACbP,QAAQ,QACRS,QAhFV,WACEtD,EACGyD,OACAoG,+BAA+BpJ,EAAOE,GACtCgD,MAAK,WACJ1C,EAAM,CACJK,MAAO,qBACPC,YAAa,+CACbC,OAAQ,UACRC,SAAU,MACVC,SAAU,IACVC,YAAY,OAGfiC,OAAM,SAACC,GACNN,QAAQC,IAAI,kBAAmBK,EAAMC,KAAMD,EAAME,SACjD9C,EAAM,CACJK,MAAO,wBACPC,YAAa,0BACbC,OAAQ,QACRC,SAAU,MACVC,SAAU,IACVC,YAAY,QA2DVsC,SAAS,MANX,YAUA,kBAAC,IAAD,CAAMlB,GAAG,KACP,kBAACG,EAAA,EAAD,CAAQhH,MAAM,OAAOiH,GAAG,IAAIc,SAAS,MAArC,Y,sCClGG,SAAS6F,IAAc,IAC5B5K,EAAc2B,qBAAW9E,GAAzBmD,UACAU,EAAciB,qBAAWvB,GAAzBM,UAF2B,EAGLJ,oBAAS,GAHJ,mBAG5BnD,EAH4B,KAGnB0N,EAHmB,KAI3BhJ,EAAcD,cAAdC,UAJ2B,EAKDvB,mBAAS,GALR,mBAK5BwK,EAL4B,KAKjBC,EALiB,OAMOzK,mBAAS,GANhB,mBAM5BnB,EAN4B,KAMb6L,EANa,OAOC1K,mBAAS,GAPV,mBAO5B2K,EAP4B,KAOhBC,EAPgB,KAQ3BzK,EAAWkB,qBAAWvB,GAAtBK,OAEFsB,EAAQC,cAEdG,qBAAU,WACR1B,EAAO6G,GAAG1K,EAAYuO,yBAAyB,SAACrM,GAC9CuF,QAAQC,IAAI,6BAA8BxF,GACrCA,EAAQsM,MACXrJ,EAAM,CACJK,MAAO,2BACPC,YAAa,oCACbC,OAAQ,QACRC,SAAU,MACVC,SAAU,IACVC,YAAY,OAKlBhC,EAAO6G,GAAG1K,EAAYyO,6BAA6B,SAACvM,GAClDuF,QAAQC,IAAI,iCAAkCxF,GACzCA,EAAQsM,MACXrJ,EAAM,CACJK,MAAO,4BACPC,YAAa,qCACbC,OAAQ,QACRC,SAAU,MACVC,SAAU,IACVC,YAAY,OAKlBhC,EAAO6G,GAAG1K,EAAY0O,yBAAyB,SAACxM,GAC9CuF,QAAQC,IAAI,6BAA8BxF,GACrCA,EAAQsM,MACXrJ,EAAM,CACJK,MAAO,4BACPC,YAAa,mDACbC,OAAQ,QACRC,SAAU,MACVC,SAAU,IACVC,YAAY,SAIjB,CAAChC,EAAQsB,IAqCZ,IAAMwJ,EACa,KAAjBvL,EAAU9C,GACR,kBAAC4F,EAAA,EAAD,CACE9F,MAAM,OACN+F,EAAG,EACHyI,EAAG,EACH3I,GAAkB,UAAdhB,EAAwB,WAAa,WACzCmB,aAAc,IAEd,kBAAC4D,EAAA,EAAD,CAAM7B,SAAS,KAAKuD,WAAW,UAA/B,YAGA,kBAAC1B,EAAA,EAAD,CAAM6E,GAAG,IAAIC,QAAQ,KAAKpD,WAAW,OAAOtD,MAAM,cAC/ChF,EAAU9C,IAGb,kBAAC0J,EAAA,EAAD,CAAM3C,GAAG,IAAIc,SAAS,KAAKuD,WAAW,UAAtC,eAIA,kBAACqD,EAAA,EAAD,CACEC,KAAM,EACNC,IAAK,EACL3D,IAAK,GACL/H,MAAO2K,EACPlH,SAnDR,SAA+BzD,GAC7B4K,GAAc5K,IAmDRuL,QAAQ,KACR7I,GAAkB,UAAdhB,EAAwB,WAAa,YAEzC,kBAAC8J,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIJ,kBAAC/E,EAAA,EAAD,CAAM3C,GAAG,IAAIc,SAAS,KAAKuD,WAAW,UAAtC,UAIA,kBAACqD,EAAA,EAAD,CACEC,KAAM,EACNE,aAAc,EACdD,IAAK,EACL3D,IAAKvC,KAAKoG,KAAM,EAAI,EAAKjB,EAAYA,GACrCjI,GAAkB,UAAdhB,EAAwB,WAAa,WACzC6J,QAAQ,KACRvL,MAAOhB,EACPyE,SAtER,SAA0BzD,GACxB6K,GAAkB7K,KAuEZ,kBAACwL,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIJ,kBAAC/E,EAAA,EAAD,CAAM3C,GAAG,IAAIc,SAAS,KAAKuD,WAAW,UAAtC,gBAIA,kBAACqD,EAAA,EAAD,CACEC,KAAM,EACNC,IAAK,EACL3D,IAAK,GACL/H,MAAO8K,EACPrH,SApFR,SAA+BzD,GAC7B+K,GAAe/K,IAoFTuL,QAAQ,KACR7I,GAAkB,UAAdhB,EAAwB,WAAa,YAEzC,kBAAC8J,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIJ,kBAAC3H,EAAA,EAAD,CACEC,GAAG,IACHe,MAAqB,UAAdnD,EAAwB,YAAc,YAC7C7E,MAAM,OACN6F,GAAkB,UAAdhB,EAAwB,WAAa,WACzCuC,QAhGR,WACE1D,EAAU,iBAAkBuK,GAC5BvK,EAAU,qBAAsBvB,GAChCuB,EAAU,iBAAkBoK,EAAWA,GACvC/I,EAAM,CACJK,MAAO,SACPC,YAAa,+BACbC,OAAQ,OACRC,SAAU,MACVC,SAAU,KACVC,YAAY,MAiFV,UAWF,qCAGEuJ,EAA4B,GAC9B3D,EAAY,EAChBrI,EAAUvC,QAAQ4B,SAAQ,SAACL,GAAD,OACxBgN,EAAW3N,KACT,kBAACuI,EAAA,EAAD,CAAMZ,IAAKqC,KACQ,KAAhBrJ,EAAOxB,MAA+B,OAAhBwB,EAAOxB,KAAgB,YAAcwB,EAAOxB,UAKzE,IAAMyO,EACJ,kBAACnJ,EAAA,EAAD,CACEoJ,OAA8B,IAAtBF,EAAW7D,OACnBnL,MAAM,OACN+F,EAAG,EACHyI,EAAG,EACH3I,GAAkB,UAAdhB,EAAwB,WAAa,WACzCmB,aAAc,IAEd,kBAAC4D,EAAA,EAAD,CAAMf,GAAG,KAAT,mBACCmG,GAIL,OACE,oCACGhM,EAAU7C,QACT,kBAAC,IAAD,CAAU0G,GAAG,UAEb,kBAACnB,EAAA,EAAD,CACE1F,MAAM,OACNC,OAAO,OACP0F,MAAM,SACNJ,SAAS,WACTK,eAAe,SACfC,GAAkB,UAAdhB,EAAwB,UAAY,YAExC,kBAACiB,EAAA,EAAD,CACEC,EAAG,GACHF,GAAkB,UAAdhB,EAAwB,QAAU,WACtCmB,aAAc,GACdC,UAAU,2EAEV,kBAACH,EAAA,EAAD,CAAKI,UAAU,UACb,kBAACC,EAAA,EAAD,qBAEF,kBAACT,EAAA,EAAD,CAAM6F,UAAU,OACbgD,EACAU,GAGH,kBAACnJ,EAAA,EAAD,CAAKI,UAAU,OAAOG,aAAa,SAASY,GAA0B,IAAtB+H,EAAW7D,OAAe,EAAI,GAC5E,kBAACnE,EAAA,EAAD,CACEmI,UAAWhP,EACXiP,YAAY,cACZpP,MAAM,OACNkH,aAA+B,KAAjBlE,EAAU9C,GAAY,OAAS,SAC7CyG,QAAQ,QACRS,QAA0B,KAAjBpE,EAAU9C,GAxLd,WACjBwD,EAAU9D,EAAYyP,YAAa,OAGnB,WAChBxB,GAAW,GACXnK,EAAU9D,EAAY0P,WAAY,OAmLtBvH,SAAS,KACTZ,WACmB,KAAjBnE,EAAU9C,MAEN8C,EAAUvC,QAAQ0K,OAAS,IAKf,KAAjBnI,EAAU9C,GAAY,mBAAqB,cAG9C,kBAAC,IAAD,CAAM2G,GAAG,SACP,kBAACG,EAAA,EAAD,CACEmI,UAAWhP,EACXH,MAAM,OACNiH,GAAG,IACHc,SAAS,KACTC,MAAqB,UAAdnD,EAAwB,WAAa,YAL9C,kBClQD,SAAS0K,IAAY,IAAD,EACCjM,mBAAS,IADV,mBAC1BkM,EAD0B,KACfC,EADe,KAEzBzM,EAAc2B,qBAAW9E,GAAzBmD,UACAU,EAAciB,qBAAWvB,GAAzBM,UAHyB,EAIHJ,oBAAS,GAJN,mBAI1BnD,EAJ0B,KAIjB0N,EAJiB,KAKzBhJ,EAAcD,cAAdC,UAaR,IAAMmK,EAA4B,GAC9B3D,EAAY,EAChBrI,EAAUvC,QAAQ4B,SAAQ,SAACL,GAAD,OACxBgN,EAAW3N,KACT,kBAACuI,EAAA,EAAD,CAAMZ,IAAKqC,KACQ,KAAhBrJ,EAAOxB,MAA+B,OAAhBwB,EAAOxB,KAAgB,YAAcwB,EAAOxB,UAIzE,IAAMyO,EACJ,kBAACnJ,EAAA,EAAD,CACEoJ,OAA8B,IAAtBF,EAAW7D,OACnBnL,MAAM,OACN+F,EAAG,EACHyI,EAAG,EACH3I,GAAkB,UAAdhB,EAAwB,WAAa,WACzCmB,aAAc,IAEd,kBAAC4D,EAAA,EAAD,CAAMf,GAAG,KAAT,mBACCmG,GAIL,OACE,oCACGhM,EAAU7C,QACT,kBAAC,IAAD,CAAU0G,GAAG,UAEb,kBAACnB,EAAA,EAAD,CACE1F,MAAM,OACNC,OAAO,OACP0F,MAAM,SACNJ,SAAS,WACTK,eAAe,SACfC,GAAkB,UAAdhB,EAAwB,UAAY,YAExC,kBAACiB,EAAA,EAAD,CACEC,EAAG,GACHF,GAAkB,UAAdhB,EAAwB,QAAU,WACtCmB,aAAc,GACdC,UAAU,2EAEV,kBAACH,EAAA,EAAD,CAAKI,UAAU,UACb,kBAACC,EAAA,EAAD,mBAEF,kBAACT,EAAA,EAAD,KAAOuJ,GACP,kBAACnJ,EAAA,EAAD,CAAKI,UAAU,OAAOG,aAAa,SAASY,GAA0B,IAAtB+H,EAAW7D,OAAe,EAAI,GAC5E,kBAAC7E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWE,GAAG,KAAd,kBACA,kBAACD,EAAA,EAAD,CACE3E,KAAK,OACL6E,YAAY,cACZC,QAAQ,UACRxD,MAAOqM,EACP5I,SAzDhB,SAAsBjD,GACpB8L,EAAa9L,EAAMuB,OAAO/B,WA4DhB,kBAAC6D,EAAA,EAAD,CACEmI,UAAWhP,EACXiP,YAAY,cACZpP,MAAM,OACNiH,GAAI,EACJC,cAC6B,IAA3BlE,EAAUpC,aAAwB,SAAW,OAE/C+F,QAAQ,QACRS,SAAoC,IAA3BpE,EAAUpC,aA3EjC,WACEiN,GAAW,GACXnK,EAAU9D,EAAY0P,WAAY,OALpC,WACE5L,EAAU9D,EAAY8P,UAAWF,IA8ErBzH,SAAS,OAEmB,IAA3B/E,EAAUpC,aAAwB,aAAe,aAEpD,kBAAC,IAAD,CAAMiG,GAAG,WACP,kBAACG,EAAA,EAAD,CACEmI,UAAWhP,EACXH,MAAM,OACNiH,GAAG,IACHc,SAAS,KACTC,MAAqB,UAAdnD,EAAwB,WAAa,YAL9C,oB,2CC7FD,SAAS8K,KACtB,IAAMC,EAAc,CAClBrL,MAAO,IACPsL,aAAc,EACdC,UAAW,IACXC,SAAU,IACVnF,SAAU,IACVoF,UAAW,CACTC,SAAU,EACVC,aAAc,GAEhBC,YAAa,EACbC,cAAe,GAETvL,EAAcD,cAAdC,UAd4B,EAeNvB,oBAAS,GAfH,mBAe7B+M,EAf6B,KAepBC,EAfoB,KAgB9BC,EAAcC,iBAAO,CACzBC,QAAS,CAACb,GACVc,KAAM,CAACd,GACPe,IAAK,CAACf,KAnB4B,SAsBrBgB,EAtBqB,gFAsBpC,WAAkCC,GAAlC,UAAAC,EAAA,yDAEkB,YAAdD,GACc,SAAdA,GACc,QAAdA,EAJJ,iEAQQzE,IACH2E,IACC,uEACA,CACEtE,OAAQ,CACNuE,aAAc,EACdH,eAILpJ,MAAK,SAACwJ,GACL5J,QAAQC,IAAI2J,GADM,IAEVrN,EAASqN,EAATrN,KACJA,EAAKsN,OACPX,EAAY5O,QAAQkP,GAAajN,EAAKuN,eAtB9C,4CAtBoC,sBAiDpC,IAAMC,EAAsBjH,sBAAW,wBAAC,uBAAA2G,EAAA,sEAChCF,EAAmB,WADa,uBAEhCA,EAAmB,QAFa,uBAGhCA,EAAmB,OAHa,OAItCN,GAAW,GAJ2B,2CAKrC,IAEHnL,qBAAU,WACRiM,MACC,CAACA,IAEJ,IAAMC,EACJ,kBAAC3L,EAAA,EAAD,CAAM6F,UAAU,SAAS+F,QAAQ,SAAS5H,WAAW,UACnD,kBAACvD,EAAA,EAAD,CAAS0C,GAAG,KAAKpC,GAAG,KAApB,YACA,kBAACmD,EAAA,EAAD,CAAM5B,MAAM,YACTuI,EAAY5O,QAAQ8O,QAAQ,GAAG7F,SADlC,KAC8C,IAC3C2F,EAAY5O,QAAQ8O,QAAQ,GAAGL,cAFlC,SAIA,kBAACxG,EAAA,EAAD,CAAM5B,MAAM,YAAYuI,EAAY5O,QAAQ8O,QAAQ,GAAGlM,OACvD,kBAACoH,EAAA,EAAD,MACA,kBAACxF,EAAA,EAAD,CAAS0C,GAAG,KAAKpC,GAAG,KAApB,UACA,kBAACmD,EAAA,EAAD,CAAM5B,MAAM,YACTuI,EAAY5O,QAAQ+O,KAAK,GAAG9F,SAD/B,KAC2C,IACxC2F,EAAY5O,QAAQ+O,KAAK,GAAGb,aAF/B,SAIA,kBAACjG,EAAA,EAAD,CAAM5B,MAAM,YAAYuI,EAAY5O,QAAQ+O,KAAK,GAAGnM,OACpD,kBAACoH,EAAA,EAAD,MACA,kBAACxF,EAAA,EAAD,CAAS0C,GAAG,KAAKpC,GAAG,KAApB,SACA,kBAACmD,EAAA,EAAD,CAAM5B,MAAM,YACTuI,EAAY5O,QAAQgP,IAAI,GAAG/F,SAD9B,KAC0C,IACvC2F,EAAY5O,QAAQgP,IAAI,GAAGR,YAF9B,SAIA,kBAACvG,EAAA,EAAD,CAAM5B,MAAM,YAAYuI,EAAY5O,QAAQgP,IAAI,GAAGpM,OACnD,kBAACoH,EAAA,EAAD,MACA,kBAAC,IAAD,CAAM9E,GAAG,KACP,kBAACG,EAAA,EAAD,CAAQhH,MAAM,OAAOiH,GAAG,IAAIc,SAAS,MAArC,UAON,OACE,kBAACrC,EAAA,EAAD,CACE1F,MAAM,OACNC,OAAO,OACP0F,MAAM,SACNJ,SAAS,WACTK,eAAe,SACfC,GAAkB,UAAdhB,EAAwB,UAAY,YAExC,kBAACiB,EAAA,EAAD,CACEC,EAAG,GACHgG,GAAI,GACJlG,GAAkB,UAAdhB,EAAwB,QAAU,WACtCmB,aAAc,GACdC,UAAU,2EAEToK,EAAU,kBAACkB,GAAA,EAAD,MAAcF,I,cC5GlBG,GAZE,2BACZC,MADY,IAEfC,OAAO,2BACFD,KAAMC,QADL,IAEJC,YAAa,YAEfC,QAAQ,2BACHH,KAAMG,SADJ,IAEL,MAAO,MCwDIC,OA/Cf,WAAgB,IACN5O,EAAiB0B,qBAAW9E,GAA5BoD,aACAQ,EAAWkB,qBAAWvB,GAAtBK,OASR,OANA0B,qBAAU,WACJ1B,GCdD,SACLA,EACAR,GAEAQ,EAAO6G,GAAG1K,EAAYkS,sBAAsB,SAAChQ,GAC3CuF,QAAQC,IAAI,uBAAwBxF,GACpCmB,EAAa,CAAEpB,KAAM,cAAeC,QAASA,EAAQ8B,KAAK1B,SAC1De,EAAa,CACXpB,KAAM,cACNC,QAA0B,OAAjBA,EAAQ8B,KAAgB,GAAK9B,EAAQ8B,KAAKnD,aAIvDgD,EAAO6G,GAAG1K,EAAYmS,0BAA0B,SAACjQ,GAC/CuF,QAAQC,IAAI,2BAA4BxF,MAG1C2B,EAAO6G,GAAG1K,EAAYoS,QAAQ,SAAClQ,GAC7BuF,QAAQC,IAAI,SAAUxF,GACtBmB,EAAa,CAAEpB,KAAM,cAAeC,SAAS,IAC7CmB,EAAa,CAAEpB,KAAM,SAAUC,QAASA,EAAQmQ,aAGlDxO,EAAO6G,GAAG1K,EAAYsS,MAAM,SAACvR,GAC3BsC,EAAa,CAAEpB,KAAM,WAAYC,QAASnB,OAG5C8C,EAAO6G,GAAG1K,EAAYuS,oBAAoB,SAACrQ,GACzCuF,QAAQC,IAAI,qBAAsBxF,GAClCmB,EAAa,CAAEpB,KAAM,gBAAiBC,QAASA,EAAQsM,OACvDnL,EAAa,CACXpB,KAAM,cACNC,QAA0B,OAAjBA,EAAQ8B,KAAgB,GAAK9B,EAAQ8B,KAAKnD,aAIvDgD,EAAO6G,GAAG1K,EAAYwS,qBAAqB,SAACtQ,GAC1CuF,QAAQC,IAAI,sBAAuBxF,GAC/BA,EAAQsM,MACVnL,EAAa,CAAEpB,KAAM,aAAcC,QAASA,EAAQ8B,UAIxDH,EAAO6G,GAAG1K,EAAYyS,aAAa,SAACrQ,GAClCqF,QAAQC,IAAI,cAAetF,GAC3BiB,EAAa,CAAEpB,KAAM,qBAAsBC,QAASE,OAGtDyB,EAAO6G,GAAG1K,EAAY0S,sBAAsB,SAACxQ,GAC3CuF,QAAQC,IAAI,cAAexF,GAC3BmB,EAAa,CAAEpB,KAAM,cAAeC,QAASA,EAAQ8B,UAGvDH,EAAO6G,GAAG1K,EAAY2S,4BAA4B,SAACzQ,GACjDuF,QAAQC,IAAI,6BAA8BxF,GACtCA,EAAQsM,OACVnL,EAAa,CACXpB,KAAM,sBACNC,QAASA,EAAQ8B,KAAK4O,sBAExBvP,EAAa,CACXpB,KAAM,uBACNC,QAASA,EAAQ8B,KAAKnD,cAK5BgD,EAAO6G,GAAG1K,EAAY6S,oBAAoB,SAAC3Q,GACzCuF,QAAQC,IAAI,qBAAsBxF,GAClCmB,EAAa,CACXpB,KAAM,gBACNC,QAASA,EAAQc,YAIrBa,EAAO6G,GAAG1K,EAAY8S,kBAAkB,SAAC5Q,GACvCuF,QAAQC,IAAI,mBAAoBxF,GAChCmB,EAAa,CACXpB,KAAM,cACNC,QAASA,EAAQc,YAIrBa,EAAO6G,GACL1K,EAAY+S,qBACZ,SAAC7Q,GACCuF,QAAQC,IAAI,sBAAuBxF,GACnCmB,EAAa,CACXpB,KAAM,iBACNC,QAASA,OD1EX8Q,CAAcnP,EAAQR,KAEvB,CAACQ,EAAQR,IAGV,6BACE,kBAAC,IAAD,CAAQ4P,SAAS,KACf,kBAACC,EAAA,EAAD,CAAerB,MAAOD,IACpB,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC7O,EAAD,OAEF,kBAAC,IAAD,CAAO6O,KAAK,SACV,kBAAC/F,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+F,KAAK,WACV,kBAACtF,EAAD,OAEF,kBAAC,IAAD,CAAOsF,KAAK,SACV,kBAAC3D,EAAD,OAEF,kBAAC,IAAD,CAAO2D,KAAK,eAAZ,cACA,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACzF,EAAD,OAEF,kBAAC,IAAD,CAAOyF,KAAK,gBACV,kBAACvD,GAAD,cE3CEwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,GAAD,SAINC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtM,MAAK,SAACuM,GACLA,EAAaC,gBAEdvM,OAAM,SAACC,GACNN,QAAQM,MAAMA,EAAME,c","file":"static/js/main.843c6e1c.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = \"connection\",\n  DISCONNECT = \"disconnect\",\n\n  // Server events: [Server] -> [Client]\n  TICK = \"TICK\",\n  NEXT_PLAYER = \"NEXT_PLAYER\",\n  COORDINATED_SELECTED = \"COORDINATED_SELECTED\",\n  WINNER = \"WINNER\",\n  GAME_STATE_CHANGED = \"GAME_STATE_CHANGED\",\n  CURRENT_PLAYER = \"CURRENT_PLAYER\",\n  MEMBER_JOINED_GAME = \"MEMBER_JOINED_GAME\",\n  MEMBER_LEFT_GAME = \"MEMBER_LEFT_GAME\",\n  MEMBER_CHANGED_TYPE = \"MEMBER_CHANGED_TYPE\",\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = \"SELECT_COORDINATE_FEEDBACK\",\n  CREATE_GAME_FEEDBACK = \"CREATE_GAME_FEEDBACK\",\n  JOIN_GAME_FEEDBACK = \"JOIN_GAME_FEEDBACK\",\n  QUICK_MATCH_FEEDBACK = \"QUICK_MATCH_FEEDBACK\",\n  START_GAME_FEEDBACK = \"START_GAME_FEEDBACK\",\n  PLAY_AGAIN_FEEDBACK = \"PLAY_AGAIN_FEEDBACK\",\n  RESET_BOARD_FEEDBACK = \"RESET_BOARD_FEEDBACK\",\n  SET_BOARD_SIZE_FEEDBACK = \"SET_BOARD_SIZE_FEEDBACK\",\n  PAUSE_FEEDBACK = \"PAUSE_FEEDBACK\",\n  CHANGE_PLAYER_TYPE_FEEDBACK = \"CHANGE_PLAYER_TYPE_FEEDBACK\",\n  SET_NUMBER_OF_BOMB_FEEDBACK = \"SET_NUMBER_OF_BOMB_FEEDBACK\",\n  SET_MAX_PLAYER_FEEDBACK = \"SET_MAX_PLAYER_FEEDBACK\",\n  GET_CURRENT_PLAYER_FEEDBACK = \"GET_CURRENT_PLAYER_FEEDBACK\",\n  SET_PLAYER_NAME_FEEDBACK = \"SET_PLAYER_NAME_FEEDBACK\",\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = \"SELECT_COORDINATE\",\n  CREATE_GAME = \"CREATE_GAME\",\n  JOIN_GAME = \"JOIN_GAME\",\n  LEAVE_GAME = 'LEAVE_GAME',\n  QUICK_MATCH = \"QUICK_MATCH\",\n  START_GAME = \"START_GAME\",\n  PLAY_AGAIN = \"PLAY_AGAIN\",\n  RESET_BOARD = \"RESET_BOARD\",\n  SET_BOARD_SIZE = \"SET_BOARD_SIZE\",\n  PAUSE = \"PAUSE\",\n  CHANGE_PLAYER_TYPE = \"CHANGE_PLAYER_TYPE\",\n  SET_NUMBER_OF_BOMB = \"SET_NUMBER_OF_BOMB\",\n  SET_MAX_PLAYER = \"SET_MAX_PLAYER\",\n  GET_CURRENT_PLAYER = \"GET_CURRENT_PLAYER\",\n  SET_PLAYER_NAME = \"SET_PLAYER_NAME\",\n}\n\nexport default SocketEvent;\n","import React, { createContext, useReducer } from \"react\";\r\nimport { IGameContext, ICoordinate, IGame, IAction } from \"../types/interface\";\r\n\r\nexport const GameContext = createContext({} as IGameContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  currentPlayer: \"\",\r\n  currentPlayerName: \"\",\r\n  name: \"\",\r\n  players: [],\r\n  coordinates: [],\r\n  tick: 10,\r\n  playerJoined: false,\r\n  showWinnerModal: false,\r\n  winner: [],\r\n  firstToast: true\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: IGame, action: IAction) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n      case \"WINNER\":\r\n      return {\r\n        ...state,\r\n        winner: payload,\r\n      };\r\n      case \"TOASTED\":\r\n      return {\r\n        ...state,\r\n        firstToast: false,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"SHOW_WINNER\":\r\n      return {\r\n        ...state,\r\n        showWinnerModal: payload,\r\n      };\r\n    case \"RESET_BOARD\":\r\n      let coordinates = [];\r\n      for (let x = 0; x < state.width; x++) {\r\n        for (let y = 0; y < state.height; y++) {\r\n          coordinates.push({\r\n            x,\r\n            y,\r\n            isBomb: false,\r\n            isSelected: false,\r\n          });\r\n        }\r\n      }\r\n      let players = state.players;\r\n      players.map((player) => {\r\n        return (player.score = 0);\r\n      });\r\n      return {\r\n        ...state,\r\n        coordinates: coordinates,\r\n        players: payload.players,\r\n      };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        id: payload.gameID,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    case \"PLAYER_JOINED\":\r\n      return {\r\n        ...state,\r\n        playerJoined: payload,\r\n      };\r\n    case \"SET_CURRENT_PLAYER\":\r\n      return {\r\n        ...state,\r\n        currentPlayer: payload.id,\r\n        currentPlayerName:\r\n          payload.name === null || payload.name === \"\"\r\n            ? \"Anonymous\"\r\n            : payload.name,\r\n      };\r\n    case \"SET_PLAYER_NAME\":\r\n      return {\r\n        ...state,\r\n        name: payload === null || payload === \"\" ? \"Anonymous\" : payload,\r\n      };\r\n    case \"SET_PLAYERS\":\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      };\r\n    case \"UPDATE_PLAYERS_SCORE\":\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      };\r\n    case \"MEMBER_JOINED\":\r\n      const playersAfterJoined = state.players;\r\n      if (payload.type === \"player\") {\r\n        playersAfterJoined.push(payload);\r\n      }\r\n      return {\r\n        ...state,\r\n        players: playersAfterJoined,\r\n      };\r\n    case \"MEMBER_LEFT\":\r\n      const playersAfterLeft = state.players;\r\n      if (payload.type === \"player\") {\r\n        playersAfterLeft.splice(playersAfterLeft.indexOf(payload), 1);\r\n      }\r\n      return {\r\n        ...state,\r\n        players: playersAfterLeft,\r\n      };\r\n    case \"MEMBER_CHANGED\":\r\n      if (payload.newType === \"player\") {\r\n        const playersAfterJoined = state.players;\r\n        playersAfterJoined.push(payload.member);\r\n\r\n        return {\r\n          ...state,\r\n          players: playersAfterJoined,\r\n        };\r\n      } else if (payload.newType === \"spectator\") {\r\n        const playersAfterLeft = state.players;\r\n        playersAfterLeft.splice(playersAfterLeft.indexOf(payload.member), 1);\r\n        return {\r\n          ...state,\r\n          players: playersAfterLeft,\r\n        };\r\n      }\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { ISocketContext } from \"../types/interface\";\nimport SocketEvent from \"../socket-event\";\n\nexport const SocketContext = createContext({} as ISocketContext);\n\nexport const SocketProvider = ({ children }: any) => {\n  const [socket] = useState(\n    io(\n      process.env.REACT_APP_SOCKET_URL ??\n        \"https://netcentric-architecture.herokuapp.com/\"\n    )\n  );\n\n  const emitEvent = (event: SocketEvent, ...data: [any]) => {\n    socket.emit(event, ...data);\n  };\n\n  return (\n    <SocketContext.Provider value={{ socket, emitEvent }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBXZqXbdMLXf-lfNVaaRf7FTyS1khV_6yY\",\n  authDomain: \"findmymines.firebaseapp.com\",\n  databaseURL: \"https://findmymines.firebaseio.com\",\n  projectId: \"findmymines\",\n  storageBucket: \"findmymines.appspot.com\",\n  messagingSenderId: \"1082480748111\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  useColorMode,\r\n  useToast,\r\n} from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { SocketContext } from \"../contexts/useSocket\";\r\nimport SocketEvent from \"../socket-event\";\r\nimport firebase from \"../Firebase\";\r\n\r\nexport default function Home() {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const { gameState, gameDispatch } = useContext(GameContext);\r\n  const { emitEvent } = useContext(SocketContext);\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    if (gameState.firstToast) {\r\n      toast({\r\n        title: \"Welcome to Find My Mines\",\r\n        description: \"Have a great day!\",\r\n        status: \"success\",\r\n        position: \"top\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n      gameDispatch({ type: \"TOASTED\", payload: null });\r\n    }\r\n  }, [toast, gameState, gameDispatch]);\r\n\r\n  function handleChange(event: any) {\r\n    if (event.target.name === \"name\") {\r\n      setName(event.target.value);\r\n    } else if (event.target.name === \"email\") {\r\n      setEmail(event.target.value);\r\n    } else if (event.target.name === \"password\") {\r\n      setPassword(event.target.value);\r\n    }\r\n  }\r\n\r\n  function handleSubmit() {\r\n    console.log(\"SET_PLAYER_NAME\", name);\r\n    gameDispatch({ type: \"SET_PLAYER_NAME\", payload: name });\r\n    if (\r\n      !(email === \"\" || email === null) &&\r\n      !(password === \"\" || password === null)\r\n    ) {\r\n      firebase\r\n        .auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(() => {\r\n          toast({\r\n            title: \"Sign in completed\",\r\n            description: \"Thank you for being a part of Find My Mines!\",\r\n            status: \"success\",\r\n            position: \"top\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Register error.\", error.code, error.message);\r\n          toast({\r\n            title: \"Sign in unsuccessful\",\r\n            description: \"Please try again later.\",\r\n            status: \"error\",\r\n            position: \"top\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n          });\r\n        });\r\n    }\r\n    emitEvent(SocketEvent.SET_PLAYER_NAME, name);\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    >\r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n          <FormControl>\r\n            <FormLabel>Name:</FormLabel>\r\n            <Input\r\n              mb=\"3\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"Ex: John\"\r\n              variant=\"outline\"\r\n              value={name}\r\n              onChange={handleChange}\r\n            />\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel>Email:</FormLabel>\r\n            <Input\r\n              mb=\"3\"\r\n              type=\"text\"\r\n              name=\"email\"\r\n              placeholder=\"Leave blank for guest\"\r\n              variant=\"outline\"\r\n              value={email}\r\n              onChange={handleChange}\r\n            />\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel>Password:</FormLabel>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"password\"\r\n              placeholder=\"Leave blank for guest\"\r\n              variant=\"outline\"\r\n              value={password}\r\n              onChange={handleChange}\r\n            />\r\n          </FormControl>\r\n\r\n          <Link to=\"create\" style={{ textDecoration: \"none\" }}>\r\n            <Button\r\n              width=\"full\"\r\n              mt={4}\r\n              variantColor=\"teal\"\r\n              variant=\"solid\"\r\n              isDisabled={name === \"\" ? true : false}\r\n              onClick={handleSubmit}\r\n            >\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"register\" style={{ textDecoration: \"none\" }}>\r\n            <Button\r\n              width=\"full\"\r\n              mt=\"2\"\r\n              fontSize=\"sm\"\r\n              color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}\r\n            >\r\n              Register\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"leaderboard\">\r\n            <Button\r\n              width=\"full\"\r\n              mt=\"2\"\r\n              fontSize=\"sm\"\r\n              color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}\r\n            >\r\n              Leaderboard\r\n            </Button>\r\n          </Link>\r\n          <Button\r\n            width=\"full\"\r\n            mt=\"2\"\r\n            fontSize=\"sm\"\r\n            color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}\r\n            onClick={toggleColorMode}\r\n          >\r\n            Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport SocketEvent from \"../../socket-event\";\r\nimport { Grid, Box, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../../contexts/useGame\";\r\nimport { SocketContext } from \"../../contexts/useSocket\";\r\n\r\nexport default function Board() {\r\n  const { gameState } = useContext(GameContext);\r\n  const { emitEvent } = useContext(SocketContext);\r\n  const { colorMode } = useColorMode();\r\n\r\n  const handleSelectCoordinate = (event: any) => {\r\n    console.log(\r\n      \"SELECT_COORDINATE\",\r\n      event.target.dataset.x,\r\n      event.target.dataset.y\r\n    );\r\n\r\n    emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n      x: Number(event.target.dataset.x),\r\n      y: Number(event.target.dataset.y),\r\n    });\r\n  };\r\n\r\n  let grid = [];\r\n  for (let cellId = 0; cellId < gameState.width * gameState.height; cellId++) {\r\n    let cellBody;\r\n    const cellState = gameState.coordinates[cellId];\r\n\r\n    if (!cellState.isSelected) {\r\n      cellBody = \"🎯\";\r\n    } else if (!cellState.isBomb) {\r\n      cellBody = \"❌\";\r\n    } else {\r\n      cellBody = \"💣\";\r\n    }\r\n\r\n    //magic chessboard formula\r\n    const cellColor =\r\n      (cellId % gameState.width) % 2 ===\r\n      Math.floor(cellId / gameState.width) % 2\r\n        ? \"orange.200\"\r\n        : \"green.200\";\r\n\r\n    grid.push(\r\n      <Box\r\n        as=\"button\"\r\n        border=\"4px\"\r\n        borderColor={cellColor}\r\n        key={cellId}\r\n        data-x={cellId % gameState.width}\r\n        data-y={Math.floor(cellId / gameState.width)}\r\n        width=\"50px\"\r\n        height=\"50px\"\r\n        bg={cellColor}\r\n        onClick={handleSelectCoordinate}\r\n      >\r\n        {cellBody}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <Grid\r\n        templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n        templateRows={`repeat(${gameState.height}, 1fr)`}\r\n        border=\"4px\"\r\n        borderColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}\r\n        w={gameState.width * 50 + 8}\r\n        h={gameState.width * 50 + 8}\r\n        gap={0}\r\n      >\r\n        {grid}\r\n      </Grid>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\nimport { GameContext } from \"../../contexts/useGame\";\nimport { SocketContext } from \"../../contexts/useSocket\";\nimport { Text, Flex, Heading } from \"@chakra-ui/core\";\n\nexport default function Info() {\n  const { gameState } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n\n  return (\n    <Flex alignItems=\"center\" flexDirection=\"column\">\n      <Heading mb={4}>Find My Mines</Heading>\n      <Text>\n        It is{\" \"}\n        <span\n          style={{\n            color: gameState.currentPlayer === socket.id ? \"orange\" : \"\",\n          }}\n        >\n          {gameState.currentPlayer === socket.id\n            ? \"YOUR\"\n            : gameState.currentPlayerName + \"'s\"}\n        </span>{\" \"}\n        turn.\n      </Text>\n      <Text mb={4}>\n        {gameState.currentPlayer === socket.id\n          ? `${gameState.tick} seconds left!`\n          : \"Please wait...\"}\n      </Text>\n    </Flex>\n  );\n}\n","import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport {\n  FormControl,\n  Input,\n  IconButton,\n  Flex,\n  Box,\n  Text,\n  Divider,\n} from \"@chakra-ui/core\";\nimport { GameContext } from \"../../contexts/useGame\";\nimport { SocketContext } from \"../../contexts/useSocket\";\nimport firebase from \"../../Firebase\";\nimport { IChatData } from \"../../types/interface\";\nimport qs from \"querystring\";\n\nexport default function Chat() {\n  const CHAT_MAX_LENGTH = 20;\n  const CHAT_MAX_NUMBER = 8;\n\n  const [chat, setChat] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const [chatData, setChatData] = useState([] as IChatData[]);\n  const { socket } = useContext(SocketContext);\n\n  const handleChange = (event: any) => {\n    if (event.target.value.length < CHAT_MAX_LENGTH) {\n      setChat(event.target.value);\n    }\n  };\n\n  const onChatEvent = useCallback(() => {\n    console.log(gameState.id);\n    firebase\n      .database()\n      .ref(\"games/\" + gameState.id)\n      .on(\n        \"value\",\n        (data) => {\n          const retrievedChat = data.val();\n          if (retrievedChat === null) {\n            return;\n          }\n          const cleanedChat: IChatData[] = [];\n          Object.keys(retrievedChat).forEach((key) => {\n            cleanedChat.push({\n              username: retrievedChat[key].username,\n              message: retrievedChat[key].message,\n            });\n          });\n          setChatData(cleanedChat);\n        },\n        () => {\n          console.log(\"Error\");\n        }\n      );\n  }, [gameState.id]);\n\n  useEffect(() => {\n    onChatEvent();\n  }, [onChatEvent]);\n\n  const handleSubmit = () => {\n    console.log(gameState.id, gameState.name);\n    if (chat === \"\" || chat === null) {\n      return;\n    }\n    setChat(\"\");\n    axios.post(\n      \"https://asia-southeast2-findmymines.cloudfunctions.net/addChatMessage/\",\n      qs.stringify({\n        message: chat,\n        uid: socket.id,\n        username: gameState.name,\n      }),\n      {\n        params: {\n          gameId: gameState.id,\n        },\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      }\n    );\n  };\n\n  const chatView: JSX.Element[] = [];\n  let chatKey = 0;\n  chatData.forEach((chatDatum) =>\n    chatView.push(\n      <Text key={chatKey++}>\n        {chatDatum.username} : {chatDatum.message}\n      </Text>\n    )\n  );\n  const truncatedChatView = chatView.slice(\n    Math.max(0, chatView.length - CHAT_MAX_NUMBER)\n  );\n\n  const scoreView: JSX.Element[] = [];\n  let playerKey = 0;\n  gameState.players.forEach((player) =>\n    scoreView.push(\n      <Text>\n        <span style={{ fontWeight: \"bold\" }}>\n          {player.name?.length === 0 ? \"Player \" + ++playerKey : player.name}:{\" \"}\n        </span>\n        <span style={{ color: \"orange\" }}>{player.score}</span>\n      </Text>\n    )\n  );\n\n  return (\n    <Flex direction=\"column\">\n      <Box backgroundColor=\"gray\" padding=\"2\">\n        <Flex fontWeight=\"bold\" fontSize=\"xl\" justifyContent=\"center\" pb=\"2\">\n          Informations\n        </Flex>\n        <Text>Game ID: <span style={{ color: \"orange\" }}>{gameState.id}</span></Text>\n        <Text mb={4}>Player: <span style={{ color: \"orange\" }}>{gameState.name}</span></Text>\n        <Divider orientation=\"horizontal\"/>\n        <Flex fontWeight=\"bold\" fontSize=\"xl\" justifyContent=\"center\" pb=\"2\">\n          Scores\n        </Flex>\n        {scoreView}\n        <Text fontWeight=\"light\" pt={2}>\n          There are {gameState.players.length} players online\n        </Text>\n      </Box>\n      <Divider orientation=\"horizontal\" />\n      <Box backgroundColor=\"gray\" padding=\"2\">\n        <Flex fontWeight=\"bold\" fontSize=\"xl\" justifyContent=\"center\" pb=\"2\">\n          Chat\n        </Flex>\n        {truncatedChatView}\n        <FormControl>\n          <Flex direction=\"row\" justifyContent=\"center\" mt=\"4\">\n            <Input placeholder=\"Chat...\" value={chat} onChange={handleChange} />\n            <IconButton\n              height=\"inherit\"\n              width=\"inherit\"\n              px=\"2\"\n              marginLeft=\"2\"\n              aria-label=\"Send chat\"\n              icon=\"check\"\n              size=\"sm\"\n              onClick={handleSubmit}\n            ></IconButton>\n          </Flex>\n        </FormControl>\n      </Box>\n    </Flex>\n  );\n}\n","import React, { useContext } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Button,\n} from \"@chakra-ui/core\";\nimport { GameContext } from \"../../contexts/useGame\";\n\nexport default function WinnerModal() {\n  const { gameState, gameDispatch } = useContext(GameContext);\n\n  // function findWinner(): string {\n  //   const players = gameState.players;\n  //   let maxScore = 0;\n  //   let winner = \"\";\n\n  //   for (let i = 0; i < players.length; i++) {\n  //     if (players[i].score > maxScore) {\n  //       maxScore = players[i].score;\n  //     }\n  //   }\n  //   for (let i = 0; i < players.length; i++) {\n  //     console.log(maxScore);\n  //     console.log(players[i].name);\n  //     console.log(players[i].score);\n  //     if (players[i].score === maxScore) {\n  //       if (winner !== \"\") {\n  //         winner = winner + \" \";\n  //       }\n  //       winner = winner + players[i].name;\n  //     }\n  //   }\n  //   return winner;\n  // }\n\n  function findWinner(): string {\n    const winner = gameState.winner;\n    console.log(winner);\n    console.log(winner.length + \"leng\");\n    if (winner.length === 1) {\n      return (\n        \"The winner is \" +\n        winner[0].name +\n        \" with a score of \" +\n        winner[0].score\n      );\n    } else if (winner.length > 1) {\n      let tiePlayers = \"\";\n      for (let i = 0; i < winner.length; i++) {\n        if (tiePlayers !== \"\") {\n          tiePlayers = tiePlayers + \" \";\n        }\n        tiePlayers = tiePlayers + winner[i].name;\n      }\n      return (\n        \"There is a tie between \" +\n        tiePlayers +\n        \" with a score of \" +\n        winner[0].score\n      );\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <>\n      <Modal isOpen={gameState.showWinnerModal}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Congratulations!</ModalHeader>\n          <ModalBody>{findWinner()}</ModalBody>\n          <ModalFooter>\n            <Button\n              variantColor=\"blue\"\n              mr={3}\n              onClick={() => {\n                gameDispatch({ type: \"SHOW_WINNER\", payload: false });\n              }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\r\nimport { Button, Flex, Box, Divider, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Board from \"./components/Board\";\r\nimport Info from \"./components/Info\";\r\nimport Chat from \"./components/Chat\";\r\nimport { SocketContext } from \"../contexts/useSocket\";\r\nimport SocketEvent from \"../socket-event\";\r\nimport WinnerModal from \"./components/WinnerModal\";\r\n\r\nexport default function Play() {\r\n  const { gameState } = useContext(GameContext);\r\n  const { colorMode } = useColorMode();\r\n  const { emitEvent } = useContext(SocketContext);\r\n\r\n  function emitResetBoard() {\r\n    console.log(SocketEvent.RESET_BOARD);\r\n    emitEvent(SocketEvent.RESET_BOARD, null);\r\n  }\r\n\r\n  function emitDisconnect() {\r\n    emitEvent(SocketEvent.LEAVE_GAME);\r\n  }\r\n\r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n        <Link to=\"/\">\r\n          <Button>Click me to go back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    >\r\n      <WinnerModal />\r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Flex direction=\"row\">\r\n          <Flex direction=\"column\">\r\n            <Info />\r\n            <Flex justifyContent=\"center\" alignContent=\"center\">\r\n              <Board />\r\n            </Flex>\r\n\r\n            <Flex direction=\"row\" justifyContent=\"center\" marginTop=\"4\">\r\n              <Button onClick={emitResetBoard} padding=\"2\" marginRight=\"2\">\r\n                Reset Game\r\n              </Button>\r\n              <Button onClick={emitDisconnect} padding=\"2\">\r\n                <Link to=\"/\">Disconnect</Link>\r\n              </Button>\r\n            </Flex>\r\n          </Flex>\r\n          <Divider orientation=\"vertical\" />\r\n          <Chat />\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Flex,\n  Box,\n  Button,\n  Heading,\n  useColorMode,\n  FormControl,\n  FormLabel,\n  Input,\n  useToast,\n} from \"@chakra-ui/core\";\nimport firebase from \"../Firebase\";\n\nexport default function Register() {\n  const { colorMode } = useColorMode();\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const toast = useToast();\n\n  function handleChange(event: any) {\n    if (event.target.name === \"username\") {\n      setUsername(event.target.value);\n    } else if (event.target.name === \"email\") {\n      setEmail(event.target.value);\n    } else if (event.target.name === \"password\") {\n      setPassword(event.target.value);\n    }\n  }\n\n  function handleSubmit() {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(() => {\n        toast({\n          title: \"Register completed\",\n          description: \"Thank you for being a part of Find My Mines!\",\n          status: \"success\",\n          position: \"top\",\n          duration: 5000,\n          isClosable: true,\n        });\n      })\n      .catch((error) => {\n        console.log(\"Register error.\", error.code, error.message);\n        toast({\n          title: \"Register unsuccessful\",\n          description: \"Please try again later.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n  }\n\n  return (\n    <Flex\n      width=\"full\"\n      height=\"100%\"\n      align=\"center\"\n      position=\"absolute\"\n      justifyContent=\"center\"\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n    >\n      <Box\n        p={10}\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n        borderRadius={10}\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n      >\n        <Box textAlign=\"center\">\n          <Heading>Register</Heading>\n        </Box>\n        <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n          <FormControl>\n            <FormLabel>Username:</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"username\"\n              variant=\"outline\"\n              value={username}\n              onChange={handleChange}\n              mb=\"3\"\n            />\n            <FormLabel>Email:</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"email\"\n              variant=\"outline\"\n              value={email}\n              onChange={handleChange}\n              mb=\"3\"\n            />\n            <FormLabel>Password:</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"password\"\n              variant=\"outline\"\n              value={password}\n              onChange={handleChange}\n              mb=\"3\"\n            />\n          </FormControl>\n          <Button\n            width=\"full\"\n            mt={4}\n            variantColor=\"teal\"\n            variant=\"solid\"\n            onClick={handleSubmit}\n            fontSize=\"sm\"\n          >\n            Register\n          </Button>\n          <Link to=\"/\">\n            <Button width=\"full\" mt=\"2\" fontSize=\"sm\">\n              Back\n            </Button>\n          </Link>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Text,\n  useColorMode,\n  useToast,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\nimport { IPayload } from \"../types/interface\";\n\nexport default function CreateGame() {\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false);\n  const { colorMode } = useColorMode();\n  const [boardSize, setBoardSize] = useState(6);\n  const [numberOfBombs, setNumberOfBombs] = useState(3);\n  const [maxPlayers, setMaxPlayers] = useState(2);\n  const { socket } = useContext(SocketContext);\n\n  const toast = useToast();\n\n  useEffect(() => {\n    socket.on(SocketEvent.SET_BOARD_SIZE_FEEDBACK, (payload: IPayload) => {\n      console.log(\"SELECT_BOARD_SIZE_FEEDBACK\", payload);\n      if (!payload.isOK) {\n        toast({\n          title: \"Unable to set board size\",\n          description: \"This board size is not available.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 2000,\n          isClosable: true,\n        });\n      }\n    });\n\n    socket.on(SocketEvent.SET_NUMBER_OF_BOMB_FEEDBACK, (payload: IPayload) => {\n      console.log(\"SELECT_NUMBER_OF_BOMB_FEEDBACK\", payload);\n      if (!payload.isOK) {\n        toast({\n          title: \"Unable to set bomb number\",\n          description: \"This bomb number is not available.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 2000,\n          isClosable: true,\n        });\n      }\n    });\n\n    socket.on(SocketEvent.SET_MAX_PLAYER_FEEDBACK, (payload: IPayload) => {\n      console.log(\"SELECT_MAX_PLAYER_FEEDBACK\", payload);\n      if (!payload.isOK) {\n        toast({\n          title: \"Unable to set max players\",\n          description: \"This number of maximum players is not available.\",\n          status: \"error\",\n          position: \"top\",\n          duration: 2000,\n          isClosable: true,\n        });\n      }\n    });\n  }, [socket, toast]);\n\n  const createGame = () => {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  };\n\n  const startGame = () => {\n    setStarted(true);\n    emitEvent(SocketEvent.START_GAME, null);\n  };\n\n  function handleBoardSizeChange(value: React.ReactText) {\n    setBoardSize(+value);\n  }\n\n  function handleBombChange(value: React.ReactText) {\n    setNumberOfBombs(+value);\n  }\n\n  function handleMaxPlayerChange(value: React.ReactText) {\n    setMaxPlayers(+value);\n  }\n\n  function submitGameParameters() {\n    emitEvent(\"SET_MAX_PLAYER\", maxPlayers);\n    emitEvent(\"SET_NUMBER_OF_BOMB\", numberOfBombs);\n    emitEvent(\"SET_BOARD_SIZE\", boardSize, boardSize);\n    toast({\n      title: \"Notice\",\n      description: \"The configuration is applied\",\n      status: \"info\",\n      position: \"top\",\n      duration: 1500,\n      isClosable: true,\n    });\n  }\n\n  const gameParameters =\n    gameState.id !== \"\" ? (\n      <Box\n        width=\"full\"\n        p={5}\n        m={5}\n        bg={colorMode === \"light\" ? \"gray.100\" : \"gray.500\"}\n        borderRadius={10}\n      >\n        <Text fontSize=\"xs\" fontWeight=\"medium\">\n          Game ID:\n        </Text>\n        <Text py=\"1\" rounded=\"md\" fontWeight=\"bold\" color=\"orange.300\">\n          {gameState.id}\n        </Text>\n\n        <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n          Board size:\n        </Text>\n\n        <NumberInput\n          step={1}\n          min={2}\n          max={10}\n          value={boardSize}\n          onChange={handleBoardSizeChange}\n          rounded=\"md\"\n          bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n          Bombs:\n        </Text>\n\n        <NumberInput\n          step={1}\n          defaultValue={3}\n          min={1}\n          max={Math.ceil((1 / 4) * boardSize * boardSize)}\n          bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n          rounded=\"md\"\n          value={numberOfBombs}\n          onChange={handleBombChange}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n          Max players:\n        </Text>\n\n        <NumberInput\n          step={1}\n          min={2}\n          max={10}\n          value={maxPlayers}\n          onChange={handleMaxPlayerChange}\n          rounded=\"md\"\n          bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Button\n          mt=\"2\"\n          color={colorMode === \"light\" ? \"black.200\" : \"black.400\"}\n          width=\"full\"\n          bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n          onClick={submitGameParameters}\n        >\n          Apply\n        </Button>\n      </Box>\n    ) : (\n      <></>\n    );\n\n  const playerList: JSX.Element[] = [];\n  let playerKey = 0;\n  gameState.players.forEach((player) =>\n    playerList.push(\n      <Text key={playerKey++}>\n        {player.name === \"\" || player.name === null ? \"Anonymous\" : player.name}\n      </Text>\n    )\n  );\n\n  const playerListBox = (\n    <Box\n      hidden={playerList.length === 0 ? true : false}\n      width=\"full\"\n      p={5}\n      m={5}\n      bg={colorMode === \"light\" ? \"gray.100\" : \"gray.500\"}\n      borderRadius={10}\n    >\n      <Text as=\"u\">Players joined:</Text>\n      {playerList}\n    </Box>\n  );\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Create Game</Heading>\n            </Box>\n            <Flex direction=\"row\">\n              {gameParameters}\n              {playerListBox}\n            </Flex>\n\n            <Box textAlign=\"left\" justifyItems=\"center\" mt={playerList.length === 0 ? 4 : 2}>\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                variantColor={gameState.id === \"\" ? \"teal\" : \"orange\"}\n                variant=\"solid\"\n                onClick={gameState.id === \"\" ? createGame : startGame}\n                fontSize=\"sm\"\n                isDisabled={\n                  gameState.id === \"\"\n                    ? false\n                    : gameState.players.length > 1\n                    ? false\n                    : true\n                }\n              >\n                {gameState.id === \"\" ? \"Generate Game ID\" : \"Start Game\"}\n              </Button>\n\n              <Link to=\"/join\">\n                <Button\n                  isLoading={started}\n                  width=\"full\"\n                  mt=\"2\"\n                  fontSize=\"sm\"\n                  color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}\n                >\n                  Join Game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Text,\n  Input,\n  useColorMode,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function JoinGame() {\n  const [textfield, setTextField] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false);\n  const { colorMode } = useColorMode();\n\n  function joinGame() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n  function startGame() {\n    setStarted(true);\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n  const playerList: JSX.Element[] = [];\n  let playerKey = 0;\n  gameState.players.forEach((player) =>\n    playerList.push(\n      <Text key={playerKey++}>\n        {player.name === \"\" || player.name === null ? \"Anonymous\" : player.name}\n      </Text>\n    )\n  );\n  const playerListBox = (\n    <Box\n      hidden={playerList.length === 0 ? true : false}\n      width=\"full\"\n      p={5}\n      m={5}\n      bg={colorMode === \"light\" ? \"gray.100\" : \"gray.500\"}\n      borderRadius={10}\n    >\n      <Text as=\"u\">Players joined:</Text>\n      {playerList}\n    </Box>\n  );\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Join Game</Heading>\n            </Box>\n            <Flex>{playerListBox}</Flex>\n            <Box textAlign=\"left\" justifyItems=\"center\" mt={playerList.length === 0 ? 2 : 0}>\n              <FormControl>\n                <FormLabel mb=\"1\">Enter Game ID:</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Ex: XRTMK35\"\n                  variant=\"outline\"\n                  value={textfield}\n                  onChange={handleChange}\n                />\n              </FormControl>\n\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={\n                  gameState.playerJoined === true ? \"orange\" : \"teal\"\n                }\n                variant=\"solid\"\n                onClick={gameState.playerJoined === true ? startGame : joinGame}\n                fontSize=\"sm\"\n              >\n                {gameState.playerJoined === true ? \"Start Game\" : \"Join Game\"}\n              </Button>\n              <Link to=\"/create\">\n                <Button\n                  isLoading={started}\n                  width=\"full\"\n                  mt=\"2\"\n                  fontSize=\"sm\"\n                  color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}\n                >\n                  Create game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Flex,\n  Box,\n  Text,\n  Heading,\n  Divider,\n  Spinner,\n  Button,\n  useColorMode,\n} from \"@chakra-ui/core\";\nimport { ILeaderboard } from \"../types/interface\";\n\nexport default function Leaderboard() {\n  const dummyPlayer = {\n    email: \"-\",\n    gamesWonWeek: 0,\n    firstname: \"-\",\n    lastname: \"-\",\n    username: \"-\",\n    createdAt: {\n      _seconds: 0,\n      _nanoseconds: 0,\n    },\n    gamesWonDay: 0,\n    totalGamesWon: 0,\n  };\n  const { colorMode } = useColorMode();\n  const [loading, setLoading] = useState(true);\n  const leaderboard = useRef({\n    allTime: [dummyPlayer],\n    week: [dummyPlayer],\n    day: [dummyPlayer],\n  } as ILeaderboard);\n\n  async function requestLeaderboard(timeRange: string) {\n    if (\n      timeRange !== \"allTime\" &&\n      timeRange !== \"week\" &&\n      timeRange !== \"day\"\n    ) {\n      return;\n    }\n    await axios\n      .get(\n        \"https://asia-southeast2-findmymines.cloudfunctions.net/getTopScorers\",\n        {\n          params: {\n            numOfPlayers: 1,\n            timeRange,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        const { data } = response;\n        if (data.isOk) {\n          leaderboard.current[timeRange] = data.topPlayers;\n        }\n      });\n  }\n\n  const requestLeaderboards = useCallback(async () => {\n    await requestLeaderboard(\"allTime\");\n    await requestLeaderboard(\"week\");\n    await requestLeaderboard(\"day\");\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    requestLeaderboards();\n  }, [requestLeaderboards]);\n\n  const leaderboardView = (\n    <Flex direction=\"column\" justify=\"center\" alignItems=\"center\">\n      <Heading as=\"h4\" mb=\"2\">All Time</Heading>\n      <Text color=\"gray.400\">\n        {leaderboard.current.allTime[0].username} :{\" \"}\n        {leaderboard.current.allTime[0].totalGamesWon} Wins\n      </Text>\n      <Text color=\"gray.400\">{leaderboard.current.allTime[0].email}</Text>\n      <Divider />\n      <Heading as=\"h4\" mb=\"2\">Weekly</Heading>\n      <Text color=\"gray.400\">\n        {leaderboard.current.week[0].username} :{\" \"}\n        {leaderboard.current.week[0].gamesWonWeek} Wins\n      </Text>\n      <Text color=\"gray.400\">{leaderboard.current.week[0].email}</Text>\n      <Divider />\n      <Heading as=\"h4\" mb=\"2\">Daily</Heading>\n      <Text color=\"gray.400\">\n        {leaderboard.current.day[0].username} :{\" \"}\n        {leaderboard.current.day[0].gamesWonDay} Wins\n      </Text>\n      <Text color=\"gray.400\">{leaderboard.current.day[0].email}</Text>\n      <Divider />\n      <Link to=\"/\">\n        <Button width=\"full\" mt=\"2\" fontSize=\"sm\">\n          Back\n        </Button>\n      </Link>\n    </Flex>\n  );\n\n  return (\n    <Flex\n      width=\"full\"\n      height=\"100%\"\n      align=\"center\"\n      position=\"absolute\"\n      justifyContent=\"center\"\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n    >\n      <Box\n        p={10}\n        px={20}\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n        borderRadius={10}\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n      >\n        {loading ? <Spinner /> : leaderboardView}\n      </Box>\n    </Flex>\n  );\n}\n","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    accentColor: \"#1a365d\",\n  },\n  borders: {\n    ...theme.borders,\n    \"8px\": 8,\n  },\n};\n\nexport default customTheme;\n","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Play from \"./pages/Play\";\nimport Register from \"./pages/Register\";\n\nimport { GameContext } from \"./contexts/useGame\";\nimport { SocketContext } from \"./contexts/useSocket\";\nimport { onSocketEvent } from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { CSSReset, ThemeProvider, ColorModeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./pages/CreateGame\";\nimport JoinGame from \"./pages/JoinGame\";\nimport Leaderboard from \"./pages/Leaderboard\";\nimport customTheme from \"./styling\";\n\nfunction App() {\n  const { gameDispatch } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider theme={customTheme}>\n          <ColorModeProvider>\n            <CSSReset />\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/play\">\n                <Play />\n              </Route>\n              <Switch>\n                <Route path=\"/create\">\n                  <CreateGame />\n                </Route>\n                <Route path=\"/join\">\n                  <JoinGame />\n                </Route>\n                <Route path=\"/quick-game\">Quick Game</Route>\n                <Route path=\"/register\">\n                  <Register />\n                </Route>\n                <Route path=\"/leaderboard\">\n                  <Leaderboard />\n                </Route>\n              </Switch>\n            </Switch>\n          </ColorModeProvider>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import SocketEvent from \"../socket-event\";\r\nimport { Dispatch, ReducerAction, Reducer } from \"react\";\r\nimport {\r\n  IGame,\r\n  IAction,\r\n  IPayload,\r\n  IPlayer,\r\n  IMemberPayload,\r\n  IMemberChangePayload,\r\n} from \"../types/interface\";\r\n\r\nexport function onSocketEvent(\r\n  socket: SocketIOClient.Socket,\r\n  gameDispatch: Dispatch<ReducerAction<Reducer<IGame, IAction>>>\r\n) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: payload.data.gameID });\r\n    gameDispatch({\r\n      type: \"SET_PLAYERS\",\r\n      payload: payload.data === null ? [] : payload.data.players,\r\n    });\r\n  });\r\n\r\n  socket.on(SocketEvent.SET_PLAYER_NAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SET_PLAYER_NAME_FEEDBACK\", payload);\r\n  });\r\n\r\n  socket.on(SocketEvent.WINNER, (payload: any) => {\r\n    console.log(\"WINNER\", payload);\r\n    gameDispatch({ type: \"SHOW_WINNER\", payload: true });\r\n    gameDispatch({ type: \"WINNER\", payload: payload.winners })\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"PLAYER_JOINED\", payload: payload.isOK });\r\n    gameDispatch({\r\n      type: \"SET_PLAYERS\",\r\n      payload: payload.data === null ? [] : payload.data.players,\r\n    });\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"START_GAME_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: payload.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (player: IPlayer) => {\r\n    console.log(\"NEXT_PLAYER\", player);\r\n    gameDispatch({ type: \"SET_CURRENT_PLAYER\", payload: player });\r\n  });\r\n\r\n  socket.on(SocketEvent.RESET_BOARD_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"RESET_BOARD\", payload);\r\n    gameDispatch({ type: \"RESET_BOARD\", payload: payload.data });\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: payload.data.selectedCoordinates,\r\n      });\r\n      gameDispatch({\r\n        type: \"UPDATE_PLAYERS_SCORE\",\r\n        payload: payload.data.players,\r\n      });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.MEMBER_JOINED_GAME, (payload: IMemberPayload) => {\r\n    console.log(\"MEMBER_JOINED_GAME\", payload);\r\n    gameDispatch({\r\n      type: \"MEMBER_JOINED\",\r\n      payload: payload.member,\r\n    });\r\n  });\r\n\r\n  socket.on(SocketEvent.MEMBER_LEFT_GAME, (payload: IMemberPayload) => {\r\n    console.log(\"MEMBER_LEFT_GAME\", payload);\r\n    gameDispatch({\r\n      type: \"MEMBER_LEFT\",\r\n      payload: payload.member,\r\n    });\r\n  });\r\n\r\n  socket.on(\r\n    SocketEvent.MEMBER_CHANGED_TYPE,\r\n    (payload: IMemberChangePayload) => {\r\n      console.log(\"MEMBER_CHANGED_TYPE\", payload);\r\n      gameDispatch({\r\n        type: \"MEMBER_CHANGED\",\r\n        payload: payload,\r\n      });\r\n    }\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\nimport { SocketProvider } from \"./contexts/useSocket\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <SocketProvider>\n        <App />\n      </SocketProvider>\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}