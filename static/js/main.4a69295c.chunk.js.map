{"version":3,"sources":["socket-event.ts","components/Home.tsx","components/GameModeButton.tsx","components/StartGameButton.tsx","components/Lobby.tsx","contexts/useGame.tsx","components/Play.tsx","components/Game.tsx","components/CreateGame.tsx","components/JoinGame.tsx","App.tsx","hooks/useSocket.ts","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","Home","Flex","width","height","align","position","justifyContent","Box","p","textAlign","Heading","my","justifyItems","FormControl","FormLabel","mb","Input","type","placeholder","variant","to","style","textDecoration","Button","mt","variantColor","GameModeButton","props","link","text","loading","onClick","setLoading","console","log","margin","StartGameButton","emitEvent","START_GAME","Lobby","setSelectedTab","isLoading","selectedTab","GameContext","createContext","initialState","id","started","noBombs","noBombsFound","players","coordinates","tick","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","payload","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","Play","useContext","handleSelectCoordinate","event","target","dataset","SELECT_COORDINATE","grid","cellId","cellBody","cellState","data-x","data-y","Math","floor","Grid","templateColumns","templateRows","gap","Game","path","CreateGame","gameID","JoinGame","useState","textfield","setTextField","Stack","maxWidth","onChange","JOIN_GAME","App","socketURL","socket","setSocket","useEffect","s","io","e","data","emit","useSocket","process","on","CREATE_GAME_FEEDBACK","d","TICK","JOIN_GAME_FEEDBACK","GAME_STATE_CHANGED","START_GAME_FEEDBACK","isOK","NEXT_PLAYER","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","onSocketEvent","basename","ThemeProvider","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a69295c.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = \"connection\",\n  DISCONNECT = \"disconnect\",\n\n  // Server events: [Server] -> [Client]\n  TICK = \"TICK\",\n  NEXT_PLAYER = \"NEXT_PLAYER\",\n  COORDINATED_SELECTED = \"COORDINATED_SELECTED\",\n  WINNER = \"WINNER\",\n  GAME_STATE_CHANGED = \"GAME_STATE_CHANGED\",\n  CURRENT_PLAYER = \"CURRENT_PLAYER\",\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = \"SELECT_COORDINATE_FEEDBACK\",\n  CREATE_GAME_FEEDBACK = \"CREATE_GAME_FEEDBACK\",\n  JOIN_GAME_FEEDBACK = \"JOIN_GAME_FEEDBACK\",\n  QUICK_MATCH_FEEDBACK = \"QUICK_MATCH_FEEDBACK\",\n  START_GAME_FEEDBACK = \"START_GAME_FEEDBACK\",\n  SET_BOARD_SIZE_FEEDBACK = \"SET_BOARD_SIZE_FEEDBACK\",\n  PAUSE_FEEDBACK = \"PAUSE_FEEDBACK\",\n  SET_NUMBER_OF_BOMB_FEEDBACK = \"SET_NUMBER_OF_BOMB_FEEDBACK\",\n  SET_MAX_PLAYER_FEEDBACK = \"SET_MAX_PLAYER_FEEDBACK\",\n  GET_CURRENT_PLAYER_FEEDBACK = \"GET_CURRENT_PLAYER_FEEDBACK\",\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = \"SELECT_COORDINATE\",\n  CREATE_GAME = \"CREATE_GAME\",\n  JOIN_GAME = \"JOIN_GAME\",\n  QUICK_MATCH = \"QUICK_MATCH\",\n  START_GAME = \"START_GAME\",\n  SET_BOARD_SIZE = \"SET_BOARD_SIZE\",\n  PAUSE = \"PAUSE\",\n  SET_NUMBER_OF_BOMB = \"SET_NUMBER_OF_BOMB\",\n  SET_MAX_PLAYER = \"SET_MAX_PLAYER\",\n  GET_CURRENT_PLAYER = \"GET_CURRENT_PLAYER\",\n}\n\nexport default SocketEvent;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n} from \"@chakra-ui/core\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"60%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Box p={2}>\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n          <FormControl>\r\n            <FormLabel mb=\"2\">Enter your name:</FormLabel>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"John\"\r\n              variant=\"outline\"\r\n              width=\"-32px\"\r\n            />\r\n          </FormControl>\r\n          <Link to=\"/game\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt={4} variantColor=\"green\" variant=\"outline\">\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@chakra-ui/core\";\r\n\r\nexport default function GameModeButton(props: any) {\r\n  const link: string = props.link;\r\n  const text: string = props.text;\r\n  // const isLoading: boolean = props.isLoading;\r\n  // const emitEvent = props.emitEvent;\r\n\r\n  return (\r\n    <Link to={link} style={{ textDecoration: \"none\" }}>\r\n      <Button\r\n        variantColor=\"green\"\r\n        variant={props.loading[0] === link ? \"solid\" : \"outline\"}\r\n        // isLoading={props.loading[0] === link ? isLoading : undefined}\r\n        // isDisabled={props.loading[0] === link ? undefined : isLoading}\r\n        onClick={() => {\r\n          props.setLoading([link, true]);\r\n          switch (link) {\r\n            case \"/game/create\":\r\n              return console.log(\"Create\");\r\n            case \"/game/join\":\r\n              return console.log(\"joinnnnn\");\r\n            case \"/game/quick-game\":\r\n              return console.log(\"quickkkk\");\r\n          }\r\n        }}\r\n        margin=\"2\"\r\n      >\r\n        {text}\r\n      </Button>\r\n    </Link>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"@chakra-ui/core\";\r\nimport SocketEvent from \"../socket-event\";\r\n\r\nexport default function StartGameButton(props: any) {\r\n  const emitEvent = props.emitEvent;\r\n\r\n  function startGame() {\r\n    console.log(\"Emit START_GAME\");\r\n    emitEvent(SocketEvent.START_GAME, null);\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      variantColor=\"green\"\r\n      variant=\"outline\"\r\n      onClick={startGame}\r\n      margin=\"2\"\r\n    >\r\n      Start Game\r\n    </Button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport GameModeButton from \"./GameModeButton\";\r\nimport StartGameButton from \"./StartGameButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@chakra-ui/core\";\r\n\r\nexport default function Lobby(props: any) {\r\n  return (\r\n    <>\r\n      <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n        <Button\r\n          variantColor=\"orange\"\r\n          variant=\"outline\"\r\n          onClick={() => {\r\n            props.setSelectedTab([\"\", false]);\r\n          }}\r\n          margin=\"2\"\r\n        >\r\n          Back\r\n        </Button>\r\n      </Link>\r\n      <GameModeButton\r\n        link=\"/game/create\"\r\n        text=\"Create Room\"\r\n        isLoading={props.selectedTab[1]}\r\n        loading={props.selectedTab}\r\n        setLoading={props.setSelectedTab}\r\n        emitEvent={props.emitEvent}\r\n      />\r\n      <GameModeButton\r\n        link=\"/game/join\"\r\n        text=\"Join Room\"\r\n        isLoading={props.selectedTab[1]}\r\n        loading={props.selectedTab}\r\n        setLoading={props.setSelectedTab}\r\n        emitEvent={props.emitEvent}\r\n      />\r\n      <GameModeButton\r\n        link=\"/game/quick-game\"\r\n        text=\"Quick Game\"\r\n        isLoading={props.selectedTab[1]}\r\n        loading={props.selectedTab}\r\n        setLoading={props.setSelectedTab}\r\n        emitEvent={props.emitEvent}\r\n      />\r\n      <StartGameButton emitEvent={props.emitEvent} />\r\n    </>\r\n  );\r\n}\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport IContext from \"../types/context.interface\";\r\nimport ICoordinate from \"../types/coordinate.interface\";\r\n\r\nexport const GameContext = createContext({} as IContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  players: [],\r\n  coordinates: [],\r\n  tick: -1,\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: any, action: any) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport SocketEvent from \"../socket-event\";\r\nimport { Grid, Button } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\n\r\nexport default function Play(props: any) {\r\n  const { gameState } = useContext(GameContext);\r\n\r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleSelectCoordinate = (event: any) => {\r\n    console.log(\r\n      \"SELECT_COORDINATE\",\r\n      event.target.dataset.x,\r\n      event.target.dataset.y\r\n    );\r\n    props.emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n      x: +event.target.dataset.x,\r\n      y: +event.target.dataset.y,\r\n    });\r\n  };\r\n\r\n  let grid = [];\r\n  for (let cellId: number = 0; cellId < 36; cellId++) {\r\n    let cellBody;\r\n    const cellState = gameState.coordinates[cellId];\r\n\r\n    if (!cellState.isSelected) {\r\n      cellBody = \"🎯\";\r\n    } else if (!cellState.isBomb) {\r\n      cellBody = \"❌\";\r\n    } else {\r\n      cellBody = \"💣\";\r\n    }\r\n\r\n    grid.push(\r\n      <Button\r\n        data-x={cellId % gameState.width}\r\n        data-y={Math.floor(cellId / gameState.height)}\r\n        variantColor=\"green\"\r\n        onClick={handleSelectCoordinate}\r\n      >\r\n        {cellBody}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n      templateRows={`repeat(${gameState.height}, 1fr)`}\r\n      gap={1}\r\n    >\r\n      {grid}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport Lobby from \"./Lobby\";\r\nimport Play from \"./Play\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { Box } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\n\r\nexport default function Game(props: any) {\r\n  const { gameState } = useContext(GameContext);\r\n\r\n  return (\r\n    <nav>\r\n      <Box>\r\n        <Switch>\r\n          <Route path=\"/game\">\r\n            {gameState.started ? (\r\n              <Redirect to=\"/play\" />\r\n            ) : (\r\n              <Lobby\r\n                selectedTab={props.selectedTab}\r\n                setSelectedTab={props.setSelectedTab}\r\n                emitEvent={props.emitEvent}\r\n              />\r\n            )}\r\n          </Route>\r\n          <Route path=\"/play\">\r\n            <Play />\r\n          </Route>\r\n        </Switch>\r\n      </Box>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { Box, Button, Heading, Stack } from \"@chakra-ui/core\";\n\nexport default function CreateGame(props: any) {\n  const emitEvent = props.emitEvent;\n  const gameID = props.gameID;\n\n  function createGame() {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  }\n\n  return (\n    // <>\n    //     <Modal isOpen={isOpen} onClose={onClose}>\n    //         <ModalOverlay />\n    //         <ModalContent>\n    //             <ModalHeader>Game Created</ModalHeader>\n    //             <ModalBody>\n    //                 Ask you friends to join game <br/> <br/>\n    //                 <span style={{fontWeight: 'bolder'}}>ID: {gameID}</span>\n    //             </ModalBody>\n\n    //             <ModalFooter>\n    //                 <Button variantColor=\"blue\" mr={3} onClick={() => { onClose(); exit();}}>\n    //                     Close\n    //                 </Button>\n    //             </ModalFooter>\n    //         </ModalContent>\n    //     </Modal>\n    // </>\n    <Stack align=\"center\">\n      <Heading>Create Room</Heading>\n      <Box padding=\"1rem\">\n        {/* <Input placeholder=\"Enter the game's ID\" width=\"-32px\" value={textfield} onChange={handleChange}/> */}\n        <span style={{}}>ID: </span>\n        <span style={{ color: \"red\" }}>{gameID}</span>\n      </Box>\n      <Button margin=\"1rem\" onClick={createGame}>\n        Create\n      </Button>\n    </Stack>\n  );\n}\n","import React, { useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { Box, Button, Heading, Input, Stack } from \"@chakra-ui/core\";\n\nexport default function JoinGame(props: any) {\n  let [textfield, setTextField] = useState(\"\");\n\n  const emitEvent = props.emitEvent;\n\n  function submit() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n\n  return (\n    <Stack align=\"center\">\n      <Heading>Join Room</Heading>\n      <Box margin=\"5\" maxWidth=\"300px\">\n        <Input\n          placeholder=\"Enter the game's ID\"\n          width=\"-32px\"\n          value={textfield}\n          onChange={handleChange}\n        />\n      </Box>\n      <Button margin=\"1rem\" onClick={submit}>\n        Join\n      </Button>\n    </Stack>\n  );\n}\n","import React, { useEffect, useState, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./components/Home\";\nimport Game from \"./components/Game\";\nimport Play from \"./components/Play\";\n\nimport { useSocket } from \"./hooks/useSocket\";\nimport { GameContext } from \"./contexts/useGame\";\nimport onSocketEvent from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { ThemeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./components/CreateGame\";\nimport JoinGame from \"./components/JoinGame\";\n\nfunction App() {\n  const [selectedTab, setSelectedTab] = useState([\"\", false]);\n  const { gameState, gameDispatch } = useContext(GameContext);\n\n  // Initialize Socket.IO\n  const { socket, emitEvent } = useSocket(\n    process.env.REACT_APP_SOCKET_URL ??\n      \"https://netcentric-architecture.herokuapp.com/\"\n  );\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/game\">\n              {/*  Switch = what to show in path; Link = route to path; Link is in <Game>/<Lobby>/<Link>  */}\n              <Game\n                selectedTab={selectedTab}\n                setSelectedTab={setSelectedTab}\n                emitEvent={emitEvent}\n              />\n              <Switch>\n                <Route path=\"/game/create\">\n                  <CreateGame\n                    gameID={gameState.id}\n                    emitEvent={emitEvent}\n                  />\n                </Route>\n                <Route path=\"/game/join\">\n                  <JoinGame emitEvent={emitEvent} />\n                </Route>\n                <Route path=\"/game/quick-game\">Quick Game</Route>\n              </Switch>\n            </Route>\n            <Route path=\"/play\">\n              <Play emitEvent={emitEvent} />\n            </Route>\n          </Switch>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport SocketEvent from \"../socket-event\";\n\nexport function useSocket(socketURL: string) {\n  let [socket, setSocket] = useState<null | SocketIOClient.Socket>();\n\n  // Connect to Socket.IO\n  useEffect(() => {\n    console.log(\"Connecting to WS...\");\n    let s = io(socketURL);\n    setSocket(s);\n  }, [socketURL]);\n\n  function emitEvent(e: SocketEvent, data: any) {\n    if (socket) {\n      socket.emit(e, data);\n    }\n  }\n\n  return { socket, emitEvent };\n}\n","import SocketEvent from \"../socket-event\";\r\n\r\nexport default function onSocketEvent(socket: any, gameDispatch: any) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", d);\r\n    console.log(\"Game ID: \", d.data.gameID);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: d.data.gameID });\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", d);\r\n  });\r\n\r\n  socket.on(SocketEvent.GAME_STATE_CHANGED, (d: any) => {\r\n    console.log(d);\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (d: any) => {\r\n    console.log(\"START_GAME_FEEDBACK\", d);\r\n    if (d.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: d.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (d: any) => {\r\n    console.log(\"NEXT_PLAYER\", d);\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (d: any) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", d);\r\n    if (d.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: d.data.selectedCoordinates,\r\n      });\r\n    }\r\n  });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <App />\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}