{"version":3,"sources":["socket-event.ts","App.tsx","hooks/useSocket.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","App","useState","event","id","x","y","state","setState","socketURL","socket","setSocket","useEffect","console","log","s","io","emitEvent","e","data","emit","useSocket","on","CREATE_GAME_FEEDBACK","d","TICK","JOIN_GAME_FEEDBACK","GAME_STATE_CHANGED","START_GAME_FEEDBACK","NEXT_PLAYER","handleInputChange","persist","prevState","target","name","value","className","onSubmit","preventDefault","CREATE_GAME","JOIN_GAME","START_GAME","error","onChange","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.265e2da2.chunk.js","sourcesContent":["export enum SocketEvent {\n    CONNECTION = 'connection',\n    DISCONNECT = 'disconnect',\n\n    // Server events: [Server] -> [Client]\n    TICK = 'TICK',\n    NEXT_PLAYER = 'NEXT_PLAYER',\n    COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n    WINNER = 'WINNER',\n    GAME_STATE_CHANGED = 'GAME_STATE_CHANGED',\n    CURRENT_PLAYER = 'CURRENT_PLAYER',\n\n    // Client feedbacks: [Server] -> [Client]\n    SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n    CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n    JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n    QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n    START_GAME_FEEDBACK = 'START_GAME_FEEDBACK',\n    SET_BOARD_SIZE_FEEDBACK = 'SET_BOARD_SIZE_FEEDBACK',\n    PAUSE_FEEDBACK = 'PAUSE_FEEDBACK',\n    SET_NUMBER_OF_BOMB_FEEDBACK = 'SET_NUMBER_OF_BOMB_FEEDBACK',\n    SET_MAX_PLAYER_FEEDBACK = 'SET_MAX_PLAYER_FEEDBACK',\n    GET_CURRENT_PLAYER_FEEDBACK = 'GET_CURRENT_PLAYER_FEEDBACK',\n\n    // Client events: [Client] -> [Server]\n    SELECT_COORDINATE = 'SELECT_COORDINATE',\n    CREATE_GAME = 'CREATE_GAME',\n    JOIN_GAME = 'JOIN_GAME',\n    QUICK_MATCH = 'QUICK_MATCH',\n    START_GAME = 'START_GAME',\n    SET_BOARD_SIZE = 'SET_BOARD_SIZE',\n    PAUSE = 'PAUSE',\n    SET_NUMBER_OF_BOMB = 'SET_NUMBER_OF_BOMB',\n    SET_MAX_PLAYER = 'SET_MAX_PLAYER',\n    GET_CURRENT_PLAYER = 'GET_CURRENT_PLAYER',\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { SocketEvent } from './socket-event'\nimport './App.css'\nimport { useSocket } from './hooks/useSocket'\n\nfunction App() {\n\n  let [state, setState] = useState({\n    event: \"\",\n    id: \"\",\n    x: \"\",\n    y: \"\",\n  })\n\n  // Initialize Socket.IO\n  let { socket, emitEvent } = useSocket('localhost:3001')\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (d: any) => {\n        console.log('CREATE_GAME_FEEDBACK', d)\n      })\n\n      socket.on(SocketEvent.TICK, (d: any) => {\n        console.log('TICK', d)\n      })\n\n      socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (d: any) => {\n        console.log('JOIN_GAME_FEEDBACK', d)\n      })\n\n      socket.on(SocketEvent.GAME_STATE_CHANGED, (s: any) => {\n        console.log(s)\n      })\n\n      socket.on(SocketEvent.START_GAME_FEEDBACK, (s: any) => {\n        console.log('START_GAME_FEEDBACK', s)\n      })\n\n      socket.on(SocketEvent.NEXT_PLAYER, (s: any) => {\n        console.log('NEXT_PLAYER', s)\n      })\n    }\n  }, [socket])\n\n  const handleInputChange = (event: any) => {\n    event.persist()\n    setState((prevState) => {\n      return ({\n        ...prevState,\n        [event.target.name]: event.target.value,\n      })\n    })\n  }\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault()\n\n    console.log(state)\n\n    switch (state.event) {\n      case SocketEvent.CREATE_GAME:\n        emitEvent(SocketEvent.CREATE_GAME, null)\n        console.log(\"Emit CREATE_GAME\")\n        break\n      case SocketEvent.JOIN_GAME:\n        emitEvent(SocketEvent.JOIN_GAME, state.id)\n        console.log(\"Emit JOIN_GAME\")\n        break\n      case SocketEvent.START_GAME:\n        emitEvent(SocketEvent.START_GAME, null)\n        console.log(\"Emit START_GAME\")\n        break\n      default:\n        console.error(\"Not available!\")\n    }\n  }\n\n  return (\n    <div className='App'>\n      <h1>Minimum Viable Product for Find My Mines</h1>\n      <p>Check console log for debugging</p>\n      <form onSubmit={handleSubmit}>\n        <select name=\"event\" value={state.event} onChange={handleInputChange}>\n          <option value=\"\">---Select Event---</option>\n          <option value=\"CREATE_GAME\">Create Game</option>\n          <option value=\"JOIN_GAME\">Join Game</option>\n          <option value=\"QUICK_MATCH\">Quick Match</option>\n          <option value=\"SELECT_COORDINATE\">Select Coordinate</option>\n          <option value=\"START_GAME\">Start Game</option>\n          <option value=\"disconnect\">Disconnect</option>\n        </select>\n        <input type=\"text\" name=\"id\" placeholder=\"Game ID\" value={state.id} onChange={handleInputChange} />\n        <input type=\"text\" name=\"x\" placeholder=\"X coordinate\" value={state.x} onChange={handleInputChange} />\n        <input type=\"text\" name=\"y\" placeholder=\"Y coordinate\" value={state.y} onChange={handleInputChange} />\n        <button>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\nimport io from 'socket.io-client'\nimport { SocketEvent } from '../socket-event'\n\nexport function useSocket(socketURL: string) {\n    let [socket, setSocket] = useState<null | SocketIOClient.Socket>()\n\n    // Connect to Socket.IO\n    useEffect(() => {\n        console.log(\"Connecting to WS...\")\n        let s = io(socketURL)\n        setSocket(s)\n    }, [socketURL])\n\n    function emitEvent(e: SocketEvent, data: any) {\n        if (socket) {\n            socket.emit(e, data)\n        }\n    }\n\n    return { socket, emitEvent }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}