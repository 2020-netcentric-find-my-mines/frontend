{"version":3,"sources":["socket-event.ts","contexts/useGame.tsx","contexts/useSocket.tsx","pages/Home.tsx","pages/components/Board.tsx","pages/components/Info.tsx","Firebase.tsx","pages/components/Chat.tsx","pages/Play.tsx","pages/CreateGame.tsx","pages/JoinGame.tsx","pages/Leaderboard.tsx","styling.tsx","App.tsx","logics/handleEvent.ts","serviceWorker.ts","index.tsx"],"names":["SocketEvent","GameContext","createContext","initialState","width","height","id","started","noBombs","noBombsFound","currentPlayer","name","players","coordinates","tick","playerJoined","initializeCoordinate","boardWidth","boardHeight","x","y","push","isBomb","isSelected","gameReducer","state","action","current","selected","type","payload","map","player","score","numberOfBombs","numberOfBombsFound","forEach","cell","GameProvider","children","useReducer","gameState","gameDispatch","Provider","value","SocketContext","SocketProvider","useState","io","process","socket","emitEvent","event","data","emit","Home","setName","email","setEmail","useContext","useColorMode","colorMode","toggleColorMode","toast","useToast","useEffect","title","description","status","position","duration","isClosable","Flex","align","justifyContent","bg","Box","p","borderRadius","boxShadow","textAlign","Heading","my","justifyItems","FormControl","FormLabel","mb","Input","placeholder","variant","onChange","target","to","style","textDecoration","Button","mt","variantColor","onClick","console","log","SET_PLAYER_NAME","fontSize","color","Board","handleSelectCoordinate","dataset","SELECT_COORDINATE","Number","grid","cellId","cellBody","cellState","cellColor","Math","floor","as","border","borderColor","key","data-x","data-y","Grid","templateColumns","templateRows","w","h","gap","Info","alignItems","flexDirection","Text","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Chat","chat","setChat","chatData","setChatData","onChatEvent","useCallback","database","ref","on","retrievedChat","val","cleanedChat","Object","keys","username","message","chatView","chatDatum","direction","IconButton","aria-label","icon","size","axios","post","qs","stringify","uid","params","gameId","headers","Play","RESET_BOARD","Divider","orientation","backgroundColor","padding","fontWeight","pb","length","pt","CreateGame","setStarted","boardSizeValue","setBoardSizeValue","bombValue","setBombValue","gameParameters","m","py","rounded","NumberInput","step","min","max","defaultValue","isLoading","loadingText","CREATE_GAME","START_GAME","isDisabled","JoinGame","textfield","setTextField","JOIN_GAME","Leaderboard","dummyPlayer","loading","setLoading","leaderboard","useRef","allTime","week","day","requestLeaderboard","timeRange","a","get","numOfPlayers","then","response","isOk","topPlayers","requestLeaderboards","leaderboardView","justify","totalGamesWon","gamesWonWeek","gamesWonDay","px","Spinner","customTheme","theme","colors","accentColor","borders","App","CREATE_GAME_FEEDBACK","gameID","SET_PLAYER_NAME_FEEDBACK","TICK","JOIN_GAME_FEEDBACK","isOK","START_GAME_FEEDBACK","NEXT_PLAYER","RESET_BOARD_FEEDBACK","SELECT_COORDINATE_FEEDBACK","selectedCoordinates","SET_BOARD_SIZE_FEEDBACK","SET_NUMBER_OF_BOMB_FEEDBACK","onSocketEvent","basename","ThemeProvider","ColorModeProvider","CSSReset","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7f9eddfa.chunk.js","sourcesContent":["enum SocketEvent {\n  CONNECTION = 'connection',\n  DISCONNECT = 'disconnect',\n\n  // Server events: [Server] -> [Client]\n  TICK = 'TICK',\n  NEXT_PLAYER = 'NEXT_PLAYER',\n  COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n  WINNER = 'WINNER',\n  GAME_STATE_CHANGED = 'GAME_STATE_CHANGED',\n  CURRENT_PLAYER = 'CURRENT_PLAYER',\n\n  // Client feedbacks: [Server] -> [Client]\n  SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n  CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n  JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n  QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n  START_GAME_FEEDBACK = 'START_GAME_FEEDBACK',\n  PLAY_AGAIN_FEEDBACK = 'PLAY_AGAIN_FEEDBACK',\n  RESET_BOARD_FEEDBACK = 'RESET_BOARD_FEEDBACK',\n  SET_BOARD_SIZE_FEEDBACK = 'SET_BOARD_SIZE_FEEDBACK',\n  PAUSE_FEEDBACK = 'PAUSE_FEEDBACK',\n  SET_NUMBER_OF_BOMB_FEEDBACK = 'SET_NUMBER_OF_BOMB_FEEDBACK',\n  SET_MAX_PLAYER_FEEDBACK = 'SET_MAX_PLAYER_FEEDBACK',\n  GET_CURRENT_PLAYER_FEEDBACK = 'GET_CURRENT_PLAYER_FEEDBACK',\n  SET_PLAYER_NAME_FEEDBACK = 'SET_PLAYER_NAME_FEEDBACK',\n\n  // Client events: [Client] -> [Server]\n  SELECT_COORDINATE = 'SELECT_COORDINATE',\n  CREATE_GAME = 'CREATE_GAME',\n  JOIN_GAME = 'JOIN_GAME',\n  QUICK_MATCH = 'QUICK_MATCH',\n  START_GAME = 'START_GAME',\n  PLAY_AGAIN = 'PLAY_AGAIN',\n  RESET_BOARD = 'RESET_BOARD',\n  SET_BOARD_SIZE = 'SET_BOARD_SIZE',\n  PAUSE = 'PAUSE',\n  SET_NUMBER_OF_BOMB = 'SET_NUMBER_OF_BOMB',\n  SET_MAX_PLAYER = 'SET_MAX_PLAYER',\n  GET_CURRENT_PLAYER = 'GET_CURRENT_PLAYER',\n  SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n}\n\nexport default SocketEvent","import React, { createContext, useReducer } from \"react\";\r\nimport { IGameContext, ICoordinate, IGame, IAction } from \"../types/interface\";\r\n\r\nexport const GameContext = createContext({} as IGameContext);\r\n\r\nconst initialState = {\r\n  width: -1,\r\n  height: -1,\r\n  id: \"\",\r\n  started: false,\r\n  noBombs: -1,\r\n  noBombsFound: -1,\r\n  currentPlayer: \"\",\r\n  name: \"\",\r\n  players: [],\r\n  coordinates: [],\r\n  tick: 10,\r\n  playerJoined: false,\r\n};\r\n\r\nconst initializeCoordinate = (boardWidth: number, boardHeight: number) => {\r\n  let coordinates = [];\r\n  for (let x = 0; x < boardWidth; x++) {\r\n    for (let y = 0; y < boardHeight; y++) {\r\n      coordinates.push({\r\n        x,\r\n        y,\r\n        isBomb: false,\r\n        isSelected: false,\r\n      });\r\n    }\r\n  }\r\n  return coordinates;\r\n};\r\n\r\nconst updateCoordinate = (\r\n  current: ICoordinate[],\r\n  selected: ICoordinate[],\r\n  width: number\r\n) => {\r\n  selected.forEach((cell) => {\r\n    current[cell.x + cell.y * width] = cell;\r\n  });\r\n\r\n  return current;\r\n};\r\n\r\nconst gameReducer = (state: IGame, action: IAction) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SET_TICK\":\r\n      return {\r\n        ...state,\r\n        tick: payload,\r\n      };\r\n    case \"SET_GAME_ID\":\r\n      return {\r\n        ...state,\r\n        id: payload,\r\n      };\r\n    case \"RESET_BOARD\":\r\n      let coordinates = [];\r\n    for (let x = 0; x < state.width; x++) {\r\n      for (let y = 0; y < state.height; y++) {\r\n        coordinates.push({\r\n          x,\r\n          y,\r\n          isBomb: false,\r\n          isSelected: false,\r\n        });\r\n      }\r\n    }\r\n    let players = state.players\r\n    players.map( player => {\r\n      return player.score = 0\r\n    })\r\n    return {\r\n      ...state,\r\n      coordinates: coordinates,\r\n      players: players\r\n    };\r\n    case \"INITIALIZE\":\r\n      return {\r\n        ...state,\r\n        started: true,\r\n        width: payload.boardWidth,\r\n        height: payload.boardHeight,\r\n        noBombs: payload.numberOfBombs,\r\n        noBombsFound: payload.numberOfBombsFound,\r\n        players: payload.players,\r\n        coordinates: initializeCoordinate(\r\n          payload.boardWidth,\r\n          payload.boardHeight\r\n        ),\r\n      };\r\n    case \"COORDINATE_FEEDBACK\":\r\n      return {\r\n        ...state,\r\n        coordinates: updateCoordinate(state.coordinates, payload, state.width),\r\n      };\r\n    case \"PLAYER_JOINED\":\r\n      return {\r\n        ...state,\r\n        playerJoined: payload,\r\n      };\r\n    case \"SET_CURRENT_PLAYER\":\r\n      return {\r\n        ...state,\r\n        currentPlayer: (payload === null || payload === \"\") ? \"Anonymous\" : payload,\r\n      };\r\n    case \"SET_PLAYER_NAME\":\r\n      return {\r\n        ...state,\r\n        name: (payload === null || payload === \"\") ? \"Anonymous\" : payload,\r\n      }\r\n    case \"SET_PLAYERS\":\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      }\r\n      case \"UPDATE_PLAYERS_SCORE\":\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: any) => {\r\n  const [gameState, gameDispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, gameDispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useState } from \"react\"\nimport io from \"socket.io-client\"\nimport { ISocketContext } from \"../types/interface\"\nimport SocketEvent from \"../socket-event\"\n\nexport const SocketContext = createContext({} as ISocketContext)\n\nexport const SocketProvider = ({ children }: any) => {\n\n  const [ socket ] = useState(io(process.env.REACT_APP_SOCKET_URL ??\n    \"https://netcentric-architecture.herokuapp.com/\"))\n\n  const emitEvent = (event: SocketEvent, ...data: [any]) => {\n    socket.emit(event, ...data)\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket, emitEvent }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  useColorMode,\r\n  useToast\r\n} from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\"\r\nimport { SocketContext } from \"../contexts/useSocket\"\r\nimport SocketEvent from \"../socket-event\";\r\n\r\nexport default function Home() {\r\n\r\n  const [ name, setName ] = useState(\"\")\r\n  const [ email, setEmail ] = useState(\"\")\r\n  const { gameDispatch } = useContext(GameContext)\r\n  const { emitEvent } = useContext(SocketContext)\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    toast({\r\n      title: \"Welcome to Find My Mines\",\r\n      description: \"Have a great day!\",\r\n      status: \"success\",\r\n      position: \"top\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    })\r\n  }, [toast]);\r\n\r\n  function handleNameChange(event: any) {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  function handleEmailChange(event: any) {\r\n    setEmail(event.target.value)\r\n  }\r\n\r\n  function emitName() {\r\n    console.log(\"SET_PLAYER_NAME\", name)\r\n    gameDispatch({ type: \"SET_PLAYER_NAME\", payload: name })\r\n    emitEvent(SocketEvent.SET_PLAYER_NAME, name)\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    >\r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      >\r\n        <Box textAlign=\"center\">\r\n          <Heading>Mine Sweeper</Heading>\r\n        </Box>\r\n\r\n        <Box my={4} textAlign=\"left\" justifyItems=\"center\">\r\n\r\n          <FormControl>\r\n            <FormLabel mb=\"1\">Name:</FormLabel>\r\n            <Input mb=\"3\" type=\"text\" placeholder=\"Ex: George\" variant=\"outline\" value={name} onChange={handleNameChange}/>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel mb=\"1\">Email:</FormLabel>\r\n            <Input type=\"text\" placeholder=\"Leave blank for guest\" variant=\"outline\" value={email} onChange={handleEmailChange}/>\r\n          </FormControl>\r\n\r\n          <Link to=\"create\" style={{ textDecoration: \"none\" }}>\r\n            <Button width=\"full\" mt={4} variantColor=\"teal\" variant=\"solid\" onClick={emitName}>\r\n              Continue\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"/leaderboard\">\r\n            <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\r\n              Leaderboard\r\n            </Button>\r\n          </Link>\r\n          <Button width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"} onClick={toggleColorMode}>\r\n            Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport SocketEvent from \"../../socket-event\";\r\nimport { Grid, Box, Flex, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../../contexts/useGame\";\r\nimport { SocketContext } from \"../../contexts/useSocket\";\r\n\r\nexport default function Board() {\r\n    const { gameState } = useContext(GameContext);\r\n    const { emitEvent } = useContext(SocketContext);\r\n    const { colorMode } = useColorMode();\r\n\r\n\r\n    const handleSelectCoordinate = (event: any) => {\r\n\r\n        console.log(\r\n            \"SELECT_COORDINATE\",\r\n            event.target.dataset.x,\r\n            event.target.dataset.y,\r\n        );\r\n\r\n        emitEvent(SocketEvent.SELECT_COORDINATE, {\r\n            x: Number(event.target.dataset.x),\r\n            y: Number(event.target.dataset.y),\r\n        });\r\n    };\r\n\r\n    let grid = [];\r\n    for (let cellId = 0; cellId < gameState.width * gameState.height; cellId++) {\r\n        let cellBody;\r\n        const cellState = gameState.coordinates[cellId];\r\n\r\n        if (!cellState.isSelected) {\r\n            cellBody = \"🎯\";\r\n        } else if (!cellState.isBomb) {\r\n            cellBody = \"❌\";\r\n        } else {\r\n            cellBody = \"💣\";\r\n        }\r\n\r\n        //magic chessboard formula \r\n        const cellColor = ((cellId % gameState.width) % 2 === (Math.floor(cellId / gameState.width)) % 2) ? \"orange.200\" : \"green.200\" \r\n\r\n        grid.push(\r\n            <Box\r\n                as=\"button\"\r\n                border=\"4px\"\r\n                borderColor={cellColor}\r\n                key={cellId}\r\n                data-x={cellId % gameState.width}\r\n                data-y={Math.floor(cellId / gameState.width)}\r\n                width=\"50px\"\r\n                height=\"50px\"\r\n                bg={cellColor}\r\n                onClick={handleSelectCoordinate}\r\n            >  \r\n                {cellBody}\r\n            </Box>\r\n        ); \r\n    }\r\n\r\n    return (\r\n        <Flex \r\n            width=\"full\"\r\n            height=\"100%\"\r\n            align=\"center\"\r\n            justifyContent=\"center\"\r\n        >\r\n            <Grid\r\n                templateColumns={`repeat(${gameState.width}, 1fr)`}\r\n                templateRows={`repeat(${gameState.height}, 1fr)`}\r\n                border=\"4px\"\r\n                borderColor={colorMode === \"light\" ? \"gray.200\" : \"gray.700\"}\r\n                w={gameState.width * 50 + 8}\r\n                h={gameState.width * 50 + 8}\r\n                gap={0}\r\n            >\r\n                {grid}\r\n            </Grid>\r\n        </Flex>\r\n    );\r\n}","import React, { useContext } from 'react'\nimport { GameContext } from '../../contexts/useGame'\nimport { SocketContext } from '../../contexts/useSocket'\nimport { Text, Flex, Heading } from '@chakra-ui/core'\n\nexport default function Info() {\n    const { gameState } = useContext(GameContext)\n    const { socket } = useContext(SocketContext)\n\n    return (\n        <Flex alignItems=\"center\" flexDirection=\"column\">\n            <Heading mb={4}>\n                Find My Mines\n            </Heading>\n            <Text>\n                It is {gameState.currentPlayer === socket.id ? \"your\" : \"other player's\"} turn.\n            </Text>\n            <Text>\n                {gameState.currentPlayer === socket.id ? `${gameState.tick} seconds left!` : \"Please wait...\"}\n            </Text>\n            <Text mb={4}>\n                Player: {gameState.name}\n            </Text>\n        </Flex>\n    )\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/database'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBXZqXbdMLXf-lfNVaaRf7FTyS1khV_6yY\",\n    authDomain: \"findmymines.firebaseapp.com\",\n    databaseURL: \"https://findmymines.firebaseio.com\",\n    projectId: \"findmymines\",\n    storageBucket: \"findmymines.appspot.com\",\n    messagingSenderId: \"1082480748111\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n","import React, { useState, useContext, useEffect, useCallback, } from \"react\"\nimport axios from \"axios\"\nimport { FormControl, Input, IconButton, Flex, Text } from \"@chakra-ui/core\"\nimport { GameContext } from \"../../contexts/useGame\"\nimport { SocketContext } from \"../../contexts/useSocket\"\nimport firebase from \"../../Firebase\"\nimport { IChatData } from \"../../types/interface\"\nimport qs from 'querystring'\n\nexport default function Chat() {\n    const [chat, setChat] = useState(\"\")\n    const { gameState } = useContext(GameContext)\n    const [chatData, setChatData] = useState([] as IChatData[])\n    const { socket } = useContext(SocketContext)\n\n    const handleChange = (event: any) => {\n        setChat(event.target.value)\n    }\n\n    const onChatEvent = useCallback(() => {\n        console.log(gameState.id)\n        firebase.database().ref('games/' + gameState.id).on('value', (data) => {\n            const retrievedChat = data.val()\n            if (retrievedChat === null) {\n                return\n            }\n            const cleanedChat: IChatData[] = []\n            Object.keys(retrievedChat).forEach((key) => {\n                cleanedChat.push({\n                    username: retrievedChat[key].username, \n                    message: retrievedChat[key].message,\n                })\n            })\n            setChatData(cleanedChat)\n    \n        }, () => {\n            console.log('Error')\n        })\n    }, [gameState.id])\n\n    useEffect(() => {\n        onChatEvent()\n    }, [onChatEvent])\n\n    const handleSubmit = () => {\n        console.log(gameState.id, gameState.name)\n        setChat(\"\")\n        axios.post('https://asia-southeast2-findmymines.cloudfunctions.net/addChatMessage/',\n            qs.stringify({\n                message: chat,\n                uid: socket.id,\n                username: gameState.name,\n            }),\n            {\n                params: {\n                    gameId: gameState.id\n                },\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }\n        )\n    }\n\n    const chatView: JSX.Element[] = []\n    let key = 0\n    chatData.forEach((chatDatum) => chatView.push(\n        <Text key={key++}>{chatDatum.username} : {chatDatum.message}</Text>\n    ))\n\n    return (\n        <Flex direction=\"column\">\n            {chatView}\n            <FormControl>\n                <Input placeholder=\"Chat...\" value={chat} onChange={handleChange} />\n                <IconButton aria-label=\"Send chat\" icon=\"check\" size=\"sm\" onClick={handleSubmit}></IconButton>\n            </FormControl>\n        </Flex>\n    );\n}","import React, { useContext } from \"react\";\r\nimport { Button, Flex, Box, Divider, Text, useColorMode } from \"@chakra-ui/core\";\r\nimport { GameContext } from \"../contexts/useGame\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Board from \"./components/Board\";\r\nimport Info from \"./components/Info\";\r\nimport Chat from \"./components/Chat\";\r\nimport { SocketContext } from \"../contexts/useSocket\";\r\nimport SocketEvent from \"../socket-event\";\r\n\r\nexport default function Play() {\r\n  const { gameState } = useContext(GameContext);\r\n  const { colorMode } = useColorMode();\r\n  const { emitEvent } = useContext(SocketContext)\r\n\r\n  function emitResetBoard() {\r\n    console.log(SocketEvent.RESET_BOARD)\r\n    emitEvent(SocketEvent.RESET_BOARD, null)\r\n  }\r\n  \r\n  if (!gameState.started) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n        <p>Make sure you create/join game before starting.</p>\r\n        <Link to=\"/\">\r\n          <Button>Click me to go back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      height=\"100%\"\r\n      align=\"center\"\r\n      position=\"absolute\"\r\n      justifyContent=\"center\"\r\n      bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\r\n    > \r\n      <Box\r\n        p={10}\r\n        bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\r\n        borderRadius={10}\r\n        boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Flex>\r\n          <Flex direction=\"column\">\r\n            <Info />\r\n            <Board />\r\n            <Button onClick={emitResetBoard}>\r\n              Reset Game\r\n            </Button>\r\n          </Flex>\r\n          <Divider orientation=\"vertical\" />\r\n          <Flex direction=\"column\">\r\n            <Box backgroundColor=\"gray\" padding=\"2\">\r\n              <Flex fontWeight=\"bold\" fontSize=\"xl\" justifyContent=\"center\" pb=\"2\">\r\n                Scores\r\n              </Flex>\r\n              <Text>\r\n              <span style={{ fontWeight: \"bold\" }}>{gameState.players[0].name?.length === 0 ? \"Player 1\" : gameState.players[0].name}: </span><span style={{ color: \"orange\" }}>{gameState.players[0].score}</span>\r\n              </Text>\r\n              <Text>\r\n              <span style={{ fontWeight: \"bold\" }}>{gameState.players[1].name?.length === 0 ? \"Player 2\" : gameState.players[1].name}: </span><span style={{ color: \"orange\" }}>{gameState.players[1].score}</span>\r\n              </Text>\r\n              <Text fontWeight=\"light\" pt={2}>\r\n                There are {gameState.players.length} players online\r\n              </Text>\r\n            </Box>\r\n            <Divider orientation=\"horizontal\"/>\r\n          <Chat />\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport { \n  Box, \n  Button, \n  Flex, \n  Heading, \n  Text, \n  useColorMode, \n  NumberInput, \n  NumberInputField, \n  NumberInputStepper, \n  NumberIncrementStepper, \n  NumberDecrementStepper \n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function CreateGame() {\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false)\n  const { colorMode } = useColorMode();\n  const [boardSizeValue, setBoardSizeValue] = useState(6)\n  const [bombValue, setBombValue] = useState(3)\n\n  const createGame = () => {\n    emitEvent(SocketEvent.CREATE_GAME, null);\n  }\n\n  const startGame = () => {\n    setStarted(true)\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleBoardSizeChange(value: React.ReactText) {\n    setBoardSizeValue(+value)\n  } \n\n  function handleBombChange(value: React.ReactText) {\n    setBombValue(+value)\n  }\n\n  function submitGameParameters() {\n    emitEvent('SET_NUMBER_OF_BOMB', bombValue)\n    emitEvent('SET_BOARD_SIZE', boardSizeValue, boardSizeValue)\n  }\n\n  const gameParameters = gameState.id !== \"\" ? (\n    <Box\n      p={5}\n      m={5}\n      bg={colorMode === \"light\" ? \"gray.100\" : \"gray.500\"}\n      borderRadius={10}\n    >\n      <Text fontSize=\"xs\" fontWeight=\"medium\">\n        Game ID:\n      </Text>\n        <Text py=\"1\" rounded=\"md\" fontWeight=\"bold\"\n>\n        <span style={{ color: \"orange\" }}>{gameState.id}</span>\n        </Text>\n\n      <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n        Board size:\n      </Text>\n\n      <NumberInput \n        step={1} \n        min={2} \n        max={10} \n        value={boardSizeValue} \n        onChange={handleBoardSizeChange}\n        rounded=\"md\"\n        bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n\n      <Text mt=\"2\" fontSize=\"xs\" fontWeight=\"medium\">\n        Bombs:\n      </Text>\n\n      <NumberInput \n        step={1} \n        defaultValue={3} \n        min={1} \n        max={10}\n        bg={bombValue%2 === 1 ? colorMode === \"light\" ? \"gray.200\" : \"gray.600\" : \"red.400\"}\n        rounded=\"md\"\n        value={bombValue} \n        onChange={handleBombChange}\n        \n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n\n      <Button\n        mt=\"2\"\n        color={colorMode === \"light\" ? \"black.200\" : \"black.400\"}\n        width=\"full\"\n        bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"}\n        onClick={submitGameParameters}\n      >\n        Apply\n      </Button>\n    </Box>\n  ) : <></>\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Create Game</Heading>\n            </Box>\n\n            {gameParameters}\n\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={gameState.id === \"\" ? \"teal\" : \"orange\"}\n                variant=\"solid\"\n                onClick={gameState.id === \"\" ? createGame : startGame}\n                fontSize=\"sm\"\n                isDisabled={\n                  gameState.id === \"\"\n                    ? false\n                    : gameState.players.length > 1\n                    ? false\n                    : true\n                }\n              >\n                {gameState.id === \"\" ? \"Generate Game ID\" : \"Start Game\"}\n              </Button>\n\n              <Link to=\"/join\">\n                <Button isLoading={started} width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\n                  Join Game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport SocketEvent from \"../socket-event\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  useColorMode,\n} from \"@chakra-ui/core\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { GameContext } from \"../contexts/useGame\";\nimport { SocketContext } from \"../contexts/useSocket\";\n\nexport default function JoinGame() {\n  const [textfield, setTextField] = useState(\"\");\n  const { gameState } = useContext(GameContext);\n  const { emitEvent } = useContext(SocketContext);\n  const [started, setStarted] = useState(false);\n  const { colorMode } = useColorMode();\n\n\n  function joinGame() {\n    emitEvent(SocketEvent.JOIN_GAME, textfield);\n  }\n  function startGame() {\n    setStarted(true)\n    emitEvent(SocketEvent.START_GAME, null);\n  }\n\n  function handleChange(event: any) {\n    setTextField(event.target.value);\n  }\n\n  return (\n    <>\n      {gameState.started ? (\n        <Redirect to=\"/play\" />\n      ) : (\n        <Flex\n          width=\"full\"\n          height=\"100%\"\n          align=\"center\"\n          position=\"absolute\"\n          justifyContent=\"center\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}\n        >\n          <Box\n            p={10}\n            bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n            borderRadius={10}\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Box textAlign=\"center\">\n              <Heading>Join Game</Heading>\n            </Box>\n            <Box mt={4} textAlign=\"left\" justifyItems=\"center\">\n              <FormControl>\n                <FormLabel mb=\"2\">Enter Game ID:</FormLabel>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Ex: XRTMK35\"\n                  variant=\"outline\"\n                  value={textfield}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <Button\n                isLoading={started}\n                loadingText=\"Starting...\"\n                width=\"full\"\n                mt={4}\n                variantColor={\n                  gameState.playerJoined === true ? \"orange\" : \"teal\"\n                }\n                variant=\"solid\"\n                onClick={gameState.playerJoined === true ? startGame : joinGame}\n                fontSize=\"sm\"\n              >\n                {gameState.playerJoined === true ? \"Start Game\" : \"Join Game\"}\n              </Button>\n              <Link to=\"/create\">\n                <Button isLoading={started} width=\"full\" mt=\"2\" fontSize=\"sm\" color={colorMode === \"light\" ? \"gray.600\" : \"gray.300\"}>\n                  Create game\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport axios from \"axios\"\nimport { Link } from \"react-router-dom\"\nimport { Flex, Box, Text, Heading, Divider, Spinner, Button, useColorMode } from \"@chakra-ui/core\"\nimport { ILeaderboard } from \"../types/interface\"\n\nexport default function Leaderboard() {\n    const dummyPlayer = {\n        \"email\": \"-\",\n        \"gamesWonWeek\": 0, \n        \"firstname\": \"-\",\n        \"lastname\": \"-\",\n        \"username\": \"-\",\n        \"createdAt\": {\n            \"_seconds\": 0,\n            \"_nanoseconds\": 0\n        },\n        \"gamesWonDay\": 0,\n        \"totalGamesWon\": 0\n    }\n    const { colorMode } = useColorMode();\n    const [loading, setLoading] = useState(true)\n    const leaderboard = useRef({\n        allTime: [dummyPlayer],\n        week: [dummyPlayer],\n        day: [dummyPlayer],\n    } as ILeaderboard)\n\n    async function requestLeaderboard(timeRange: string) {\n        if (timeRange !== \"allTime\" && timeRange !== \"week\" && timeRange !== \"day\") {\n            return\n        }\n        await axios.get(\"https://asia-southeast2-findmymines.cloudfunctions.net/getTopScorers\", {\n            params: {\n                numOfPlayers: 1,\n                timeRange,\n            }\n        }).then((response) => {\n            console.log(response)\n            const {data} = response\n            if (data.isOk) {\n                leaderboard.current[timeRange] = data.topPlayers\n            }\n        })\n    }\n\n    const requestLeaderboards = useCallback(async () => {\n        await requestLeaderboard(\"allTime\")\n        await requestLeaderboard(\"week\")\n        await requestLeaderboard(\"day\")\n        setLoading(false)\n    }, [])\n\n    useEffect(() => {\n        requestLeaderboards()\n    }, [requestLeaderboards])\n\n    const leaderboardView = (\n        <Flex direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Heading as=\"h4\">\n                All Time\n            </Heading>\n            <Text>\n                {leaderboard.current.allTime[0].username} : {leaderboard.current.allTime[0].totalGamesWon} Wins \n            </Text>\n            <Text>\n                {leaderboard.current.allTime[0].email}\n            </Text>\n            <Divider />\n            <Heading as=\"h4\">\n                Week\n            </Heading>\n            <Text>\n                {leaderboard.current.week[0].username} : {leaderboard.current.week[0].gamesWonWeek} Wins \n            </Text>\n            <Text>\n                {leaderboard.current.week[0].email}\n            </Text>\n            <Divider />\n            <Heading as=\"h4\">\n                Day\n            </Heading>\n            <Text>\n                {leaderboard.current.day[0].username} : {leaderboard.current.day[0].gamesWonDay} Wins \n            </Text>\n            <Text>\n                {leaderboard.current.day[0].email}\n            </Text>\n            <Divider />\n            <Link to=\"/\">\n                <Button width=\"full\" mt=\"2\" fontSize=\"sm\">\n                    Back\n                </Button>\n            </Link>\n        </Flex>\n    )\n\n    return (\n        <Flex\n            width=\"full\"\n            height=\"100%\"\n            align=\"center\"\n            position=\"absolute\"\n            justifyContent=\"center\"\n            bg={colorMode === \"light\" ? \"gray.50\" : \"gray.700\"}        >\n            <Box\n                p={10}\n                px={20}\n                bg={colorMode === \"light\" ? \"white\" : \"gray.600\"}\n                borderRadius={10}\n                boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n                \n            >\n                { loading ? <Spinner /> : leaderboardView }\n            </Box>\n        </Flex>\n    )\n}","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      accentColor: \"#1a365d\"\n    },\n    borders: {\n      ...theme.borders,\n      \"8px\": 8,\n    }\n  };\n\nexport default customTheme;","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Play from \"./pages/Play\";\n\nimport { GameContext } from \"./contexts/useGame\";\nimport { SocketContext } from \"./contexts/useSocket\";\nimport { onSocketEvent } from \"./logics/handleEvent\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { CSSReset, ThemeProvider, ColorModeProvider } from \"@chakra-ui/core\";\nimport CreateGame from \"./pages/CreateGame\";\nimport JoinGame from \"./pages/JoinGame\";\nimport Leaderboard from \"./pages/Leaderboard\";\nimport customTheme from \"./styling\";\n\nfunction App() {\n  const { gameDispatch } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n\n  // Handle Socket.IO events\n  useEffect(() => {\n    if (socket) {\n      onSocketEvent(socket, gameDispatch);\n    }\n  }, [socket, gameDispatch]);\n\n  return (\n    <div>\n      <Router basename=\"/\">\n        <ThemeProvider theme={customTheme}>\n          <ColorModeProvider>\n          <CSSReset />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/play\">\n              <Play />\n            </Route>\n            <Switch>\n              <Route path=\"/create\">\n                <CreateGame />\n              </Route>\n              <Route path=\"/join\">\n                <JoinGame />\n              </Route>\n              <Route path=\"/quick-game\">Quick Game</Route>\n              <Route path=\"/leaderboard\">\n                <Leaderboard />\n              </Route>\n            </Switch>\n          </Switch>\n          </ColorModeProvider>\n        </ThemeProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import SocketEvent from \"../socket-event\"\r\nimport { Dispatch, ReducerAction, Reducer } from 'react'\r\nimport { IGame, IAction, IPayload, IPlayer } from \"../types/interface\"\r\n\r\nexport function onSocketEvent(socket: SocketIOClient.Socket, gameDispatch: Dispatch<ReducerAction<Reducer<IGame, IAction>>>) {\r\n  socket.on(SocketEvent.CREATE_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"CREATE_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"SET_GAME_ID\", payload: payload.data.gameID });\r\n    gameDispatch({ type: \"SET_PLAYERS\", payload: payload.data === null ? [] : payload.data.players });\r\n  });\r\n\r\n  socket.on(SocketEvent.SET_PLAYER_NAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SET_PLAYER_NAME_FEEDBACK\", payload);\r\n  });\r\n\r\n  socket.on(SocketEvent.TICK, (tick: number) => {\r\n    gameDispatch({ type: \"SET_TICK\", payload: tick });\r\n  });\r\n\r\n  socket.on(SocketEvent.JOIN_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"JOIN_GAME_FEEDBACK\", payload);\r\n    gameDispatch({ type: \"PLAYER_JOINED\", payload: payload.isOK });\r\n    gameDispatch({ type: \"SET_PLAYERS\", payload: payload.data === null ? [] : payload.data.players });\r\n  });\r\n\r\n  socket.on(SocketEvent.START_GAME_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"START_GAME_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({ type: \"INITIALIZE\", payload: payload.data });\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.NEXT_PLAYER, (player: IPlayer) => {\r\n    console.log(\"NEXT_PLAYER\", player);\r\n    gameDispatch({ type: \"SET_CURRENT_PLAYER\", payload: player.id})\r\n  });\r\n  socket.on(SocketEvent.RESET_BOARD_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"RESET_BOARD\", payload);\r\n    gameDispatch({ type: \"RESET_BOARD\", payload: null})\r\n  });\r\n\r\n  socket.on(SocketEvent.SELECT_COORDINATE_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SELECT_COORDINATE_FEEDBACK\", payload);\r\n    if (payload.isOK) {\r\n      gameDispatch({\r\n        type: \"COORDINATE_FEEDBACK\",\r\n        payload: payload.data.selectedCoordinates,\r\n      });\r\n      gameDispatch({\r\n        type: \"UPDATE_PLAYERS_SCORE\",\r\n        payload: payload.data.players\r\n      })\r\n    }\r\n  });\r\n\r\n  socket.on(SocketEvent.SET_BOARD_SIZE_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SELECT_BOARD_SIZE_FEEDBACK\", payload);\r\n  })\r\n\r\n  socket.on(SocketEvent.SET_NUMBER_OF_BOMB_FEEDBACK, (payload: IPayload) => {\r\n    console.log(\"SELECT_NUMBER_OF_BOMB_FEEDBACK\", payload);\r\n  })\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GameProvider } from \"./contexts/useGame\";\nimport { SocketProvider } from \"./contexts/useSocket\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <SocketProvider>\n        <App />\n      </SocketProvider>\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}