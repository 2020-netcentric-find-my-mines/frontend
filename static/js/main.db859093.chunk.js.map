{"version":3,"sources":["socket-event.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SocketEvent","App","useState","event","id","x","y","state","setState","io","socket","setSocket","handleInputChange","persist","prevState","target","name","value","className","onClick","console","log","onSubmit","preventDefault","CREATE_GAME","emit","JOIN_GAME","QUICK_MATCH","SELECT_COORDINATE","DISCONNECT","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iOAAYA,E,2FAAAA,K,wBAAAA,E,wBAAAA,E,YAAAA,E,0BAAAA,E,4CAAAA,E,gBAAAA,E,sCAAAA,E,wDAAAA,E,4CAAAA,E,wCAAAA,E,4CAAAA,E,sCAAAA,E,0BAAAA,E,sBAAAA,E,2BAAAA,M,WC6EGC,MAxEf,WAAgB,IAAD,EAEWC,mBAAS,CAC/BC,MAAO,GACPC,GAAI,GACJC,EAAG,GACHC,EAAG,KANQ,mBAERC,EAFQ,KAEDC,EAFC,OASaN,mBAASO,IAAG,mDATzB,mBASRC,EATQ,KASAC,EATA,KAgBPC,EAAoB,SAACT,GACzBA,EAAMU,UACNL,GAAS,SAACM,GACR,OAAO,YAAC,eACHA,GADL,kBAEGX,EAAMY,OAAOC,KAAOb,EAAMY,OAAOE,YAmCxC,OACE,yBAAKC,UAAU,OACb,wEACA,8DACA,4BAAQC,QAjDU,WACpBR,EAAUF,IAAG,mDACbW,QAAQC,IAAI,kBA+CV,aACA,0BAAMC,SAnCW,SAACnB,GACpBA,EAAMoB,iBAENH,QAAQC,IAAId,GAERA,EAAMJ,QAAUH,EAAYwB,aAC9Bd,EAAOe,KAAKzB,EAAYwB,aACxBJ,QAAQC,IAAI,kBAEHd,EAAMJ,QAAUH,EAAY0B,WACrChB,EAAOe,KAAKzB,EAAY0B,UAAWnB,EAAMH,IACzCgB,QAAQC,IAAI,iBAEHd,EAAMJ,QAAUH,EAAY2B,aACrCjB,EAAOe,KAAKzB,EAAY2B,aACxBP,QAAQC,IAAI,mBAEHd,EAAMJ,QAAUH,EAAY4B,mBACrClB,EAAOe,KAAKzB,EAAY4B,mBACxBR,QAAQC,IAAI,uBAEHd,EAAMJ,QAAUH,EAAY6B,YACrCnB,EAAOe,KAAKzB,EAAY6B,YACxBT,QAAQC,IAAI,kBAGZD,QAAQC,IAAI,uEAUV,2BAAOS,KAAK,OAAOd,KAAK,QAAQe,YAAY,eAAed,MAAOV,EAAMJ,MAAO6B,SAAUpB,IACzF,2BAAOkB,KAAK,OAAOd,KAAK,KAAKe,YAAY,UAAUd,MAAOV,EAAMH,GAAI4B,SAAUpB,IAC9E,2BAAOkB,KAAK,OAAOd,KAAK,IAAIe,YAAY,eAAed,MAAOV,EAAMF,EAAG2B,SAAUpB,IACjF,2BAAOkB,KAAK,OAAOd,KAAK,IAAIe,YAAY,eAAed,MAAOV,EAAMD,EAAG0B,SAAUpB,IACjF,6CC3DYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.db859093.chunk.js","sourcesContent":["export enum SocketEvent {\n    CONNECTION = 'connection',\n    DISCONNECT = 'disconnect',\n\n    // Server events\n    TICK = 'TICK',\n    NEXT_PLAYER = 'NEXT_PLAYER',\n    COORDINATED_SELECTED = 'COORDINATED_SELECTED',\n    WINNER = 'WINNER',\n    CHANGED_GAMESTATE = 'CHANGED_GAMESTATE',\n\n    // Client feedbacks\n    SELECT_COORDINATE_FEEDBACK = 'SELECT_COORDINATE_FEEDBACK',\n    CREATE_GAME_FEEDBACK = 'CREATE_GAME_FEEDBACK',\n    JOIN_GAME_FEEDBACK = 'JOIN_GAME_FEEDBACK',\n    QUICK_MATCH_FEEDBACK = 'QUICK_MATCH_FEEDBACK',\n\n    // Client events\n    SELECT_COORDINATE = 'SELECT_COORDINATE',\n    CREATE_GAME = 'CREATE_GAME',\n    JOIN_GAME = 'JOIN_GAME',\n    QUICK_MATCH = 'QUICK_MATCH',\n}\n","import React, {useState} from 'react'\nimport io from 'socket.io-client'\nimport {SocketEvent} from './socket-event'\nimport './App.css'\n\nfunction App() {\n\n  let [state, setState] = useState({\n    event: \"\",\n    id: \"\",\n    x: \"\",\n    y: \"\",\n  })\n\n  let [socket, setSocket] = useState(io('https://netcentric-architecture.herokuapp.com/'))\n\n  const handleConnect = () => {\n    setSocket(io('https://netcentric-architecture.herokuapp.com/'))\n    console.log(\"Reconnected.\")\n  }\n\n  const handleInputChange = (event: any) => {\n    event.persist()\n    setState((prevState) => {\n      return ({\n        ...prevState,\n        [event.target.name]: event.target.value,\n      })\n    })\n  }\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault()\n\n    console.log(state)\n\n    if (state.event === SocketEvent.CREATE_GAME) {\n      socket.emit(SocketEvent.CREATE_GAME)\n      console.log(\"Created game.\")\n\n    } else if (state.event === SocketEvent.JOIN_GAME) {\n      socket.emit(SocketEvent.JOIN_GAME, state.id)\n      console.log(\"Joined game.\")\n\n    } else if (state.event === SocketEvent.QUICK_MATCH) {\n      socket.emit(SocketEvent.QUICK_MATCH)\n      console.log(\"Quick matched.\")\n\n    } else if (state.event === SocketEvent.SELECT_COORDINATE) {\n      socket.emit(SocketEvent.SELECT_COORDINATE)\n      console.log(\"Coordinate chosen.\")\n\n    } else if (state.event === SocketEvent.DISCONNECT) {\n      socket.emit(SocketEvent.DISCONNECT)\n      console.log(\"Disconnected.\")\n\n    } else {\n      console.log(\"Incorrect input. Please consult socket-event.ts for valid inputs.\")\n    }\n  }\n\n  return (\n    <div className='App'>\n      <h1>Minimum Viable Product for Find My Mines</h1>\n      <p>Check console log for debugging</p>\n      <button onClick={handleConnect}>Reconnect</button>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"event\" placeholder=\"Socket Event\" value={state.event} onChange={handleInputChange} />\n        <input type=\"text\" name=\"id\" placeholder=\"Game ID\" value={state.id} onChange={handleInputChange} />\n        <input type=\"text\" name=\"x\" placeholder=\"X coordinate\" value={state.x} onChange={handleInputChange} />\n        <input type=\"text\" name=\"y\" placeholder=\"Y coordinate\" value={state.y} onChange={handleInputChange} />\n        <button>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}