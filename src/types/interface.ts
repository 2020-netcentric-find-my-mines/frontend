import { Dispatch, ReducerAction, Reducer } from "react";

export interface ICoordinate {
  x: number
  y: number
  isBomb: boolean
  isSelected: boolean
}

export interface IGame {
  width: number
  height: number
  id: string
  started: boolean
  noBombs: number
  noBombsFound: number
  currentPlayer: string
  currentPlayerName: string
  name: string
  players: IPlayer[]
  coordinates: ICoordinate[]
  tick: number
  playerJoined: boolean
}

export interface IGameContext {
  gameState: IGame
  gameDispatch: Dispatch<ReducerAction<Reducer<IGame, IAction>>>
}

export interface ISocketContext {
  socket: SocketIOClient.Socket
  emitEvent: Function
}

export interface IAction {
  type: string
  payload: any
}

export interface IPayload {
  isOK: boolean
  data: any
  message: string | null
}

export interface IPlayer {
  id: string; // Identifier generated by Socket.IO
  name: string | null; // Player's name
  // account: string | null; // Firebase's UID
  score: number; // Player's score
  type: string
}

export interface ICreatedAt {
  _seconds: number
  _nanoseconds: number
}

export interface ITopPlayer {
  email: string
  gamesWonWeek: number
  firstname: string | undefined
  lastname: string | undefined
  username: string | undefined
  createdAt: ICreatedAt
  gamesWonDay: number
  totalGamesWon: number
}

export interface ILeaderboard {
  allTime: ITopPlayer[]
  week: ITopPlayer[]
  day:ITopPlayer[]
}

export interface IChatData {
  username: string
  message: string
}

export interface IMemberPayload {
  member: IPlayer
  numOfMembers: number
}

export interface IMemberChangePayload {
  member: IPlayer
  previousType: string
  newType: string
}
